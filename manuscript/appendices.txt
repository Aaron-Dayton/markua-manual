{backmatter}

{#appendices}
# Appendices

These appendices contain various facts and arguments which don't belong in the body of a specification.

{#w3c_semantic_emphasis}
## The W3C and Semantic Emphasis

Markua is a plain text format designed for the writing of books and documents.

Books and documents contain bold and italicized text--and have done so for centuries. Because of this, you'd think that the notion of making text bold or italic would be well understood.

If you think this, you are clearly not familiar with the work of the W3C. The notion of making something bold or italic is very controversial in HTML: first the `<b>` and `<i>` tags were used to do this, then they got kind of deprecated in favour of `<strong>` and `<em>`, and now there are four tags: `<b>`, `<strong>`, `<i>` and `<em>`, and *none* of these tags are guaranteed to produce something bold or italic!

So, what to do?

Markua outputs PDF, EPUB, MOBI and HTML ebooks. EPUB is essentially just zipped HTML. So, two of the for output formats of Markua are essentially HTML.

There are now four main ways of adding emphasis to text in HTML5: [`<strong>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-strong-element), [`<b>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-b-element), [`<em>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-em-element) and [`<i>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-i-element). The `<strong>` and `<b>` tags can wrap a span of text and add bold-esque emphasis to it, while the `<em>` and `<i>` tags can wrap a span of text and add italic-esque emphasis to it. I say "esque" since there is no guarantee that any of the four tags will actually make anything bold or italic. All four tags have actually become semantic tags in HTML5. Seriously.

So, what to do in Markua? Clearly we need to be able to make text bold and italic, since authors have been doing this in books for centuries. But EPUB is one of the output targets of Markua, and since EPUB is essentially just zipped up HTML, we need to use some HTML tags for empahasis.

Now, what Markdown does is to just always generate `<strong>` and `<em>` tags. Both `**two asterisks**` and `__two underscores__` make a `<strong>` tag, and `*one asterisk*` and `_one underscore_` make an `<em>` tag. This means that in 2004, John Gruber was clearly in the camp of "the `<b>` and `<i>` tags are unsemantic and bad". (At that time, many people were in this camp, as HTML had gone to a dark place full of presentational attributes in tags. The "move all presentation to CSS" backlash was very necessary, but there were a couple places--such as this, and such as the deprecating of the `start` element of an `<ol>`--where semantic information was lumped in with presentation-only information and was unfairly maligned.)

Now, since you can inline HTML in Markdown, if you wanted filthy `<b>` and `<i>` tags, you could just add them yourself. In Markua, however, we don't support inlining HTML, so that's not an option.

So, what to do?

Let's think about the goal of Markua:

> Markua is intended to be extremely simple and powerful. We want Markua to be the best way in the world to write everything from a short story or a novel to a computer programming book, user manual or doctoral thesis.

Given this, we want to provide the power of picking what kind of emphasis that you want, while ensuring that Markua is simple to learn. We need to support all four ways of producing emphasis in Markdown (one and two asterisks and underscores), and we want to be able to produce all four of the (newly semantic!) emphasis tags in HTML5. That's exactly what we're going to do. Unlike Markdown which defines four input tags and only two outputs, we're going to map the four inputs to four outputs.

There are actually a number of benefits to this:

* Publishers can style `<b>` and `<strong>` differently. The `<strong>` tag can produce text which is using an even heavier-weight font than the `<b>` tag.
* Authors can italicize things they are supposed to (e.g. the titles of books), without implying the kind of semantic emphasis of the `<em>` tag.
* Since the four combinations of asterisks and underscores produces different output, which to choose will be determined by the desired output, not personal taste of "do you prefer underscores or asterisks". This means that multi-author Markua projects won't have to have pointless writing style debates about which type of Markua markup to use.
* All Markdown text which has any of the four kinds of emphasis will still generate emphasis that looks like this in Markua.
* Text editors (e.g. iA Writer) which know how to show emphasis for Markdown syntax will do so with Markua emphasis syntax.

{#markdown_headings}
## Markdown Headings

Whereas Markua defines exactly one way of making every type of heading, Markdown defines two syntaxes for making headings: "Setext" and "atx". For the purpose of contrast, this section explains how headings are done in Markdown.

{#setext_headings}
### Setext Headings in Markdown

In the Setext-style of headings, top level headings can be made by adding a row of equals signs `========` below the heading, and second level headings can be made by adding a row of minus signs `--------` below the heading.

These are some Setext headers in Markdown:

```
This is an h1
=============

This is a paragraph.

This is also an h1 (really)
=

This is a paragraph.

This is an h2
-------------

This is a paragraph.

This is also an h2 (really)
-

This is a paragraph.
```

There are two main issues with this style of heading in Markdown:

1. It is inconsistent: It only supports defining `h1` and `h2`; to define h3 and below, the atx style of heading must be used.
2. It is confusing: Authors are confused about how many equals or minus signs you need to use. (As we saw above, the answer is 1, which looks disgusting.) Also, it's unclear whether you need to add a blank line below the row of equals signs or minus signs, and whether a heading is still produced if this is not done.

{#atx_headings}
### atx Headings in Markdown

In Markdown, the other heading syntax is "atx" headers. The [atx format](http://www.aaronsw.com/2002/atx/intro) was created by Aaron Swartz in 2002, and is an important predecessor to Markdown. To create an atx heading, you put the following on a line by itself, with a blank line above and below it: between one and six pound signs (`#`), followed by one or more spaces or tabs, followed by text, followed optionally by whitespace and any number of `#` characters. The number of `#` characters determines the level of heading.

These are some atx headers in Markdown:

```
# This is an h1

This is a paragraph.

# This is also an h1 ####################

This is a paragraph.

## This is an h2

This is a paragraph.

## This is also an h2 ###################

This is a paragraph.

### This is an h3

This is a paragraph.

### This is also an h3 ##################

This is a paragraph.
```

Note that all the trailing `#` characters are ignored and are not part of the heading text.

From reading this, you'll recogrize that Markua headings are a subset of atx headers.

{lfm_changes}
## Important Changes From Leanpub Flavoured Markdown

Markua is the evolution of Leanpub Flavoured Markdown. However, the goal of Markua is to remove the tailbones and appendices that aren't necessary. This appendix highlights things which are changed from Leanpub Flavoured Markdown in a way which is not adequately discussed earlier.

The following Leanpub Flavoured Markdown features are not supported in Markua:

* Centering paragraphs of text or headings using `C>` has been removed.
* Explicit font switching via `{chinesefont}`, `{latinfont}`, `{japanesefont}`, `{koreanfont}` and `{thaifont}` is replaced with attaching a `{lang}` attribute (e.g. `[some text]{lang:en}`) on a span or block.

{#implementor-rules}
## Rules and Guidelines for Implementors of Markua Processors

This entire spec is a set of rules and guidelines, but there are a few specific things to call out here:

* Markua Processors should have one comprehensive list of warnings to show Markua authors upon generating a Markua document with warnings in it.
* Markua Processors must not output generation errors and warnings into the text itself.
* Markua processors should provide warnings in situations where they can detect issues (e.g. "duplicate cross-reference", "not understood programming language", "unknown math processor", etc).
* Markua processors must not explode when encountering unsupported features that have legal Markua syntax (e.g. an unknown Math dialect or human language).
* Links to cross-references that don't correspond to an id that exists may either be created as a (broken, non-functional) link or be created as normal text (not a link).
* Crosslinks that reference an unused id may either be created as a (non-functional) link or be created as normal text (not a link) by a Markua Processor. The Markua Processor may also output a warning about this somewhere, but not in the actual document text itself.