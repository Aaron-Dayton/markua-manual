{#blockquotes}
# Block Quotes

Block quotes can span multiple pages. They are created by prefacing lines with `> `, i.e. a greater than character followed by a space.

A blockquote can contain other block-level elements, most commonly paragraphs. To start a new block level element within a blockquote, just put a line starting with a `>` followed by an optional space. It is equivalent to placing a `> ` in front of every line of the paragraphs.

Block quotes can be multi-paragraph. To create a multi-paragraph block quote, you need to separate each paragraph with a line containing a `>` and whitespace only.

Single newlines inside a block quote do not start new paragraphs. Instead, they simply add a line break, which produces a `<br/>` in HTML. This is identical to how single newlines inside a top-level Markua paragraph function.

A> The nesting of block quotes in Markdown is not supported in Markua.

A> Note that any headings inside block quotes, asides and blurbs do not show up in the Table of Contents. They can also be formatted differently by Markua Processors.

## Examples

### Example 1: A Block Quote Containing Three Paragaphs

#### Markua Syntax

{#input_block_quote_1}
```
This is a paragraph before the block quote.

> This is a paragraph in the block quote.
>
> This is a
> second paragraph in the block quote
> which contains newlines.
>
> This is a third paragraph in the block quote.

This is a paragraph after the block quote.
```

#### HTML Output

The HTML output for a block quote is simply a `div`, not a `section` or an `aside`, since an arbitrary block quote is not something which is a top-level element of a book.

TODO - does `<blockquote>` cause problems for EPUB readers?

{#output_block_quote_1}
```
<p>This is a paragraph before the block quote.</p>
<blockquote>
<p>This is a paragraph in the block quote.</p>
<p>This is a<br/>
second paragraph in the block quote<br/>
which contains newlines.</p>
<p>This is a third paragraph in the block quote.</p>
</blockquote>
<p>This is a paragraph after the block quote.</p>
```

{#asides}
# Asides

Asides are text which is formatted separately from the main text by a Markua processor. Asides can span multiple pages.

Asides can be created like block quotes, but using `A>` line prefixes. The same rules for newlines apply.

## Example

### Markua Syntax

{#input_aside_1}
```
This is a paragraph before the aside.

A> This is a paragraph in the aside.
A>
A> This is a
A> second paragraph in the aside
A> which contains newlines.
A>
A> This is a third paragraph in the aside.

This is a paragraph after the aside.
```

### HTML Output

The HTML output for an Aside is simply a `div`, not a `section` or an `aside`, since an arbitrary aside is not something which is a top-level element of a book. (Also, some legacy EPUB readers would choke on `section` or `aside`.)

{#output_aside_1}
```
<p>This is a paragraph before the aside.</p>
<div class="aside">
<p>This is a paragraph in the aside.</p>
<p>This is a<br/>
second paragraph in the aside<br/>
which contains newlines.</p>
<p>This is a third paragraph in the aside.</p>
</div>
<p>This is a paragraph after the aside.</p>
```

{#blurbs}
# Blurbs

Blurbs are like asides, but with two differences.

1. They are created with `B> ` not `A> ` prefixed lines.
2. They are intended to be short, and thus do not need to support page breaks inside them.
3. They can have an optional `class`, which can be used by Markua processors to decorate the blurb (e.g. with icons).

## Example

### Markua Syntax

{#input_blurb_1}
```
This is a paragraph before the blurb.

B> This is a paragraph in the blurb.
B>
B> This is a
B> second paragraph in the blurb
B> which contains newlines.
B>
B> This is a third paragraph in the blurb.

This is a paragraph after the blurb.
```

### HTML Output

The HTML output for an Blurb is simply a `div` with a class of "blurb".

{#output_blurb_1}
```
<p>This is a paragraph before the blurb.</p>
<div class="blurb">
<p>This is a paragraph in the blurb.</p>
<p>This is a<br/>
second paragraph in the blurb<br/>
which contains newlines.</p>
<p>This is a third paragraph in the blurb.</p>
</div>
<p>This is a paragraph after the blurb.</p>
```

## Classes of Blurbs and Syntactic Sugar

Like all Markua block elements, blurbs can have a `class` attribute attached to them. Here's an example:

```
{class: warning}
B> Warning text. Don't do this!
B>
B> This is still part of the blurb. Note that the entire blurb gets the class element.
```

### Syntactic Sugar for Standard Blurb Classes

Markua has its origin in Leanpub, and Leanpub has its origin in authoring computer programming books.

In computer programming books, there are a number of blurb types which are a defacto standard:

* `discussion`
* `error`
* `exercise`
* `information`
* `question`
* `tip`
* `warning`

Having to constantly type `{class: warning}` in a computer programming book with a number of warnings would get tedious, as would any of the other blurb classes listed above.

So, Markua defines a standard shorthand syntax for these classes of blurbs. With this syntax, you use a different letter than `B` in the `B>`, to create a blurb with the appropriate class:

```
* `D>` for `discussion`
* `E>` for `error`
* `X>` for `exercise`
* `I>` for `information`
* `Q>` for `question`
* `T>` for `tip`
* `W>` for `warning`
```

W> TODO - sleep on this and decide if is this a good or bad idea to bring back ... With this and the `id` syntax question it's tempting to at least be consistent and either support both or just one, but it's odd to only do sugar for `id` and support both for blurb classes?!


There are no required CSS rules in Markua, and thus, there is no required special support for any specific class attributes on a blurb or anywhere else.

For example, Leanpub produces a lot of computer programming books, so it understands the following values for the `class` attribute on a blurb:


### Examples



##### Markua Syntax

{#input_blurb_1}
```
This is a paragraph before the blurb.

{class: warning}
B> This is a paragraph in the blurb.
B>
B> This is a
B> second paragraph in the blurb
B> which contains newlines.
B>
B> This is a third paragraph in the blurb.

This is a paragraph after the blurb.
```

##### HTML Output

The HTML output for an Blurb is simply a `div` with a class of "blurb".

{#output_blurb_1}
```
<p>This is a paragraph before the blurb.</p>
<div class="blurb warning">
<p>This is a paragraph in the blurb.</p>
<p>This is a<br/>
second paragraph in the blurb<br/>
which contains newlines.</p>
<p>This is a third paragraph in the blurb.</p>
</div>
<p>This is a paragraph after the blurb.</p>
```

## Using Extension Attributes on Blurbs to add Icons

As discussed later, Markua blocks can support any number of [extension attributes](#extension-attributes). An extension attribute is an attribute which is not part of the Markua specification.

Blurbs provide an example of an extension attributes.

Leanpub's Markua implementation supports an `icon` attribute on blurbs. The value of this attribute is assumed to be the name of an icon in Font Awesome, without the `fa-` prefix.  So, in Leanpub, you can do this:

```
This is a paragraph before the blurb.

{icon: automobile}
B> Len thinks that cars will all be driverless soon.
B>
B> Peter thinks that Len is right, but that (except in big cities) people will still own their own driverless cars.

This is a paragraph after the blurb.
```

In Leanpub, this will produce a nice icon of a car, using the Font Awesome icon. In a Markua implementation that does not understand the icon attribute, nothing will be generated for that attribute -- it will be functionally equivalent to the attribute not being present.

Let's see whether the Markua processor that produced this document understands the `icon` attribute:

{icon: automobile}
B> Len thinks that cars will all be driverless soon.
B>
B> Peter thinks that Len is right, but that (except in big cities) people will still own their own driverless cars.

If there was a car, it did; if there was no car, it did not.