{#blurbs}
# Blurbs

Blurbs are like asides, but with two differences.

1. They are created with `B> ` not `A> ` prefixed lines.
2. They are intended to be short, and thus do not need to support page breaks inside them.
3. They can have an optional `class`, which can be used by Markua processors to decorate the blurb (e.g. with icons).

#### Example

##### Markua Syntax

{#input_blurb_1}
```
This is a paragraph before the blurb.

B> This is a paragraph in the blurb.
B>
B> This is a
B> second paragraph in the blurb
B> which contains newlines.
B>
B> This is a third paragraph in the blurb.

This is a paragraph after the blurb.
```

##### HTML Output

The HTML output for an Blurb is simply a `div` with a class of "blurb".

{#output_blurb_1}
```
<p>This is a paragraph before the blurb.</p>
<div class="blurb">
<p>This is a paragraph in the blurb.</p>
<p>This is a<br/>
second paragraph in the blurb<br/>
which contains newlines.</p>
<p>This is a third paragraph in the blurb.</p>
</div>
<p>This is a paragraph after the blurb.</p>
```

## Classes of Blurbs and Syntactic Sugar

Like all Markua block elements, blurbs can have a `class` attribute attached to them. Here's an example:

```
{class: warning}
B> Warning text. Don't do this!
B>
B> This is still part of the blurb. Note that the entire blurb gets the class element.
```

### Syntactic Sugar for Standard Blurb Classes

Markua has its origin in Leanpub, and Leanpub has its origin in authoring computer programming books.

In computer programming books, there are a number of blurb types which are a defacto standard:

* `discussion`
* `error`
* `exercise`
* `information`
* `question`
* `tip`
* `warning`

Having to constantly type `{class: warning}` in a computer programming book with a number of warnings would get tedious, as would any of the other blurb classes listed above.

So, Markua defines a standard shorthand syntax for these classes of blurbs. With this syntax, you use a different letter than `B` in the `B>`, to create a blurb with the appropriate class:

```
* `D>` for `discussion`
* `E>` for `error`
* `X>` for `exercise`
* `I>` for `information`
* `Q>` for `question`
* `T>` for `tip`
* `W>` for `warning`
```

W> TODO - sleep on this and decide if is this a good or bad idea to bring back ... With this and the `id` syntax question it's tempting to at least be consistent and either support both or just one, but it's odd to only do sugar for `id` and support both for blurb classes?!


There are no required CSS rules in Markua, and thus, there is no required special support for any specific class attributes on a blurb or anywhere else.

For example, Leanpub produces a lot of computer programming books, so it understands the following values for the `class` attribute on a blurb:

#### Example

##### Markua Syntax

{#input_blurb_1}
```
This is a paragraph before the blurb.

{class: warning}
B> This is a paragraph in the blurb.
B>
B> This is a
B> second paragraph in the blurb
B> which contains newlines.
B>
B> This is a third paragraph in the blurb.

This is a paragraph after the blurb.
```

##### HTML Output

The HTML output for an Blurb is simply a `div` with a class of "blurb".

{#output_blurb_1}
```
<p>This is a paragraph before the blurb.</p>
<div class="blurb warning">
<p>This is a paragraph in the blurb.</p>
<p>This is a<br/>
second paragraph in the blurb<br/>
which contains newlines.</p>
<p>This is a third paragraph in the blurb.</p>
</div>
<p>This is a paragraph after the blurb.</p>
```

## Using Extension Attributes on Blurbs to add Icons

As discussed later, Markua blocks can support any number of [extension attributes](#extension-attributes). An extension attribute is an attribute which is not part of the Markua specification.

Blurbs provide an example of an extension attributes.

Leanpub's Markua implementation supports an `icon` attribute on blurbs. The value of this attribute is assumed to be the name of an icon in Font Awesome, without the `fa-` prefix.  So, in Leanpub, you can do this:

```
This is a paragraph before the blurb.

{icon: automobile}
B> Len thinks that cars will all be driverless soon.
B>
B> Peter thinks that Len is right, but that (except in big cities) people will still own their own driverless cars.

This is a paragraph after the blurb.
```

In Leanpub, this will produce a nice icon of a car, using the Font Awesome icon. In a Markua implementation that does not understand the icon attribute, nothing will be generated for that attribute -- it will be functionally equivalent to the attribute not being present.

Let's see whether the Markua processor that produced this document understands the `icon` attribute:

{icon: automobile}
B> Len thinks that cars will all be driverless soon.
B>
B> Peter thinks that Len is right, but that (except in big cities) people will still own their own driverless cars.

If there was a car, it did; if there was no car, it did not.