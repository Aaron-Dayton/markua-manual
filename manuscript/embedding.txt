{#embedding_inside_paragraph}
# Embedding Lists, Figures and Code Blocks Inside a Paragraph

In Markdown, lists and other block elements cannot be nested inside a paragraph. Instead, they all function like top-level siblings to a paragraph. This makes sense since Markdown is a way of producing HTML, and in HTML5 the W3C has [told anyone who wants to embed a list inside a paragraph to go pound sand](http://www.w3.org/TR/html5/grouping-content.html#the-p-element):

> "The solution is to realise that a paragraph, in HTML terms, is not a logical concept, but a structural one. In the fantastic example above, there are actually five paragraphs as defined by this specification: one before the list, one for each bullet, and one after the list."

So, basically, you can't embed a `<ul>` or `<ol>` inside a `<p>` tag in HTML5. Since Markdown is a way of producing HTML, you can't do it in Markdown either.

Markua, on the other hand, is a way of authoring books and documents, not just a way of producing HTML. HTML is just one of the output formats of Markua. And in books, there is a long history of embedding lists, code samples and figures in the middle of a paragraph--not in a separate top-level element, in the actual middle of the paragraph. So, Markua supports this.

However, since the HTML which is output can't embed a list in the paragraph, the solution is to use a `<div>` tag, instead of a paragraph tag. Yes, this will cause some HTML purists to complain, but it's the actual HTML suggested by the W3C [in the HTML5 spec](http://www.w3.org/TR/html5/grouping-content.html#the-p-element). Specifically, the HTML that is output for paragraphs that nest lists, figures or code blocks is `<div class="para">`. This way, book designers can style these `<div>` tags the same way as `<p>` tags.

Note that in all cases you need to add some amount of whitespace before the list, figure or code block, so that it appears embedded inside the paragraph. If you do not do this, what you will get is a paragraph with a bunch of break tags, one for each newline.

### Examples

{#embedding_inside_paragraphs_1}
#### Example 1: Correct List Embedding

##### Markua Syntax

{#input_paragraphs_1}
```
This is a paragraph.

The opinion of the W3C about lists inside paragraphs is:
  * myopic
  * rude
  * amusing
It also:
   1. is not universally accepted
   2. ignores historical precedent
   3. encourages short paragraphs, which is admittedly a plus
This is still part of the second paragraph.

This is a third paragraph.
```

##### HTML Output

{#output_paragraphs_1}
```
<p>This is a paragraph.</p>
<div class="para">The opinion of the W3C about lists inside paragraphs is:
  <ul>
    <li>myopic</li>
    <li>rude</li>
    <li>amusing</li>
  </ul>
  It also:
  <ol>
    <li>is not universally accepted</li>
    <li>ignores historical precedent</li>
    <li>encourages short paragraphs, which is admittedly a plus</li>
  </ol>
  This is still part of the second paragraph.
</div>
<p>This is a third paragraph.</p>
```

{#embedding_inside_paragraphs_2}
#### Example 2: Incorrect List Embedding

##### Markua Syntax

{#input_paragraphs_1}
```
This is a paragraph.

The opinion of the W3C about lists inside paragraphs is:
* myopic
* rude
* amusing
It also:
1. is not universally accepted
2. ignores historical precedent
3. encourages short paragraphs
This is still part of the second paragraph, but the above lists were not embedded correctly.

This is a third paragraph.
```

##### HTML Output

{#output_paragraphs_1}
```
<p>This is a paragraph.</p>
<p>The opinion of the W3C about lists inside paragraphs is:<br/>
* myopic<br/>
* rude<br/>
* amusing<br/>
It also:<br/>
1. is not universally accepted<br/>
2. ignores historical precedent<br/>
3. encourages short paragraphs<br/>
This is still part of the second paragraph, but the above lists were not embedded correctly.</p>
<p>This is a third paragraph.</p>
```



## Whitespace

Newlines, blank lines, leading spaces, trailing spaces and such in Markua are called whitespace.

Whitespace is an essential tool in Markua. Whitespace is what makes the block elements and span elements what they are.

Talking about whitespace is kind of redundant since it's covered by the rest of the spec, but it's nice to collect all the rules here.

The goal for whitespace is for everything to just work as expected, with as few surprises or gross formatting characters as possible. Prose should just work. Poetry should just work. Code should just work. In this regard, Markua has broader design goals than Markdown.

Markdown is a tool for web writers. Markua is a tool for writers.

Below are the rules which combine to accomplish this.

### All Whitespace is Preserved in Code Blocks

Inside a code block, all whitespace is preserved. This includes leading and trailing whitespace, whether those are newlines, tabs or space characters.

This is a lot simpler that trying to construct rules which would be complex and potentially brittle.

### Trailing Whitespace is Ignored Except in Code Blocks

Trailing whitespace at the end of a line has no meaning in Markua. It is ignored, except in code blocks.

A> In Markdown, trailing whitespace sometimes has meaning. (You can add two spaces to the end of a line to force a line break.) However, since this is "invisible magic formatting", and since some text editors can be set to remove trailing spaces, this is ignored.

### Leading Whitespace at the Beginning of a Paragraph is Ignored

This way, you can write paragraphs and it does not matter whether you indent or your text editor does.

### Whitespace is Preserved Following a Single Newline

Poets: you're welcome. As discussed in [poetry](#poetry), you can write sonnets with no formatting characters.

Following a single (not double) newline:

* A single space produces a single space (a "non-breaking" space, or `&nbsp;`, in HTML).
* A single tab produces four spaces (four "non-breaking" spaces, or `&nbsp;&nbsp;&nbsp;&nbsp;`, in HTML).

### Multiple Spaces Inside a Paragpraph are Collapsed to a Single Space

This has many benefits, but the largest is that it means Markua books and documents look the same regardless of whether the author uses one space after a period or two spaces after a period.

## Newlines

In its handling of newlines, Markua is dramatically different than Markdown.

### Single Newlines Inside a Paragraph is a Line Break

A single newline inside a paragraph is a line break.

This lets you write poetry without any formatting characters. This is appropriate, since formatting characters are not very poetic.

##### Markua Syntax

```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
     And yet, by heaven, I think my love as rare
     As any she belied with false compare.
```

##### HTML Output

<p>
I grant I never saw a goddess go;<br/>
My mistress when she walks treads on the ground.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And yet, by heaven, I think my love as rare<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;As any she belied with false compare.<br/>
</p>

### Two Newlines End The Block They Are In

Two newlines produce a blank line.

With one exception, a blank line ends whatever it is in.  It ends a heading, paragraph, list, aside, blurb, etc.

The only exception is inside a code block which is created with three backticks or tildes. In this case, you can have as many blank lines as you wish, and they are all output as part of the code block.

~~~
```

foo

bar

baz

```
~~~

### Single Newlines Inside a List, Aside or Blurb

A single newline inside a list, aside or blurb creates a new paragraph within that list item, aside or blurb. This can be used to create multi-paragraph list items, asides, blurbs, etc.

A> This alse means that there is no need for the 4 space indent feature of Markdown. Code blocks and other things can just be added to list items by adding a single newline.