# Markua HTML Mapping - EDITED_TO_HERE

W> TODO - This specification is being rewritten. Do not trust anything after this point.

## Poetry

### Single Newlines Inside a Paragraph is a Line Break

##### Markua Syntax

```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
     And yet, by heaven, I think my love as rare
     As any she belied with false compare.
```

##### HTML Output

<p>
I grant I never saw a goddess go;<br/>
My mistress when she walks treads on the ground.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And yet, by heaven, I think my love as rare<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;As any she belied with false compare.<br/>
</p>


## Resources

## Span Resources

### Example 1: Span Images with Alt Text

#### Markua Syntax

{#input_span_images_1}
```
Markua has a fancy ![Markua two trees logo](markua-logo-small.png) logo!

Markua also has a fancy ![Markua two trees icon](https://pbs.twimg.com/profile_images/525513829455650817/mIba4bYL_400x400.png) Twitter avatar!
```

#### HTML Output

{#output_span_images_1}
```
<p>Markua has a fancy <img src="resources/markua-logo-small.png" alt="Markua two trees logo"/> logo!</p>
<p>Markua also has a fancy <img src="https://pbs.twimg.com/profile_images/525513829455650817/mIba4bYL_400x400.png" alt="Markua two trees icon"/> Twitter avatar!</p>
```

### Example 2: Span Images with no Alt Text

#### Markua Syntax

{#input_span_images_2}
```
Markua has a fancy ![](markua-logo-small.png) logo!
```

#### HTML Output

{#output_span_images_2}
```
<p>Markua has a fancy <img src="resources/markua-logo-small.png"/> logo!</p>
```

## Figures

### Example 1: Figures with Alt Text and a Caption

#### Markua Syntax

{#input_figures_1}
```
Markua has a fancy logo:

![the word Markua with the two asterisk trees beside it](markua-logo.png "The Markua Logo")

Markua also has a fancy Twitter avatar:

![Markua two trees icon](https://pbs.twimg.com/profile_images/525513829455650817/mIba4bYL_400x400.png "The Markua Icon")

Thanks Justin, it was fun making the logo with you!
```

#### HTML Output

{#output_figures_1}
```
<p>Markua has a fancy logo:</p>
<div class="figure">
  <img src="media/markua-logo.png" alt="the word Markua with the two asterisk trees beside it"/>
  <p class="caption">The Markua Logo</p>
</div>
<p>Markua also has a fancy Twitter avatar:</p>
<div class="figure">
  <img src="https://pbs.twimg.com/profile_images/525513829455650817/mIba4bYL_400x400.png" alt="Markua two trees icon"/>
  <p class="caption">The Markua Icon</p>
</div>
<p>Thanks Justin, it was fun making the logo with you!</p>
```

### Example 2: Figures with no Alt Text or Caption

#### Markua Syntax

{#input_figures_2}
```
Markua has a fancy logo:

![](markua-logo.png)

Thanks Justin, it was fun making the logo with you!
```

#### HTML Output

{#output_figures_2}
```
<p>Markua has a fancy logo:</p>
<div class='figure'>
  <img src="media/markua-logo.png"/>
</div>
<p>Thanks Justin, it was fun making the logo with you!</p>
```

### Example 3: Figures with Alt Text but no Caption

#### Markua Syntax

{#input_figures_3}
```
Markua has a fancy logo:

![the word Markua with the two asterisk trees beside it](markua-logo.png)

Thanks Justin, it was fun making the logo with you!
```

#### HTML Output

{#output_figures_3}
```
<p>Markua has a fancy logo:</p>
<div class="figure">
  <img src="media/markua-logo.png" alt="the word Markua with the two asterisk trees beside it"/>
</div>
<p>Thanks Justin, it was fun making the logo with you!</p>
```

### Example 4: Figures with a Caption but no Alt Text

#### Markua Syntax

{#input_figures_4}
```
Markua has a fancy logo:

![](markua-logo.png "The Markua Logo")

Thanks Justin, it was fun making the logo with you!
```

#### HTML Output

{#output_figures_4}
```
<p>Markua has a fancy logo:</p>
<div class="figure">
  <img src="media/markua-logo.png"/>
  <p class="caption">The Markua Logo</p>
</div>
<p>Thanks Justin, it was fun making the logo with you!</p>
```

### Example 5: A Figure with `float` Attribute and a Percentage `width` Attribute

#### Markua Syntax

{#input_figures_5}
```
Markua has a fancy logo:

{float: "left", width: "50%"}
![the word Markua with the two asterisk trees beside it](markua-logo.png "The Markua Logo")

Thanks Justin, it was fun making the logo with you!
```

#### HTML Output

{#output_figures_5}
```
<p>Markua has a fancy logo:</p>
<div class="figure">
  <img src="markua-logo.png" style="float: left; width: 50%;" alt="the word Markua with the two asterisk trees beside it"/>
  <p class="caption">The Markua Logo</p>
</div>
<p>Thanks Justin, it was fun making the logo with you!</p>
```

### Example 6: A Figure with a `width` Attribute of `fullbleed`

#### Markua Syntax

{#input_figures_6}
```
Markua has a fancy logo:

{width: "fullbleed"}
![the word Markua with the two asterisk trees beside it](markua-logo.png "The Markua Logo")

Thanks Justin, it was fun making the logo with you!
```

#### HTML Output

{#output_figures_6}
```
<p>Markua has a fancy logo:</p>
<div class="figure">
  <img src="markua-logo.png" class="fullbleed" style="width: 100%;" alt="the word Markua with the two asterisk trees beside it"/>
  <p class="caption">The Markua Logo</p>
</div>
<p>Thanks Justin, it was fun making the logo with you!</p>
```

## Video Resources


## Audio Resources


## Code Resources

## Code Spans

### Example

{#input_code_span_1}
### Markua Syntax

```
Here is some `hello world` span code.
```

{#output_code_span_1}
### HTML Output

```
<p>Here is some <code>hello world</code> span code.</p>
```

### Example

{#input_code_span_2}
### Markua Syntax

```
Here is some ``code with a backtick (`) in it`` and other text.

If you want to have a backtick by itself, just use you need to have spaces around it like this `` ` ``. The enclosed backtick cannot start or end the code block.
```

{#output_code_span_2}
### HTML Output

```
<p>Here is some <code>code with a backtick (`) in it</code> and other text.</p>
<p>If you want to have a backtick by itself, just use you need to have spaces around it like this <code>`</code>. The enclosed backtick cannot start or end the code block.</p>
```

## Paragraphs

##### Markua Syntax

{#input_paragraphs_1}
```
This is a paragraph. The number of sentences does not matter.

This is another paragraph.

This is a third paragraph.
```

##### HTML Output

{#output_paragraphs_1}
```
<p>This is a paragraph. The number of sentences does not matter.</p>
<p>This is another paragraph.</p>
<p>This is a third paragraph.</p>
```

## Lists

### Examples

#### Example 1: A list (asterisks, one space after each)

##### Markua Syntax

{#input_unordered_list_1}
```
lorem

* foo
* bar
* baz

ipsum
```

##### HTML Output

{#output_unordered_list_1}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 2: A list (asterisks, two spaces after each)

##### Markua Syntax

{#input_unordered_list_2}
```
lorem

*  foo
*  bar
*  baz

ipsum
```

##### HTML Output

{#output_unordered_list_2}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 3: A list (asterisks, three spaces after each)

##### Markua Syntax

{#input_unordered_list_3}
```
lorem

*   foo
*   bar
*   baz

ipsum
```

##### HTML Output

{#output_unordered_list_3}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 4: A list (asterisks, four spaces after each)

##### Markua Syntax

{#input_unordered_list_4}
```
lorem

*    foo
*    bar
*    baz

ipsum
```

##### HTML Output

{#output_unordered_list_4}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 5: A list (asterisks, one tab after each)

##### Markua Syntax

{#input_unordered_list_5}
```
lorem

* foo
* bar
* baz

ipsum
```

##### HTML Output

{#output_unordered_list_5}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 6: A list (hyphens, one space after each)

##### Markua Syntax

{#input_unordered_list_6}
```
lorem

- foo
- bar
- baz

ipsum
```

##### HTML Output

{#output_unordered_list_6}
```
<p>lorem</p>
<ul class="hyphen">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 7: A list (pluses, one space after each)

##### Markua Syntax

{#input_unordered_list_7}
```
lorem

+ foo
+ bar
+ baz

ipsum
```

##### HTML Output

{#output_unordered_list_7}
```
<p>lorem</p>
<ul class="plus">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 8: A list (one element list with asterisk)

##### Markua Syntax

{#input_unordered_list_8}
```
lorem

* foo

ipsum
```

##### HTML Output

{#output_unordered_list_8}
```
<p>lorem</p>
<ul>
  <li>foo</li>
</ul>
<p>ipsum</p>
```

#### Example 9: A list (one element list with hyphen)

##### Markua Syntax

{#input_unordered_list_9}
```
lorem

- foo

ipsum
```

##### HTML Output

{#output_unordered_list_9}
```
<p>lorem</p>
<ul class="hyphen">
  <li>foo</li>
</ul>
<p>ipsum</p>
```

#### Example 10: A list (one element list with plus)

##### Markua Syntax

{#input_unordered_list_10}
```
lorem

+ foo

ipsum
```

##### HTML Output

{#output_unordered_list_10}
```
<p>lorem</p>
<ul class="plus">
  <li>foo</li>
</ul>
<p>ipsum</p>
```

#### Example 11: Not a list (variable number of spaces after bullets)

##### Markua Syntax

{#input_unordered_list_11}
```
lorem

*    foo
*   bar
*  baz

ipsum
```

##### HTML Output

{#output_unordered_list_11}
```
<p>lorem</p>
<p>*    foo<br/>
*   bar<br/>
*  baz</p>
<p>ipsum</p>
```

## Ordered Lists (i.e. Numbered Lists)

### Examples: Decimal Numbers

#### Example 1

##### Markua Syntax

{#input_ordered_list_1}
```
lorem

1. foo
2. bar
3. baz

ipsum
```

##### HTML Output

{#output_ordered_list_1}
```
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_2}
```
lorem

9. foo
10. bar
11. baz

ipsum
```

##### HTML Output

{#output_ordered_list_2}
```
<p>lorem</p>
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_3}
```
lorem

3. foo
2. bar
1. baz

ipsum
```

##### HTML Output

{#output_ordered_list_3}
```
<p>lorem</p>
<ol start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_4}
```
lorem

11. foo
10. bar
9. baz

ipsum
```

##### HTML Output

{#output_ordered_list_4}
```
<p>lorem</p>
<ol start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_5}
```
lorem

1. foo
1. bar
1. baz

ipsum
```

##### HTML Output

{#output_ordered_list_5}
```
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Uppercase Letters

#### Example 1

##### Markua Syntax

{#input_ordered_list_uc_1}
```
lorem

A. foo
B. bar
C. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_1}
```
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_uc_2}
```
lorem

I. foo
J. bar
K. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_2}
```
<p>lorem</p>
<ol type="A" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_uc_3}
```
lorem

C. foo
B. bar
A. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_3}
```
<p>lorem</p>
<ol type="A" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_uc_4}
```
lorem

K. foo
J. bar
I. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_4}
```
<p>lorem</p>
<ol type="A" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_uc_5}
```
lorem

A. foo
A. bar
A. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_5}
```
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Lowercase Letters

#### Example 1

##### Markua Syntax

{#input_ordered_list_lc_1}
```
lorem

a. foo
b. bar
c. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_1}
```
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_lc_2}
```
lorem

i. foo
j. bar
k. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_2}
```
<p>lorem</p>
<ol type="a" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_lc_3}
```
lorem

c. foo
b. bar
a. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_3}
```
<p>lorem</p>
<ol type="a" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_lc_4}
```
lorem

k. foo
j. bar
i. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_4}
```
<p>lorem</p>
<ol type="a" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_lc_5}
```
lorem

a. foo
a. bar
a. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_5}
```
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Uppercase Roman Numerals

#### Example 1

##### Markua Syntax

{#input_ordered_list_ucr_1}
```
lorem

I. foo
II. bar
III. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_1}
```
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_ucr_2}
```
lorem

IX. foo
X. bar
XI. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_2}
```
<p>lorem</p>
<ol type="I" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_ucr_3}
```
lorem

III. foo
II. bar
I. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_3}
```
<p>lorem</p>
<ol type="I" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_ucr_4}
```
lorem

XI. foo
X. bar
IX. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_4}
```
<p>lorem</p>
<ol type="I" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_ucr_5}
```
lorem

I. foo
I. bar
I. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_5}
```
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Lowercase Roman Numerals

#### Example 1

##### Markua Syntax

{#input_ordered_list_lcr_1}
```
lorem

i. foo
ii. bar
iii. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_1}
```
<p>lorem</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_lcr_2}
```
lorem

ix. foo
x. bar
xi. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_2}
```
<p>lorem</p>
<ol type="i" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_lcr_3}
```
lorem

iii. foo
ii. bar
i. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_3}
```
<p>lorem</p>
<ol type="i" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_lcr_4}
```
lorem

xi. foo
x. bar
ix. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_4}
```
<p>lorem</p>
<ol type="i" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_lcr_5}
```
lorem

i. foo
i. bar
i. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_5}
```
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### In Markua, A Single Element Ordered List is Not a List

#### Example

##### Markua Syntax

{#input_ordered_list_1}
```
foo

1. This isn't a list.

bar

1975. Also, not a list.

lorem

a. This isn't a list either.

ipsum

A. This isn't a list either.

dolor

i. This isn't a list either.

sit

I. This isn't a list either.

amet
```

##### HTML Output

{#output_ordered_list_1}
```
<p>foo</p>
<p>1. This isn't a list.</p>
<p>bar</p>
<p>1975. Also, not a list.</p>
<p>lorem</p>
<p>a. This isn't a list either.</p>
<p>ipsum</p>
<p>A. This isn't a list either.</p>
<p>dolor
<p>i. This isn't a list either.</p>
<p>sit</p>
<p>I. This isn't a list either.</p>
<p>amet</p>
```

##### HTML Output


{#output_uppercase_alphabetical_lists_4}
```
<ol type="A" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

## Ordered List Numbering Rules

#### Example

##### Markua Syntax

{#input_list_consecutive_or_same_1}
```
This makes an ordered list with decimal numbers (1, 2, 3):

1. one
1. two
1. three

This does not make a list, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

This makes a list (1975, 1976):

1975. An amazing year.
1976. The year after 1975.

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

This makes a lowercase alphabetical ordered list (a, b):

a. one
b. two

This makes a lowercase alphabetical ordered list (e, f):

e. five
f. six

This makes a lowercase alphabetical ordered list (i, ii, iii, iv):

i. one
ii. two
iii. three
iv. four

Not a list:

i. one
ii. two
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

That's it!
```

##### HTML Output

{#output_list_consecutive_or_same_1}
```
<p>This makes an ordered list with decimal numbers:</p>
<ol>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ol>
<p>This does not make a list, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>This makes a list (1975, 1976):</p>
<ol start="1975">
  <li>An amazing year.</li>
  <li>The year after 1975.</li>
</ol>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>This makes a lowercase alphabetical ordered list (a, b):</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (e, f):</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (i, ii, iii, iv):</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>Not a list:</p>
<p>a\. one<br/>
b\. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>That's it!</p>
```

{#headings}
## Headings

{#input_headings_1}
```
## Part (h1) #

This is a paragraph.

## Chapter (also h1)

This is a paragraph.

## Section (h2)

This is a paragraph.

### Sub-Section (h3)

This is a paragraph.

#### Sub-Sub-Section (h4)

This is a paragraph.

##### Sub-Sub-Sub-Section (h5)

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section (h6)

This is a paragraph.
```

{#output_headings_1}
```
<h1 class="part">Part (h1)</h1>
<p>This is a paragraph.</p>
<h1>Chapter (also h1)</h1>
<p>This is a paragraph.</p>
<h2>Section (h2)</h2>
<p>This is a paragraph.</p>
<h3>Sub-Section (h3)</h3>
<p>This is a paragraph.</p>
<h4>Sub-Sub-Section (h4)</h4>
<p>This is a paragraph.</p>
<h5>Sub-Sub-Sub-Section (h5)</h5>
<p>This is a paragraph.</p>
<h6>Sub-Sub-Sub-Sub-Section (h6)</h6>
<p>This is a paragraph.</p>
```

## Text Formatting

## Italic Text

### Example

{#input_italic_1}
#### Markua Syntax

```
This text _is italic_. This text *is also italic*.
```

{#output_italic_1}
#### HTML Output

```
<p>This text <i>is italic</i>. This text <em>is also italic</em>.</p>
```

## Bold Text

### Example

{#input_bold_1}
#### Markua Syntax

```
This text __is bold__. This text **is also bold**.
```

{#output_bold_1}
#### HTML Output

```
<p>This text <b>is bold</b>. This text <strong>is also bold</strong>.</p>
```

## Bold + Italic Text

### Example 1

{#input_bold_italic_1}
#### Markua Syntax

```
This text ___is bold and italic___. This text ***is also bold and italic***.
```

{#output_bold_italic_1}
#### HTML Output

```
<p>This text <b><i>is bold and italic</i></b>. This text <strong><em>is also bold and italic</em></strong>.</p>
```

You can even combine underscores and asterisks. This is not recommended stylistically, but it works.

### Example 2

{#input_bold_italic_2}
#### Markua Syntax

```
This text __*is bold and italic*__. This text **_is also bold and italic_**.

This text *__is italic and bold__*. This text _**is also italic and bold**_.
```

{#output_bold_italic_2}
#### HTML Output

```
<p>This text <b><em>is bold and italic</em></b>. This text <strong><i>is also bold and italic</i></strong>.</p>

<p>This text <em><b>is italic and bold</b></em>. This text <i><strong>is also italic and bold</strong></i>.</p>
```

## Nesting Bold in Italic, and Italic in Bold

### Example

{#input_nesting_1}
#### Markua Syntax

```
This text _is italic __and this is nested bold__ and this is still italic_ again.

This text *is italic **and this is nested bold** and this is still italic* again.

This text _is italic **and this is nested bold** and this is still italic_ again.

This text *is italic __and this is nested bold__ and this is still italic* again.

This text __is bold _and this is nested italic_ and this is still bold__ again.

This text **is bold *and this is nested italic* and this is still bold** again.

This text __is bold *and this is nested italic* and this is still bold__ again.

This text **is bold _and this is nested italic_ and this is still bold** again.
```

{#output_nesting_1}
#### HTML Output

```
<p>This text <i>is italic <b>and this is nested bold</b> and this is still italic</i> again.</p>

<p>This text <em>is italic <strong>and this is nested bold</strong> and this is still italic</em> again.</p>

<p>This text <i>is italic <strong>and this is nested bold</strong> and this is still italic</i> again.</p>

<p>This text <em>is italic <b>and this is nested bold</b> and this is still italic</em> again.</p>

<p>This text <b>is bold <i>and this is nested italic</i> and this is still bold</b> again.</p>

<p>This text <strong>is bold <em>and this is nested italic</em> and this is still bold</strong> again.</p>

<p>This text <b>is bold <em>and this is nested italic</em> and this is still bold</b> again.</p>

<p>This text <strong>is bold <i>and this is nested italic</i> and this is still bold</strong> again.</p>
```

## Underlined Text

### Example

#### Markua Syntax

{#input_underline_1}
```
This is ____some underlined____ text.
```

#### HTML Output

The HTML which is output uses the `<u>` tag, which was added to HTML5.

{#output_underline_1}
```
<p>This is some <u>bold and italic</u> text.</p>
```

## Strikethrough

Strikethrough is made with `~~two tildes~~` surrounding the text.

### Example

#### Markua Syntax

{#input_strikethrough_1}
```
Strikethrough is made with ~~two tildes~~ surrounding the text.
```

#### HTML Output

{#output_strikethrough_1}
```
<p>Strikethrough is made with <span class="strikethrough">two tildes</span> surrounding the text.</p>
```

Markua never specifies CSS, to allow for maximum flexibility and competition on behalf of Markua Processor implementations.

However, in this case, the following CSS rule is strongly recommended:

```
.strikethrough {
  text-decoration: line-through;
}
```

## Superscript

To make a span be in superscript, you surround it with carets.

### Example

#### Markua Syntax

{#input_superscript_1}
```
5^3^ is 125.
```

#### HTML Output

{#output_superscript_1}
```
<p>5<sup>3</sup> is 125.</p>
```

## Subscript

To make a span be in subscript, you surround it with one tilde each. (This is the same syntax as is used by pandoc.)

### Example

#### Markua Syntax

{#input_subscript_1}
```
What he thought was H~2~O was H~2~SO~4~.
```

#### HTML Output

{#output_subscript_1}
```
<p>What he thought was H<sub>2</sub>O was H<sub>2</sub>SO<sub>4</sub>.
```

## ABC: Asides, Blurbs and Callouts

#### Example

##### Markua Syntax

{#input_aside_1}
```
This is a paragraph before the aside.

A> This is a paragraph in the aside.
A>
A> This is a
A> second paragraph in the aside
A> which contains newlines.
A>
A> This is a third paragraph in the aside.

This is a paragraph after the aside.
```

##### HTML Output

The HTML output for an Aside is simply a `div`, not a `section` or an `aside`, since an arbitrary aside is not something which is a top-level element of a book. (Also, some legacy EPUB readers would choke on `section` or `aside`.)

TODO - is this correct approach?

{#output_aside_1}
```
<p>This is a paragraph before the aside.</p>
<div class="aside">
<p>This is a paragraph in the aside.</p>
<p>This is a<br/>
second paragraph in the aside<br/>
which contains newlines.</p>
<p>This is a third paragraph in the aside.</p>
</div>
<p>This is a paragraph after the aside.</p>
```

#### Example

##### Markua Syntax

{#input_blurb_1}
```
This is a paragraph before the blurb.

B> This is a paragraph in the blurb.
B>
B> This is a
B> second paragraph in the blurb
B> which contains newlines.
B>
B> This is a third paragraph in the blurb.

This is a paragraph after the blurb.
```

##### HTML Output

The HTML output for an Blurb is simply a `div` with a class of "blurb".

{#output_blurb_1}
```
<p>This is a paragraph before the blurb.</p>
<div class="blurb">
<p>This is a paragraph in the blurb.</p>
<p>This is a<br/>
second paragraph in the blurb<br/>
which contains newlines.</p>
<p>This is a third paragraph in the blurb.</p>
</div>
<p>This is a paragraph after the blurb.</p>
```

#### Example

##### Markua Syntax

{#input_blurb_1}
```
This is a paragraph before the blurb.

{class: warning}
B> This is a paragraph in the blurb.
B>
B> This is a
B> second paragraph in the blurb
B> which contains newlines.
B>
B> This is a third paragraph in the blurb.

This is a paragraph after the blurb.
```

##### HTML Output

The HTML output for an Blurb is simply a `div` with a class of "blurb".

{#output_blurb_1}
```
<p>This is a paragraph before the blurb.</p>
<div class="blurb warning">
<p>This is a paragraph in the blurb.</p>
<p>This is a<br/>
second paragraph in the blurb<br/>
which contains newlines.</p>
<p>This is a third paragraph in the blurb.</p>
</div>
<p>This is a paragraph after the blurb.</p>
```


## Block Quotes

### Examples

#### Example 1: A Block Quote Containing Three Paragaphs

##### Markua Syntax

{#input_block_quote_1}
```
This is a paragraph before the block quote.

> This is a paragraph in the block quote.
>
> This is a
> second paragraph in the block quote
> which contains newlines.
>
> This is a third paragraph in the block quote.

This is a paragraph after the block quote.
```

##### HTML Output

The HTML output for a block quote is simply a `div`, not a `section` or an `aside`, since an arbitrary block quote is not something which is a top-level element of a book.

TODO - does `<blockquote>` cause problems for EPUB readers?

{#output_block_quote_1}
```
<p>This is a paragraph before the block quote.</p>
<blockquote>
<p>This is a paragraph in the block quote.</p>
<p>This is a<br/>
second paragraph in the block quote<br/>
which contains newlines.</p>
<p>This is a third paragraph in the block quote.</p>
</blockquote>
<p>This is a paragraph after the block quote.</p>
```

{#links}
## Links

## Inline Links

### Example

#### Markua Syntax

```
This is [link text](http://markua.com) a link.
```

#### HTML Output

```
<p>This is <a href="http://markua.com">link text</a> a link.</p>
```

## Automatic Links

### Example

#### Markua Syntax

```
Markua's website is <http://markua.com>.
```

#### HTML Output

```
<p>Markua's website is <a href="http://markua.com">http://markua.com</a>.</p>
```

## Crosslinks and `id`s

### Examples

TODO - single or double quotes on id attrs in HTML?

#### Example 1: Defining an `id` on a single word

##### Markua Syntax

{#input_span_id_1}
```
The words foo{#foo} and bar{id: bar} both have ids.
```

##### HTML Output

{#output_span_id_1}
```
<p>The words <span id="foo">foo</span> and <span id="bar">bar</span> both have ids.</p>
```

#### Example 2: Defining an `id` on a code span

Code spans, like any span, can have `id`s.

##### Markua Syntax

{#input_span_id_2}
```
Java code is verbose, e.g. `public static void main(String[] args)`{#java}.
```

##### HTML Output

{#output_span_id_2}
```
<p>Java code is verbose, e.g. <code id="java">public static void main(String[] args)`</code>.</p>
```

#### Example 3: Defining an `id` on a span of emphasized text

Any span can have `id`s -- even spans which are produced by formatting characters. (Note that in this contrived example, these would be better served by index entries than ids.)

##### Markua Syntax

{#input_span_id_3}
```
The ideas behind *Leanpub*{id: leanpub} are explained in Peter's book _Lean Publishing_{#lean}.
```

##### HTML Output

{#output_span_id_3}
```
<p>The ideas behind <em id="leanpub">Leanpub</em> are explained in Peter's book <i id="lean">Lean Publishing</i>.</p>
```

#### Example 4: Nesting `id` definitions inside spans

An `id` attribute can be defined on a span or word regardless of whether it is contained in a span.

##### Markua Syntax

{#input_span_id_4}
```
This is *a **very very{#very} contrived** example{id: example}*{#contrived} showing this.
```

##### HTML Output

{#output_span_id_4}
```
<p>This is <em id="contrived">a <strong>very <span id="very">very</span> contrived</strong> <span id="example">example</span></em> showing this.</p>
```

## Scene Breaks

#### Example

{input_scene_breaks}
##### Markua Syntax

```
Yada yada yada.

* * *

Yada yada yada.

- - -

Yada yada yada.

___

Yada yada yada.

**********

Yada yada yada.

----------

Yada yada yada.

____________________

Yada yada yada.
```

{output_scene_breaks}
##### HTML Output

```
<p>Yada yada yada.</p>
<hr/>
<p>Yada yada yada.</p>
<hr/>
<p>Yada yada yada.</p>
<hr/>
<p>Yada yada yada.</p>
<hr/>
<p>Yada yada yada.</p>
<hr/>
<p>Yada yada yada.</p>
<hr/>
<p>Yada yada yada.</p>
```

## Soft hyphen

## Markua Syntax

```
You can use soft hyphens to suggest where to break long words like Rumpel\-stiltskin if you wish.
```

## HTML Output

<p>You can use soft hyphens to suggest where to break long words like Rumpel&shy;stiltskin if you wish.</p>

## Definition Lists

## Examples

### Example 1

#### Markua Syntax

```
foo

term 1
: definition 1

term 2
: definition 2a
: definition 2b
: definition 2c

term 3
: definition 3

bar
```

#### HTML Output

```
<p>foo</p>
<dl>
  <dt>term 1</dt>
  <dd>definition 1</dd>
</dl>
<dl>
  <dt>term 2</dt>
  <dd>definition 2a</dd>
  <dd>definition 2b</dd>
  <dd>definition 2c</dd>
</dl>
<dl>
  <dt>term 3</dt>
  <dd>definition 3</dd>
</dl>
<p>bar</p>
```

## Embedding Lists, Figures and Code Blocks Inside a Paragraph

### Examples

{#embedding_inside_paragraphs_1}
#### Example 1: Correct List Embedding

##### Markua Syntax

{#input_paragraphs_1}
```
This is a paragraph.

The opinion of the W3C about lists inside paragraphs is:
  * myopic
  * rude
  * amusing
It also:
   1. is not universally accepted
   2. ignores historical precedent
   3. encourages short paragraphs, which is admittedly a plus
This is still part of the second paragraph.

This is a third paragraph.
```

##### HTML Output

{#output_paragraphs_1}
```
<p>This is a paragraph.</p>
<div class="para">The opinion of the W3C about lists inside paragraphs is:
  <ul>
    <li>myopic</li>
    <li>rude</li>
    <li>amusing</li>
  </ul>
  It also:
  <ol>
    <li>is not universally accepted</li>
    <li>ignores historical precedent</li>
    <li>encourages short paragraphs, which is admittedly a plus</li>
  </ol>
  This is still part of the second paragraph.
</div>
<p>This is a third paragraph.</p>
```

{#embedding_inside_paragraphs_2}
#### Example 2: Incorrect List Embedding

##### Markua Syntax

{#input_paragraphs_1}
```
This is a paragraph.

The opinion of the W3C about lists inside paragraphs is:
* myopic
* rude
* amusing
It also:
1. is not universally accepted
2. ignores historical precedent
3. encourages short paragraphs
This is still part of the second paragraph, but the above lists were not embedded correctly.

This is a third paragraph.
```

##### HTML Output

{#output_paragraphs_1}
```
<p>This is a paragraph.</p>
<p>The opinion of the W3C about lists inside paragraphs is:<br/>
* myopic<br/>
* rude<br/>
* amusing<br/>
It also:<br/>
1. is not universally accepted<br/>
2. ignores historical precedent<br/>
3. encourages short paragraphs<br/>
This is still part of the second paragraph, but the above lists were not embedded correctly.</p>
<p>This is a third paragraph.</p>
```

#### Example 3: Correct Figure Embedding

If a figure is inserted on its own line, with single newlines above and below it, it is inserted as an inline figure inside the paragraph, at that position exactly if not floated, or near that position if floated.

##### Markua Syntax

{#input_figures_7}
```
This is paragraph 1.

Markua has a fancy logo:
  ![the word Markua with the two asterisk trees beside it](markua-logo.png "The Markua Logo")
Thanks Justin, it was fun making the logo with you!

This is paragraph 3.
```

##### HTML Output

W> TODO - do we add the br tags or not for inline figures?

{#output_figures_7}
```
<p>This is paragraph 1.</p>
<div class="para">Markua has a fancy logo:
  <div class="figure">
    <img src="media/markua-logo.png" alt="the word Markua with the two asterisk trees beside it"/>
    <p class="caption">The Markua Logo</p>
  </div>
  Thanks Justin, it was fun making the logo with you!
</div>
<p>This is paragraph 3.</p>
```

### Syntax for index entries

~~~
a b c {i:C} d e

...

a b c{i:C} d e
~~~

results in:

~~~
a b <span id="__i__1__C">c</span> d e

...

a b <span id="__i__2_C">c</span> d e
~~~


```
The id will be `__i__<number>__<index>`. Where `index` is everything inside of the curly braces after `i:` and before the `|`, with `*` replaced with nothing and `!` replaced with `__`.
index = (The thing inside the curly braces after `i:`).split(/\|/).first.gsub(/\!/, '__').gsub(/\*/, '').lower
`number` is the number of times `index` has been indexed in the document already, counting from 1.
```