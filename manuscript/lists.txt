# Lists

Markua defines substantially more list types than Markdown.

In Markdown, the only types of lists supported are HTML ordered lists with decimal numbers and HTML unordered lists with bullets. However, since Markua does not support inline HTML, and since Markua is used for producing books and documents, Markua must define more types of list.

Specifically, the following types of lists are supported:

1. Bulleted (i.e. "unordered" lists).
2. Every type of "ordered" list specified by HTML.
  a. Decimal numbers
  b. Uppercase letters
  c. Lowercase letters
  d. Uppercase roman numerals
  e. Lowercase roman numerals

Furthermore, besides ordered and unordered lists, [definition lists](#dl) are also supported. We strongly believe in their value.

A> # Bulleted not Unordered
A>
A> Markua prefers the term "bulleted list" to "unordered list", even though a `<ul>` is produced in the HTML output, for the following reasons:
A>
A> 1. The terms "ordered list" and "unordered list" come from HTML, and have more of a "programming" feeling to them than a "writing" feeling. Markua is a format for writers.
A> 2. The terms "ordered list" and "unordered list" imply an HTML implementation only, and Markua is used to generate PDF, EPUB, MOBI and HTML.
A> 3. All lists have an order--otherwise they would not be lists! So, the term "unordered list" is inherently absurd.

All lists must have a blank line before and after them.

There are a number of list types. Each is specified in turn below.

## Bulleted Lists

To make a bulleted list you start one or more consecutive lines with an asterisk (\*), followed by one space, followed by text content.

No other line start other than an asterisk is correct Markua syntax. Also, there are an arbitrary number of spaces or tabs after a list bullet.

### Examples

{#bulleted_lists_1}
#### Example 1

##### Markua Syntax

{#input_bulleted_lists_1}
```
* foo
* bar
* baz
```

##### HTML Output

{#output_bulleted_lists_1}
```
<ul>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ul>
```

##### Example Output

* foo
* bar
* baz

{#bulleted_lists_2}
#### Example 2

##### Markua Syntax

{#input_bulleted_lists_2}
```
* foo
```

##### HTML Output

{#output_bulleted_lists_2}
```
<ul>
<li>foo</li>
</ul>
```

##### Example Output

* foo

{#numbered_lists}
## Numbered Lists

Numbered lists are more fully featured in Markua than in Markdown.

To make a numbered list you start one or more consecutive lines with a consecutive number, followed by a period, followed by whitespace, followed by text content:

```
1. foo
2. bar
3. baz
```

Unlike in Markdown, the number that begins the list in the manuscript is the number that begins the list in the output.

Also, unlike in Markdown, numbers must be consecutive. The following is not legal Markua:

```
1. foo
1. bar
```

Note that there are one or more spaces after the period. The reason that more spaces are allowed is to allow authors to line up their lists, if they choose to.

### Examples

{#numbered_lists_1}
#### Example 1

##### Markua Syntax

{#input_numbered_lists_1}
```
1. foo
2. bar
3. baz
```

##### HTML Output

{#output_numbered_lists_1}
```
<ol>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
```

##### Example Output

1. foo
2. bar
3. baz

{#numbered_lists_2}
#### Example 2

##### Markua Syntax

{#input_numbered_lists_2}
```
1. foo
```

##### HTML Output

{#output_numbered_lists_2}
```
<ol>
<li>foo</li>
</ol>
```

##### Example Output

1. foo

{#numbered_lists_3}
#### Example 3

##### Markua Syntax

{#input_numbered_lists_3}
```
9. foo
10. bar
11. baz
```

##### HTML Output

{#output_numbered_lists_3}
```
<ol start="9">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

9. foo
10. bar
11. baz

## Uppercase Alphabetical List

To make an uppercase alphabetical list you start one or more consecutive lines with an uppercase letter, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
A) foo
B) bar
```

The letter that begins the list in the manuscript is the letter that begins the list in the output. Also, letters must be consecutive.

### Examples

{#uppercase_alphabetical_lists_1}
#### Example 1

##### Markua Syntax

{#input_uppercase_alphabetical_lists_1}
```
A) foo
B) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_uppercase_alphabetical_lists_1}
```
<ol type="A">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

A) foo
B) bar

{#uppercase_alphabetical_lists_2}
#### Example 2

##### Markua Syntax

{#input_uppercase_alphabetical_lists_2}
```
A. foo
B. bar
```

##### HTML Output

{#output_uppercase_alphabetical_lists_2}
```
<ol type="A">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

A. foo
B. bar

{#uppercase_alphabetical_lists_3}
#### Example 3

##### Markua Syntax

{#input_uppercase_alphabetical_lists_3}
```
D) foo
E) bar
```

##### HTML Output

{#output_uppercase_alphabetical_lists_3}
```
<ol type="A" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

D) foo
E) bar

{#uppercase_alphabetical_lists_4}
#### Example 4

##### Markua Syntax

{#input_uppercase_alphabetical_lists_4}
```
D. foo
E. bar
```

##### HTML Output

{#output_uppercase_alphabetical_lists_4}
```
<ol type="A" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

D. foo
E. bar

## Lowercase Alphabetical List

To make a lowercase alphabetical list you start one or more consecutive lines with a lowercase letter, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
a) foo
b) bar
```

The letter that begins the list in the manuscript is the letter that begins the list in the output. Also, letters must be consecutive.

### Examples

{#lowercase_alphabetical_lists_1}
#### Example 1

##### Markua Syntax

{#input_lowercase_alphabetical_lists_1}
```
a) foo
b) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_lowercase_alphabetical_lists_1}
```
<ol type="a">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

a) foo
b) bar

{#lowercase_alphabetical_lists_2}
#### Example 2

##### Markua Syntax

{#input_lowercase_alphabetical_lists_2}
```
a. foo
b. bar
```

##### HTML Output

{#output_lowercase_alphabetical_lists_2}
```
<ol type="a">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

a. foo
b. bar

{#lowercase_alphabetical_lists_3}
#### Example 3

##### Markua Syntax

{#input_lowercase_alphabetical_lists_3}
```
d) foo
e) bar
```

##### HTML Output

{#output_lowercase_alphabetical_lists_3}
```
<ol type="a" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

d) foo
e) bar

{#lowercase_alphabetical_lists_4}
#### Example 4

##### Markua Syntax

{#input_lowercase_alphabetical_lists_4}
```
d. foo
e. bar
```

##### HTML Output

{#output_lowercase_alphabetical_lists_4}
```
<ol type="a" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

d. foo
e. bar

## Uppercase Roman Numeral List

To make an uppercase Roman numeral list you start one or more consecutive lines with an uppercase Roman numeral, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
I) foo
II) bar
```

If you want to line up the Roman numerals, you can do so by adding spaces or by using tabs instead of spaces.

The Roman numeral that begins the list in the manuscript is the Roman numeral that begins the list in the output. Also, Roman numerals must be consecutive--if you want to use them, you have to know them.

### Examples

{#uppercase_roman_numeral_lists_1}
#### Example 1

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_1}
```
I) foo
II) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_uppercase_roman_numeral_lists_1}
```
<ol type="I">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

I) foo
II) bar

{#uppercase_roman_numeral_lists_2}
#### Example 2

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_2}
```
I. foo
II. bar
```

##### HTML Output

{#output_uppercase_roman_numeral_lists_2}
```
<ol type="I">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

I. foo
II. bar

{#uppercase_roman_numeral_lists_3}
#### Example 3

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_3}
```
IV) foo
V) bar
```

##### HTML Output

{#output_uppercase_roman_numeral_lists_3}
```
<ol type="I" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

IV) foo
V) bar

{#uppercase_roman_numeral_lists_4}
#### Example 4

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_4}
```
IV. foo
V. bar
```

##### HTML Output

{#output_uppercase_roman_numeral_lists_4}
```
<ol type="I" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

IV. foo
V. bar

## Lowercase Roman Numeral List

To make a lowercase Roman numeral list you start one or more consecutive lines with a lowercase Roman numeral, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
i) foo
ii) bar
```

If you want to line up the Roman numerals, you can do so by adding spaces or by using tabs instead of spaces.

The Roman numeral that begins the list in the manuscript is the Roman numeral that begins the list in the output. Also, Roman numerals must be consecutive--if you want to use them, you have to know them.

### Examples

{#lowercase_roman_numeral_lists_1}
#### Example 1

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_1}
```
i) foo
ii) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_lowercase_roman_numeral_lists_1}
```
<ol type="i">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

i) foo
ii) bar

{#lowercase_roman_numeral_lists_2}
#### Example 2

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_2}
```
i. foo
ii. bar
```

##### HTML Output

{#output_lowercase_roman_numeral_lists_2}
```
<ol type="i">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

i. foo
ii. bar

{#lowercase_roman_numeral_lists_3}
#### Example 3

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_3}
```
iv) foo
v) bar
```

##### HTML Output

{#output_lowercase_roman_numeral_lists_3}
```
<ol type="i" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

iv) foo
v) bar

{#lowercase_roman_numeral_lists_4}
#### Example 4

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_4}
```
iv. foo
v. bar
```

##### HTML Output

{#output_lowercase_roman_numeral_lists_4}
```
<ol type="i" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

iv. foo
v. bar

{#dl}
## Differences Between Markua and Markdown Lists

If you are familiar with Markdown, you will have noted a number of differences between Markua lists and Markdown lists. This section specifies these differences explicitly.

### In Markua, A Single Element List is Not a List

Markdown has the interesting combination of supporting one element lists and ignoring the number that a list starts with. This means it's possible to inadvertently start a numbered list by beginning any line with a number followed by a period. The example that John Gruber [cites](http://daringfireball.net/projects/markdown/syntax) is the following:

`1986. What a great season.`

This would produce a single element numbered list starting with `1.` -- which in my opinion, is a blatant violation of the Principle of Least Surprise.

Now, in Markua, if we supported single element lists, this would produce a single element numbered list starting with `1968.` -- which would be almost as bad as in Markdown.

(By the way, there is a very gross workaround in Markdown: you prefix the period with a backslash. So, you'd write `1968\. What a great season.` to avoid this.)

But what to do?

The answer is simple: in Markua, **single element lists are not lists**.

To me, the notion of a *list* is something with more than one thing in it. If I have a list of chores to do, there are many of them. If I have one chore to do, I don't call it a list of chores--I call it a chore.

So, in Markua, the automatic creation of a numbered list only happens if you have two or more lines starting with numbers and periods or parentheses. This still has some possibly incorrect interpretations, but these will be a lot more rare. This matters: if you get burned by the automatic list creation, and you feel that you have to think about whether you can start a sentence with a number, then writing in Markua will feel more like programming than writing.

A> This is a microcosm of the difference between Markua and Markdown: since Markdown is a way of producing HTML, it is biased toward producing HTML constructs wherever it is most straightforward to do so. Markdown is a way of writing books and documents, and it only produces HTML constructs like lists when it is almost certainly appropriate to do so. So, Markdown tries to make HTML wherever possible. Markua respects what the author wrote, and only substitutes HTML constructs where doing so is lossless in the text (period and parentheses are not equal) and unambiguous (a single element is probably not a 1 element list; I don't write one element lists).

#### Example 1

##### Markua Syntax

{#input_list_single_element_1}
```
Foo

1975. An amazing year.

Bar

a. This isn't a list either.

Baz
```

##### HTML Output

{#output_list_single_element_1}
```
<p>Foo</p>
<p>1975. An amazing year.</p>
<p>Bar</p>
<p>a. This isn't a list either.</p>
<p>Baz</p>
```

##### Example Output

W> TODO - broken until Markua supported

Foo

1975. An amazing year.

Bar

a. This isn't a list either.

Baz

### In Markua, List Numbers Must be Consecutive Or It Is Not a List

In Markua, list numbers **must all be consecutive**, given the type of numbering (decimal, Roman numeral, alphabetical) that is used. Otherwise, the list is interpreted as a paragraph with a bunch of break tags in it.

The principle is the following: the numbers which are shown in the manuscript must be the same as those in the output. A list will only be produced if this is the case.

If you want to prevent a list from being created with consecutive numbered items separated by single newlines, the backslash escape in front of the period used in Markdown to prevent lists also works in Markua. However, it is needed a lot less often.

#### Example 1

##### Markua Syntax

{#input_list_consecutive_1}
```
This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

End.
```

##### HTML Output

{#output_list_consecutive_1}
```
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>End.</p>
```

##### Example Output

W> TODO - broken until Markua supported

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

End.

#### Example 2

##### Markua Syntax

{#input_list_consecutive_2}
```
This does not make a list either, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

End.
```

##### HTML Output

{#output_list_consecutive_2}
```
<p>This does not make a list either, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>End.</p>
```

##### Example Output

W> TODO - broken until Markua supported

This does not make a list either, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

End.

#### Example 3

##### Markua Syntax

{#input_list_consecutive_3}
```
This makes a list:

1975. An amazing year.
1976. The year after 1975.

End.
```

##### HTML Output

{#output_list_consecutive_3}
```
<p>This makes a list:</p>
<ol start="1975">
<li>An amazing year.</li>
<li>The year after 1975.</li>
</ol>
<p>End.</p>
```

##### Example Output

This makes a list:

1975. An amazing year.
1976. The year after 1975.

End.

#### Example 4

##### Markua Syntax

{#input_list_consecutive_4}
```
This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

End.
```

##### HTML Output

{#output_list_consecutive_4}
```
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>End.</p>
```

##### Example Output

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

End.

#### Example 5

##### Markua Syntax

{#input_list_consecutive_5}
```
A list:

a. one
b. two

A list:

e. five
f. six

A list:

i. one
ii. two
iii. three
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

Not a list:

i. one
ii. two
iv. four

That's it!
```

##### HTML Output

{#output_list_consecutive_5}
```
<p>A list:</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>A list:</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>A list:</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>a. one<br/>
b. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>That's it!</p>
```

##### Example Output

W> TODO - broken until Markua supported

A list:

a. one
b. two

A list:

e. five
f. six

A list:

i. one
ii. two
iii. three
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

Not a list:

i. one
ii. two
iv. four

That's it!