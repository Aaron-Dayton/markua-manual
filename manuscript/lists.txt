{#lists}
# Lists

In Markua, lists are a block element, meaning that all lists must have a blank line before and after them.

Markua defines substantially more list types than Markdown. In Markdown, the only types of lists supported are ordered lists with decimal numbers and unordered lists. However, since Markua does not support inline HTML, and since Markua is used for producing books and documents, Markua must define more types of list. Specifically, the following types of lists are supported:

1. Unordered lists (i.e. bulleted lists)
2. Ordered lists, with the following numbering choices:
  a. Decimal numbers
  b. Uppercase letters
  c. Lowercase letters
  d. Uppercase Roman numerals
  e. Lowercase Roman numerals
3. Definition lists

A> Despite the fact that all lists actually have an order (otherwise they would not be lists!), Markua is sticking with the HTML terminology for "ordered" vs. "unordered" lists, instead of "numbered" vs. "bulleted" lists. Even though these feel more like programming terms, HTML terminology is so widely understood that using any other terminology is distracting. (Also, since the ordered lists support numbering by decimal numbers, letters and Roman numerals, this term is superior to numbered lists in that regard.)



Differences Between Markua and Markdown Lists

{#unorderedlists}
## Unordered Lists

To make an unordered list you start one or more consecutive lines with an asterisk (\*), followed by one space, followed by text content.

No other line start other than an asterisk is correct Markua syntax. Also, there are an arbitrary number of spaces or tabs after a list bullet.

### Examples

{#unordered_lists_1}
#### Example 1

##### Markua Syntax

{#input_unordered_lists_1}
```
before

* foo
* bar
* baz

after
```

##### HTML Output

{#output_unordered_lists_1}
```
<p>before</p>
<ul>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ul>
<p>after</p>
```

##### Example Output

before

* foo
* bar
* baz

after

{#ordered_lists}
## Ordered Lists

Numbered lists are more fully featured in Markua than in Markdown.

To make a numbered list you start one or more consecutive lines with a consecutive number, followed by a period, followed by whitespace, followed by text content:

```
1. foo
2. bar
3. baz
```

Unlike in Markdown, the number that begins the list in the manuscript is the number that begins the list in the output.

Also, unlike in Markdown, numbers must be consecutive. The following is not legal Markua:

```
1. foo
1. bar
```

Note that there are one or more spaces after the period. The reason that more spaces are allowed is to allow authors to line up their lists, if they choose to.

### Examples

{#numbered_lists_1}
#### Example 1

##### Markua Syntax

{#input_numbered_lists_1}
```
1. foo
2. bar
3. baz
```

##### HTML Output

{#output_numbered_lists_1}
```
<ol>
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
```

##### Example Output

1. foo
2. bar
3. baz

{#numbered_lists_2}
#### Example 2

##### Markua Syntax

{#input_numbered_lists_2}
```
1. foo
```

##### HTML Output

{#output_numbered_lists_2}
```
<ol>
<li>foo</li>
</ol>
```

##### Example Output

1. foo

{#numbered_lists_3}
#### Example 3

##### Markua Syntax

{#input_numbered_lists_3}
```
9. foo
10. bar
11. baz
```

##### HTML Output

{#output_numbered_lists_3}
```
<ol start="9">
<li>foo</li>
<li>bar</li>
<li>baz</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

9. foo
10. bar
11. baz

## Uppercase Alphabetical List

To make an uppercase alphabetical list you start one or more consecutive lines with an uppercase letter, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
A) foo
B) bar
```

The letter that begins the list in the manuscript is the letter that begins the list in the output. Also, letters must be consecutive.

### Examples

{#uppercase_alphabetical_lists_1}
#### Example 1

##### Markua Syntax

{#input_uppercase_alphabetical_lists_1}
```
A) foo
B) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_uppercase_alphabetical_lists_1}
```
<ol type="A">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

A) foo
B) bar

{#uppercase_alphabetical_lists_2}
#### Example 2

##### Markua Syntax

{#input_uppercase_alphabetical_lists_2}
```
A. foo
B. bar
```

##### HTML Output

{#output_uppercase_alphabetical_lists_2}
```
<ol type="A">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

A. foo
B. bar

{#uppercase_alphabetical_lists_3}
#### Example 3

##### Markua Syntax

{#input_uppercase_alphabetical_lists_3}
```
D) foo
E) bar
```

##### HTML Output

{#output_uppercase_alphabetical_lists_3}
```
<ol type="A" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

D) foo
E) bar

{#uppercase_alphabetical_lists_4}
#### Example 4

##### Markua Syntax

{#input_uppercase_alphabetical_lists_4}
```
D. foo
E. bar
```

##### HTML Output

{#output_uppercase_alphabetical_lists_4}
```
<ol type="A" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

D. foo
E. bar

## Lowercase Alphabetical List

To make a lowercase alphabetical list you start one or more consecutive lines with a lowercase letter, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
a) foo
b) bar
```

The letter that begins the list in the manuscript is the letter that begins the list in the output. Also, letters must be consecutive.

### Examples

{#lowercase_alphabetical_lists_1}
#### Example 1

##### Markua Syntax

{#input_lowercase_alphabetical_lists_1}
```
a) foo
b) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_lowercase_alphabetical_lists_1}
```
<ol type="a">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

a) foo
b) bar

{#lowercase_alphabetical_lists_2}
#### Example 2

##### Markua Syntax

{#input_lowercase_alphabetical_lists_2}
```
a. foo
b. bar
```

##### HTML Output

{#output_lowercase_alphabetical_lists_2}
```
<ol type="a">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

a. foo
b. bar

{#lowercase_alphabetical_lists_3}
#### Example 3

##### Markua Syntax

{#input_lowercase_alphabetical_lists_3}
```
d) foo
e) bar
```

##### HTML Output

{#output_lowercase_alphabetical_lists_3}
```
<ol type="a" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

d) foo
e) bar

{#lowercase_alphabetical_lists_4}
#### Example 4

##### Markua Syntax

{#input_lowercase_alphabetical_lists_4}
```
d. foo
e. bar
```

##### HTML Output

{#output_lowercase_alphabetical_lists_4}
```
<ol type="a" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

d. foo
e. bar

## Uppercase Roman Numeral List

To make an uppercase Roman numeral list you start one or more consecutive lines with an uppercase Roman numeral, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
I) foo
II) bar
```

If you want to line up the Roman numerals, you can do so by adding spaces or by using tabs instead of spaces.

The Roman numeral that begins the list in the manuscript is the Roman numeral that begins the list in the output. Also, Roman numerals must be consecutive--if you want to use them, you have to know them.

### Examples

{#uppercase_roman_numeral_lists_1}
#### Example 1

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_1}
```
I) foo
II) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_uppercase_roman_numeral_lists_1}
```
<ol type="I">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

I) foo
II) bar

{#uppercase_roman_numeral_lists_2}
#### Example 2

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_2}
```
I. foo
II. bar
```

##### HTML Output

{#output_uppercase_roman_numeral_lists_2}
```
<ol type="I">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

I. foo
II. bar

{#uppercase_roman_numeral_lists_3}
#### Example 3

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_3}
```
IV) foo
V) bar
```

##### HTML Output

{#output_uppercase_roman_numeral_lists_3}
```
<ol type="I" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

IV) foo
V) bar

{#uppercase_roman_numeral_lists_4}
#### Example 4

##### Markua Syntax

{#input_uppercase_roman_numeral_lists_4}
```
IV. foo
V. bar
```

##### HTML Output

{#output_uppercase_roman_numeral_lists_4}
```
<ol type="I" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

IV. foo
V. bar

## Lowercase Roman Numeral List

To make a lowercase Roman numeral list you start one or more consecutive lines with a lowercase Roman numeral, followed by a right parentheses (`)`) or a period (`.`), followed by whitespace, followed by text content:

```
i) foo
ii) bar
```

If you want to line up the Roman numerals, you can do so by adding spaces or by using tabs instead of spaces.

The Roman numeral that begins the list in the manuscript is the Roman numeral that begins the list in the output. Also, Roman numerals must be consecutive--if you want to use them, you have to know them.

### Examples

{#lowercase_roman_numeral_lists_1}
#### Example 1

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_1}
```
i) foo
ii) bar
```

##### HTML Output

Note that in HTML the parentheses are ignored and periods are used instead. In PDF and other output formats, the Markua Processor should respect the choice of parentheses.

{#output_lowercase_roman_numeral_lists_1}
```
<ol type="i">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

i) foo
ii) bar

{#lowercase_roman_numeral_lists_2}
#### Example 2

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_2}
```
i. foo
ii. bar
```

##### HTML Output

{#output_lowercase_roman_numeral_lists_2}
```
<ol type="i">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

i. foo
ii. bar

{#lowercase_roman_numeral_lists_3}
#### Example 3

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_3}
```
iv) foo
v) bar
```

##### HTML Output

{#output_lowercase_roman_numeral_lists_3}
```
<ol type="i" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

iv) foo
v) bar

{#lowercase_roman_numeral_lists_4}
#### Example 4

##### Markua Syntax

{#input_lowercase_roman_numeral_lists_4}
```
iv. foo
v. bar
```

##### HTML Output

{#output_lowercase_roman_numeral_lists_4}
```
<ol type="i" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

##### Example Output

{class: warning}
B> FIXME: This Example Output is broken until Markua support is in Leanpub.

iv. foo
v. bar

## Differences Between Markua and Markdown Lists

If you are familiar with Markdown, you will have noted a number of differences between Markua lists and Markdown lists. This section specifies these differences explicitly.

### In Markua, A Single Element List is Not a List

Markdown has the interesting combination of supporting one element lists and ignoring the number that a list starts with. This means it's possible to inadvertently start a numbered list by beginning any line with a number followed by a period. The example that John Gruber [cites](http://daringfireball.net/projects/markdown/syntax) is the following:

`1986. What a great season.`

This would produce a single element numbered list starting with `1.` -- which in my opinion, is a blatant violation of the Principle of Least Surprise.

Now, in Markua, if we supported single element lists, this would produce a single element numbered list starting with `1968.` -- which would be almost as bad as in Markdown.

(By the way, there is a very gross workaround in Markdown: you prefix the period with a backslash. So, you'd write `1968\. What a great season.` to avoid this.)

But what to do?

The answer is simple: in Markua, **single element lists are not lists**.

To me, the notion of a *list* is something with more than one thing in it. If I have a list of chores to do, there are many of them. If I have one chore to do, I don't call it a list of chores--I call it a chore.

So, in Markua, the automatic creation of a numbered list only happens if you have two or more lines starting with numbers and periods or parentheses. This still has some possibly incorrect interpretations, but these will be a lot more rare. This matters: if you get burned by the automatic list creation, and you feel that you have to think about whether you can start a sentence with a number, then writing in Markua will feel more like programming than writing.

A> This is a microcosm of the difference between Markua and Markdown: since Markdown is a way of producing HTML, it is biased toward producing HTML constructs wherever it is most straightforward to do so. Markdown is a way of writing books and documents, and it only produces HTML constructs like lists when it is almost certainly appropriate to do so. So, Markdown tries to make HTML wherever possible. Markua respects what the author wrote, and only substitutes HTML constructs where doing so is lossless in the text (period and parentheses are not equal) and unambiguous (a single element is probably not a 1 element list; I don't write one element lists).

Now, there's an interesting corollary here: since a single element ordered list is not a list, a single element unordered list is also not a list. It would be just too surprising otherwise--and, again, a list is something with more than one thing in it.

#### Example 1

##### Markua Syntax

{#input_list_single_element_1}
```
Foo

1975. An amazing year.

Bar

a. This isn't a list either.

Baz
```

##### HTML Output

{#output_list_single_element_1}
```
<p>Foo</p>
<p>1975. An amazing year.</p>
<p>Bar</p>
<p>a. This isn't a list either.</p>
<p>Baz</p>
```

##### Example Output

W> TODO - broken until Markua supported

Foo

1975. An amazing year.

Bar

a. This isn't a list either.

Baz

{#unordered_lists_2}
#### Example 2: A One Element List is Not a List

##### Markua Syntax

{#input_unordered_lists_2}
```
foo

* bar

baz
```

##### HTML Output

{#output_unordered_lists_2}
```
<p>foo</p>
<p>* bar</p>
<p>baz</p>
```

##### Example Output

* foo


### Ordered List Numbering Rules

There are a number of rules about what does and does not trigger the creation of an ordered list. These rules are designed to help authors stay sane when writing in Markua, and also to help implementors of Markua processors stay sane. In all cases, the first number, letter or Roman numeral is the start of the list numbering. This never changes.

If, because of the correct application of these rules, an ordered list is not created, what happens is that a paragraph is created instead, with a break tag for each single newline. In this instance, the output directly matches the input, including all the numbering.

In theory, Markua supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number.
2. Every item in the list begins with the same number.

This is not actually quite true.

See, the notion of "consecutive" is easy to explain and to check for decimal numbers: `1, 2, 3, ...` or `456, 457, 458, ...` are all easily verified as consecutive, both by humans and computers.

However, Markua also supports ordered lists using uppercase and lowercase alphabetical numbering, as well as uppercase and lowercase Roman numeral numbering.

In the case of alphabetical numbering, checking "consecutive" is harder. It's relatively straightforward for the first 26 items, but then all bets are off. In case you're curious, here is the sequence used in HTML:

`a, b, ..., z, aa, ab, ..., az, ba, bb, ... bz, za, zb, ..., zz, aaa, aab, ..., aaz, aba, abb, ...`

In terms of Roman numerals, it's even worse. I'm sure that someone in a Classics department (or in the NFL) knows the algorithm by heart, but I don't.

So, what are Markua authors and implementors of Markua processors to do?

Markua makes this simpler by specifying the following rules.

Markua *actually* supports creating an ordered list based on a different set of conditions based on the numbering type.

For decimal numbers, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with the same number.
2. Every item in the list begins with a consecutive number.

For uppercase and lowercase alphabetical numbering, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive letter, followed by a period, and the lettering does not extend past `z.` for lowercase or `Z.` for uppercase. (This way, implementors of Markua processors don't need to check the `aa`, case, and authors writing in Markua don't need to remember it.)
2. Every item in the list begins with the same single letter, followed by a period.

The term "single letter" means that consecutive `c.`s start an ordered list which starts with `c, d, e, ...`, but that consecutive `aa.`s or `aba.`s do not start an ordered list. Again, this greatly simplifies life (you're welcome!) for implementors of Markua processors, who otherwise would need to figure out what number in the sequence `aba` is, in order to generate the correct HTML.

For uppercase and lowercase Roman numeral numbering, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive Roman numeral, followed by a period, and the lettering does not extend past `xii.` for lowercase Roman numerals or `XII.` for uppercase Roman numerals. To be clear, this means that the only valid consecutive lowercase Roman numerals are `i, ii, iii, iv, v, vi, vii, viii, ix, x, xi, xii`, and that the only valid consecutive uppercase Roman numerals are `I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII`.
2. Every item in the list begins with `i.` for lowercase Roman numerals or `I.` for uppercase Roman numerals.

The combination of the rules for Roman numeral numbering means that you can have an arbitrarily long Roman numeral list starting from `i.` or `I.`, but that implementors of Markua processors don't need to write code to figure out whether `MCMLXXV` is a valid Roman numeral, and what the consecutive Roman numeral sequence after it is.

If you're wondering why I picked `xii` and `XII` for the last consecutive lowercase and uppercase Roman numerals to respect: this is Roman numeral 12, and the main usage of Roman numerals in modern life is in clock faces.

Speaking of clock faces, I have bad news for fans of watches and antique clocks:

* The only supported version of the Roman numeral 4 is the subtractive `iv` (in lowercase) or `IV` (in uppercase); the additive `iiii` or `IIII` form is not supported.
* The only supported version of the Roman numeral 9 is the subtractive `ix` (in lowercase) or `IX` (in uppercase); the additive `viiii` or `VIIII` form is not supported.

It turns out that the question of additive versus subtractive forms of Roman numerals is actually interesting; see [this article](http://mentalfloss.com/article/24578/why-do-some-clocks-use-roman-numeral-iiii) and [this Wikipedia entry](https://en.wikipedia.org/wiki/Roman_numerals) for a starting point.

In Markua, list numbers must **all** either be **consecutive**, given the type of numbering  that is used, or **the same as the first number**. Otherwise, the list is interpreted as a paragraph with a bunch of break tags in it, and lines starting with the numbers given. The principle is the following: the numbers which are shown in the manuscript must be the same as those in the output, or the numbers must be clearly intended to be numbered list numbers. Otherwise, a list will not be produced.

If you want to prevent a list from being created with consecutive numbered items separated by single newlines, the backslash escape in front of the period used in Markdown to prevent lists also works in Markua. However, it is needed a lot less often.

#### Example 1

##### Markua Syntax

{#input_list_consecutive_or_same_1}
```
This makes an ordered list with decimal numbers (1, 2, 3):

1. one
1. two
1. three

This does not make a list, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

This makes a list (1975, 1976):

1975. An amazing year.
1976. The year after 1975.

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

This makes a lowercase alphabetical ordered list (a, b):

a. one
b. two

This makes a lowercase alphabetical ordered list (e, f):

e. five
f. six

This makes a lowercase alphabetical ordered list (i, ii, iii, iv):

i. one
ii. two
iii. three
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

Not a list:

i. one
ii. two
iv. four

That's it!
```


End.
```

##### HTML Output

{#output_list_consecutive_or_same_1}
```
<p>This makes an ordered list with decimal numbers:</p>
<ol>
<li>one</li>
<li>two</li>
<li>three</li>
</ol>
<p>This does not make a list, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>This makes a list:</p>
<ol start="1975">
<li>An amazing year.</li>
<li>The year after 1975.</li>
</ol>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>End.</p>



<p>End.</p>
```

{#input_list_consecutive_or_same_4}
```
End.
```

##### HTML Output

{#output_list_consecutive_or_same_4}
```
<p>End.</p>
```

##### Example Output

This makes a list:

1975. An amazing year.
1976. The year after 1975.

End.

#### Example 5

##### Markua Syntax

{#input_list_consecutive_or_same_5}
```
This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

End.
```

##### HTML Output

{#input_list_consecutive_or_same_5}
```
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>End.</p>
```

##### Example Output

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

End.




#### Example 5

##### Markua Syntax


##### HTML Output

{#output_list_consecutive_5}
```
<p>A list:</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>A list:</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>A list:</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>a. one<br/>
b. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>That's it!</p>
```

##### Example Output

W> TODO - broken until Markua supported

A list:

a. one
b. two

A list:

e. five
f. six

A list:

i. one
ii. two
iii. three
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

Not a list:

i. one
ii. two
iv. four

That's it!

{#definitionlists}
## Definition Lists

Definition lists are supported in Markua. Although [some people](http://meta.stackexchange.com/questions/72395/is-it-possible-to-have-definition-lists-in-markdown) don't see the value in definition lists in HTML, we strongly believe in their value. Specifically, with the rise of mobile and the narrower screen reading experience becoming the new default, we see definition lists as having more of a future than tables. But instead of just being two columns, the idea of a definition list has actual meaning.

To define a definition list in Markua, use the following syntax:

```
term 1
: definition 1

term 2
: definition 2
```

For an example of a longer, more useful definition list used in Markua, see the [definitions](#definitions) section of this specification.