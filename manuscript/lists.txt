{#lists}
# Lists

Markua defines substantially more list types than Markdown. In Markdown, the only types of lists supported are ordered lists with decimal numbers and unordered lists. However, since Markua does not support inline HTML, and since Markua is used for producing books and documents, Markua must define more types of list.

Specifically, the following types of lists are supported:

1. Unordered Lists
2. Ordered Lists
3. Definition Lists

For ordered lists, the following numbering choices are supported:

a. Decimal numbers
b. Uppercase letters
c. Lowercase letters
d. Uppercase Roman numerals
e. Lowercase Roman numerals

Definition Lists are discussed in the next chapter--although they are called lists, they're very different than unordered and ordered lists.

A> Despite the fact that all lists actually have an order (otherwise they would not be lists!), Markua is sticking with the HTML terminology for "ordered" vs. "unordered" lists, instead of "numbered" vs. "bulleted" lists. Even though these feel more like programming terms, HTML terminology is so widely understood that using any other terminology is distracting. (Also, since the ordered lists support numbering by decimal numbers, letters and Roman numerals, this term is superior to numbered lists in that regard.)

If you are familiar with Markdown, as you read the sections below you will note a number of differences between Markua lists and Markdown lists.

{#unorderedlists}
## Unordered Lists (i.e. Bulleted Lists)

Just as in Markdown, Markua lets you start an unordered list with three types of bullet:

1. asterisks (`*`)
2. hyphens (`-`)
3. plus signs (`+`)

(If you didn't know you could use `-` and `+` to start an unordered list in Markdown, now you do. The more you know.)

To make an unordered list in Markua, you start one or more consecutive lines with one of these bullets, followed by between 1 and 4 spaces or 1 tab, followed by text content.

A list can be top-level, like this:

```
Here's a paragraph before the list.

* foo
* bar
* baz

Here's a paragraph after the list.
```

Unlike in Markdown, in Markua a list can also be nested in a paragraph, like this:

```
This is paragraph one.

This is paragraph two.
  * foo
  * bar
  * baz
This is still paragraph two.

This is paragraph three.
```

Embedding a list in a paragraph works for all types of list, but you need to indent the list with some amount of whitespace.

Here's how unordered lists work:

* The preferred bullet type for an unordered list in Markua is the asterisk (`*`). However, all three bullet types are supported, since this would be a huge change for not that good of a reason.
* Between 1 and 4 spaces or one tab is allowed after each bullet.
* You cannot mix tabs and spaces: if a tab is used after a bullet, tabs must be used after each bullet.
* If spaces are used after each bullet, the same number of spaces MUST be used after each bullet in the list.
* A varied number of spaces or tabs or a mixture of tabs and spaces does not create an unordered list. Instead, it creates a paragraph with line breaks inside it, which produces break tags in HTML.
* The preferred amount and type of whitespace after the bullet is one space.
* The bullet type used is output as a class in the HTML, so that designers can optionally use CSS to vary the style of bullets based on the bullet type used by the author.
* A single element unordered list is a list: although it is a pretty stupid list, treating it as a literal paragraph starting with an asterisk, plus or hyphen would be even stupider.

### Examples

#### Example 1: A list (asterisks, one space after each)

##### Markua Syntax

{#input_unordered_list_1}
```
lorem

* foo
* bar
* baz

ipsum
```

##### HTML Output

{#output_unordered_list_1}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 2: A list (asterisks, two spaces after each)

##### Markua Syntax

{#input_unordered_list_2}
```
lorem

*  foo
*  bar
*  baz

ipsum
```

##### HTML Output

{#output_unordered_list_2}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 3: A list (asterisks, three spaces after each)

##### Markua Syntax

{#input_unordered_list_3}
```
lorem

*   foo
*   bar
*   baz

ipsum
```

##### HTML Output

{#output_unordered_list_3}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 4: A list (asterisks, four spaces after each)

##### Markua Syntax

{#input_unordered_list_4}
```
lorem

*    foo
*    bar
*    baz

ipsum
```

##### HTML Output

{#output_unordered_list_4}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 5: A list (asterisks, one tab after each)

##### Markua Syntax

{#input_unordered_list_5}
```
lorem

* foo
* bar
* baz

ipsum
```

##### HTML Output

{#output_unordered_list_5}
```
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 6: A list (hyphens, one space after each)

##### Markua Syntax

{#input_unordered_list_6}
```
lorem

- foo
- bar
- baz

ipsum
```

##### HTML Output

{#output_unordered_list_6}
```
<p>lorem</p>
<ul class="hyphen">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 7: A list (pluses, one space after each)

##### Markua Syntax

{#input_unordered_list_7}
```
lorem

+ foo
+ bar
+ baz

ipsum
```

##### HTML Output

{#output_unordered_list_7}
```
<p>lorem</p>
<ul class="plus">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
```

#### Example 8: A list (one element list with asterisk)

##### Markua Syntax

{#input_unordered_list_8}
```
lorem

* foo

ipsum
```

##### HTML Output

{#output_unordered_list_8}
```
<p>lorem</p>
<ul>
  <li>foo</li>
</ul>
<p>ipsum</p>
```

#### Example 9: A list (one element list with hyphen)

##### Markua Syntax

{#input_unordered_list_9}
```
lorem

- foo

ipsum
```

##### HTML Output

{#output_unordered_list_9}
```
<p>lorem</p>
<ul class="hyphen">
  <li>foo</li>
</ul>
<p>ipsum</p>
```

#### Example 10: A list (one element list with plus)

##### Markua Syntax

{#input_unordered_list_10}
```
lorem

+ foo

ipsum
```

##### HTML Output

{#output_unordered_list_10}
```
<p>lorem</p>
<ul class="plus">
  <li>foo</li>
</ul>
<p>ipsum</p>
```

#### Example 11: Not a list (variable number of spaces after bullets)

##### Markua Syntax

{#input_unordered_list_11}
```
lorem

*    foo
*   bar
*  baz

ipsum
```

##### HTML Output

{#output_unordered_list_11}
```
<p>lorem</p>
<p>*    foo<br/>
*   bar<br/>
*  baz</p>
<p>ipsum</p>
```

{#ordered_lists}
## Ordered Lists (i.e. Numbered Lists)

Ordered lists are more fully featured in Markua than in Markdown.

Unlike in Markdown, in Markua **the number that begins the list in the manuscript is the number that begins the list in the output**.

Also, in Markua, an ordered list can vary the following:

1. Numbering system
  a. Decimal numbers
  b. Uppercase letters
  c. Lowercase letters
  d. Uppercase Roman numerals
  e. Lowercase Roman numerals
2. Numbering direction (ascending or descending)
3. Initial number (or letter, or Roman numeral)

W> TODO - this list above renders wrong until we support nested lists in Markua

To make an ordered list in Markua, you start one or more consecutive lines with either a consecutive number or the same number (or letter or roman numeral), followed by between 1 and 4 spaces or 1 tab, followed by text content:

```
before

1. foo
2. bar
3. baz

after
```

Since Markua supports letters and Roman numerals as well as decimal numbers to start lists, the rules about using consecutive numbers or the same number are actually a bit complex.

Note that there are one or more spaces after the period. Unlike with an unordered list, the number of spaces does not need to be the same after each item (since numbers may have 2 or more digits, so a variable number of spaces may be desired to line everything up).

A> I had really wanted to support parentheses after the number as well as periods, since to me `a)` looks a lot better than `a.` does. However, there's no *good* way to do this in HTML, so I'm giving up and not doing it. If you make a lettered list with parentheses, it just turns into a paragraph with a bunch of newlines for the list items, so you basically get what you want, just not using HTML constructs.

This set of examples shows the normal use cases of lists with the various numbering systems. For the edge cases, see the next sections.

### Examples: Decimal Numbers

#### Example 1

##### Markua Syntax

{#input_ordered_list_1}
```
lorem

1. foo
2. bar
3. baz

ipsum
```

##### HTML Output

{#output_ordered_list_1}
```
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_2}
```
lorem

9. foo
10. bar
11. baz

ipsum
```

##### HTML Output

{#output_ordered_list_2}
```
<p>lorem</p>
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_3}
```
lorem

3. foo
2. bar
1. baz

ipsum
```

##### HTML Output

{#output_ordered_list_3}
```
<p>lorem</p>
<ol start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_4}
```
lorem

11. foo
10. bar
9. baz

ipsum
```

##### HTML Output

{#output_ordered_list_4}
```
<p>lorem</p>
<ol start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_5}
```
lorem

1. foo
1. bar
1. baz

ipsum
```

##### HTML Output

{#output_ordered_list_5}
```
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Uppercase Letters

#### Example 1

##### Markua Syntax

{#input_ordered_list_uc_1}
```
lorem

A. foo
B. bar
C. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_1}
```
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_uc_2}
```
lorem

I. foo
J. bar
K. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_2}
```
<p>lorem</p>
<ol type="A" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_uc_3}
```
lorem

C. foo
B. bar
A. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_3}
```
<p>lorem</p>
<ol type="A" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_uc_4}
```
lorem

K. foo
J. bar
I. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_4}
```
<p>lorem</p>
<ol type="A" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_uc_5}
```
lorem

A. foo
A. bar
A. baz

ipsum
```

##### HTML Output

{#output_ordered_list_uc_5}
```
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Lowercase Letters

#### Example 1

##### Markua Syntax

{#input_ordered_list_lc_1}
```
lorem

a. foo
b. bar
c. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_1}
```
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_lc_2}
```
lorem

i. foo
j. bar
k. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_2}
```
<p>lorem</p>
<ol type="a" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_lc_3}
```
lorem

c. foo
b. bar
a. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_3}
```
<p>lorem</p>
<ol type="a" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_lc_4}
```
lorem

k. foo
j. bar
i. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_4}
```
<p>lorem</p>
<ol type="a" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_lc_5}
```
lorem

a. foo
a. bar
a. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lc_5}
```
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Uppercase Roman Numerals

#### Example 1

##### Markua Syntax

{#input_ordered_list_ucr_1}
```
lorem

I. foo
II. bar
III. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_1}
```
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_ucr_2}
```
lorem

IX. foo
X. bar
XI. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_2}
```
<p>lorem</p>
<ol type="I" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_ucr_3}
```
lorem

III. foo
II. bar
I. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_3}
```
<p>lorem</p>
<ol type="I" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_ucr_4}
```
lorem

XI. foo
X. bar
IX. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_4}
```
<p>lorem</p>
<ol type="I" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_ucr_5}
```
lorem

I. foo
I. bar
I. baz

ipsum
```

##### HTML Output

{#output_ordered_list_ucr_5}
```
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### Examples: Lowercase Roman Numerals

#### Example 1

##### Markua Syntax

{#input_ordered_list_lcr_1}
```
lorem

i. foo
ii. bar
iii. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_1}
```
<p>lorem</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 2

##### Markua Syntax

{#input_ordered_list_lcr_2}
```
lorem

ix. foo
x. bar
xi. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_2}
```
<p>lorem</p>
<ol type="i" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 3

##### Markua Syntax

{#input_ordered_list_lcr_3}
```
lorem

iii. foo
ii. bar
i. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_3}
```
<p>lorem</p>
<ol type="i" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 4

##### Markua Syntax

{#input_ordered_list_lcr_4}
```
lorem

xi. foo
x. bar
ix. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_4}
```
<p>lorem</p>
<ol type="i" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

#### Example 5

{#input_ordered_list_lcr_5}
```
lorem

i. foo
i. bar
i. baz

ipsum
```

##### HTML Output

{#output_ordered_list_lcr_5}
```
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
```

### In Markua, A Single Element Ordered List is Not a List

Markdown has the interesting combination of supporting one element lists and ignoring the number that a list starts with. This means it's possible to inadvertently start a numbered list by beginning any line with a number followed by a period. The example that John Gruber [cites](http://daringfireball.net/projects/markdown/syntax) is the following:

`1986. What a great season.`

This would produce a single element numbered list starting with `1.` -- which in my opinion, is a blatant violation of the Principle of Least Surprise.

Now, in Markua, if we supported single element ordered lists, this would produce a single element numbered list starting with `1968.` -- which would be almost as bad as in Markdown.

(By the way, there is a very gross workaround in Markdown: you prefix the period with a backslash. So, you'd write `1968\. What a great season.` to avoid this.)

But what to do?

The answer is simple: in Markua, **single element ordered lists are not lists**. This is true for ordered lists only -- single element unordered lists and single element definition lists are both lists. (In the case of an unordered list it's stupid, but the alternative is stupider. In the case of a definition list there's actually a legitimate usage of a single element definition list: a single definition.)

To me, the notion of a *list* is something with more than one thing in it. If I have a list of chores to do, there are many of them. If I have one chore to do, I don't call it a list of chores--I call it a chore.

So, in Markua, the automatic creation of an ordered list only happens if you have two or more lines starting with numbers and periods.

This still has some possibly incorrect interpretations, but these will be a lot more rare. This matters: if you get burned by the automatic list creation, and you feel that you have to think about whether you can start a sentence with a number, then writing in Markua will feel more like programming than writing.

A> This is a microcosm of the difference between Markua and Markdown: since Markdown is a way of producing HTML, it is biased toward producing HTML constructs wherever it is most straightforward to do so. Markdown is a way of writing books and documents, and it only produces HTML constructs like lists when it is almost certainly appropriate to do so. So, whereas Markdown tries to make HTML wherever possible, Markua respects what the author wrote, and only substitutes HTML constructs where doing so is lossless in the text (period and parentheses are not equal) and unambiguous (a single element is probably not a 1 element list).

#### Example

##### Markua Syntax

{#input_ordered_list_1}
```
foo

1. This isn't a list.

bar

1975. Also, not a list.

lorem

a. This isn't a list either.

ipsum

A. This isn't a list either.

dolor

i. This isn't a list either.

sit

I. This isn't a list either.

amet
```

##### HTML Output

{#output_ordered_list_1}
```
<p>foo</p>
<p>1. This isn't a list.</p>
<p>bar</p>
<p>1975. Also, not a list.</p>
<p>lorem</p>
<p>a. This isn't a list either.</p>
<p>ipsum</p>
<p>A. This isn't a list either.</p>
<p>dolor
<p>i. This isn't a list either.</p>
<p>sit</p>
<p>I. This isn't a list either.</p>
<p>amet</p>
```



{#input_uppercase_alphabetical_lists_4}
```
```

##### HTML Output

{#output_uppercase_alphabetical_lists_4}
```
<ol type="A" start="4">
<li>foo</li>
<li>bar</li>
</ol>
```

### TEST Ordered List Numbering Rules

Test.

A> If you are an author who is just trying to write straightforward Markua, you can probably skip this section.

There are a number of rules about what does and does not trigger the creation of an ordered list. These rules are designed to help authors stay sane when writing in Markua, and also to help implementors of Markua processors stay sane. In all cases, the first number, letter or Roman numeral is the start of the list numbering. This never changes.

If, because of the correct application of these rules, an ordered list is not created, what happens is that a paragraph is created instead, with a break tag for each single newline. In this instance, the output directly matches the input, including all the numbering.

In theory, Markua supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number, either increasing or decreasing.
2. Every item in the list begins with the same number.

This is not actually quite true.

See, the notion of "consecutive" is easy to explain and to check for decimal numbers, either in increasing or decreasing order. `1, 2, 3, ...`, `456, 457, 458, ...`, or `5, 4, 3` are all easily verified as consecutive, both by humans and computers.

However, Markua also supports ordered lists using uppercase and lowercase alphabetical numbering, as well as uppercase and lowercase Roman numeral numbering, and in increasing or decreasing order.

In the case of alphabetical numbering, checking "consecutive" is harder. It's relatively straightforward for the first 26 items, but then all bets are off. In case you're curious, here is the sequence used in HTML for increasing alphabetical numbering:

`a, b, ..., z, aa, ab, ..., az, ba, bb, ... bz, za, zb, ..., zz, aaa, aab, ..., aaz, aba, abb, ...`

In terms of Roman numerals, it's even worse. I'm sure that someone in a Classics department (or in the NFL) knows the algorithm by heart, but I don't.

So, what are Markua authors and implementors of Markua processors to do?

Markua makes this simpler by specifying the following rules.

Markua *actually* supports creating an ordered list based on a different set of conditions based on the numbering type.

For decimal numbers, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number, either increasing or decreasing.
2. Every item in the list begins with the same number.

For uppercase and lowercase alphabetical numbering, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive letter, followed by a period, and the lettering does not extend past `z.` for lowercase or `Z.` for uppercase. (This way, implementors of Markua processors don't need to check the `aa`, case, and authors writing in Markua don't need to remember it.)
2. Every item in the list begins with the same single letter, followed by a period.

The term "single letter" means that consecutive `c.`s start an ordered list which starts with `c, d, e, ...`, but that consecutive `aa.`s or `aba.`s do not start an ordered list. Again, this greatly simplifies life (you're welcome!) for implementors of Markua processors, who otherwise would need to figure out what number in the sequence `aba` is, in order to generate the correct HTML.

For uppercase and lowercase Roman numeral numbering, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive Roman numeral, followed by a period, and the lettering does not extend past `xii.` for lowercase Roman numerals or `XII.` for uppercase Roman numerals. To be clear, this means that the only valid consecutive lowercase Roman numerals are `i, ii, iii, iv, v, vi, vii, viii, ix, x, xi, xii`, and that the only valid consecutive uppercase Roman numerals are `I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII`.
2. Every item in the list begins with `i.` for lowercase Roman numerals or `I.` for uppercase Roman numerals.

The combination of the rules for Roman numeral numbering means that you can have an arbitrarily long Roman numeral list starting from `i.` or `I.`, but that implementors of Markua processors don't need to write code to figure out whether `MCMLXXV` is a valid Roman numeral, and what the consecutive Roman numeral sequence after it is.

If you're wondering why I picked `xii` and `XII` for the last consecutive lowercase and uppercase Roman numerals to respect: this is Roman numeral 12, and the main usage of Roman numerals in modern life is in clock faces.

Speaking of clock faces, I have bad news for fans of watches and antique clocks:

* The only supported version of the Roman numeral 4 is the subtractive `iv` (in lowercase) or `IV` (in uppercase); the additive `iiii` or `IIII` form is not supported.
* The only supported version of the Roman numeral 9 is the subtractive `ix` (in lowercase) or `IX` (in uppercase); the additive `viiii` or `VIIII` form is not supported.

It turns out that the question of additive versus subtractive forms of Roman numerals is actually interesting; see [this article](http://mentalfloss.com/article/24578/why-do-some-clocks-use-roman-numeral-iiii) and [this Wikipedia entry](https://en.wikipedia.org/wiki/Roman_numerals) for a starting point.

In Markua, list numbers must **all** either be **consecutive**, given the type of numbering  that is used, or **the same as the first number**. Otherwise, the list is interpreted as a paragraph with a bunch of break tags in it, and lines starting with the numbers given. The principle is the following: the numbers which are shown in the manuscript must be the same as those in the output, or the numbers must be clearly intended to be numbered list numbers. Otherwise, a list will not be produced.

If you want to prevent a list from being created with consecutive numbered items separated by single newlines, the backslash escape in front of the period used in Markdown to prevent lists also works in Markua. However, it is needed a lot less often.

#### Example

##### Markua Syntax

{#input_list_consecutive_or_same_1}
```
This makes an ordered list with decimal numbers (1, 2, 3):

1. one
1. two
1. three

This does not make a list, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

This makes a list (1975, 1976):

1975. An amazing year.
1976. The year after 1975.

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

This makes a lowercase alphabetical ordered list (a, b):

a. one
b. two

This makes a lowercase alphabetical ordered list (e, f):

e. five
f. six

This makes a lowercase alphabetical ordered list (i, ii, iii, iv):

i. one
ii. two
iii. three
iv. four

Not a list:

i. one
ii. two
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

That's it!
```

##### HTML Output

{#output_list_consecutive_or_same_1}
```
<p>This makes an ordered list with decimal numbers:</p>
<ol>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ol>
<p>This does not make a list, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>This makes a list (1975, 1976):</p>
<ol start="1975">
  <li>An amazing year.</li>
  <li>The year after 1975.</li>
</ol>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>This makes a lowercase alphabetical ordered list (a, b):</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (e, f):</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (i, ii, iii, iv):</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>Not a list:</p>
<p>a\. one<br/>
b\. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>That's it!</p>
```