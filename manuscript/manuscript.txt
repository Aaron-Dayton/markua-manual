{frontmatter}

# Note For Leanpub Authors: Markua Is NOT Yet Live in Leanpub!

**Markua support is NOT yet live in Leanpub for anyone but admins.**

If you're reading this, you are a really, *really* early adopter of Markua.

I'm publishing the Markua spec in-progress, since I believe in [Lean Publishing](https://leanpub.com/lean). (Lean Publishing is the act of publishing an in-progress book using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do.)

Markua should be live in Leanpub and in the open source version by the end of March 2016. In the meantime, what Leanpub books are written in is what they have been written in for about 5 years: [Leanpub Flavoured Markdown, which is documented at this link](https://leanpub.com/help/manual).

When Markua support is live on Leanpub we will provide the option of writing either in Markua or in Leanpub Flavoured Markdown. In the meantime, please enjoy using Leanpub and Leanpub Flavoured Markdown.

{mainmatter}

# The Magical Typewriter

Imagine you owned a magical typewriter.

When you used this magical typewriter, you wrote with fewer distractions. You didn't just write faster, you wrote better.

With your magical typewriter, you never worried about layout. The book formatted itself.

You could hit a key on your magical typewriter to create an ebook from your manuscript with one click.

All ebook formats would be created, and they'd all look good. You'd have PDF for computers, MOBI for Kindle, and EPUB for everywhere else. The book would look great on phones.

With your magical typewriter, you could publish your book before it was even done, and get feedback from readers all over the world. You could automatically share book updates with them. You would press one key on your magical typewriter to publish a new version, and all your readers would have it instantly.

With your magical typewriter, you could easily compare your current manuscript to any other version of your manuscript that had ever existed.

When the book was done, if you decided to make a print book, you could press a key on your magical typewriter to generate InDesign with one click. Your designer or publisher could use this as a starting point for producing a great looking print book.

With your magical typewriter, you'd only have to do one thing: Write.

Wouldn't it be great if such a magical typewriter existed?

It does. At Leanpub, we're building it.

But there's one requirement for this magical typewriter to exist: a simple, coherent, open source, free, plain text format for a book manuscript.

This simple format is what authors will write their books in, instead of Word. It will enable an ecosystem of tools to emerge around it.

This simple format will be the basis for the magical typewriter.

This simple format is called Markua.

This is its specification.

# Overview

## What is Markua?

Markua, pronounced "mar-coo-ah", is the best way in the world to write books.

Markua is extremely simple and powerful. If you want to write a novel in Markua, you can learn the Markua syntax that you need to know in 30 seconds (see below). If you want to write a computer programming book or doctoral thesis in Markua, order a pizza: you can learn the additional syntax you need in less than 30 minutes.

Markua is terse. When you are writing using Markua, you are writing, not programming. Once you understand Markua's syntax, it fades into the background.

Markua is opinionated. There is only one way to do most things. (Sometime there are two ways, however, for improved Markdown compatibility. Markua breaks its own rules.)

Markua is designed for the writing of books, but it can also be used to write documents such as journal articles: these documents share many of the same constructs as books. In this specification, however, I will talk exclusively about books--saying "books and documents" throughout is annoying to write and even more annoying to read!

Markua is a plain text format. Markua book manuscripts, called Markua documents, can be written however you want. On a computer, you can use any text editor you want. Beginning authors can use things like Notepad or TextEdit; novelists can use Scrivener; programmers can use Emacs, vi, Sublime or Atom; writers who like elegant, minimalist programs can use programs like iA Writer. You can also write Markua on a tablet, phone or even using an online editor like [MarkuaPad](http://markuapad.com). Since Markua syntax is so similar to Markdown syntax, many programs will already format Markua documents nicely.

Markua documents can be automatically transformed into every current popular type of ebook format. The computer programs which do this transformation are called Markua Processors. These programs understand both Markua syntax and how to generate the various output formats.

{#novel_syntax}
## How to Write a Novel in Markua

You only need to know nine things to write a novel in Markua:

1. Chapters, sections and paragraphs are separated by blank lines. To add a blank line, you hit the Enter key **twice**.
2. To make a new chapter you start a line with a pound sign (`#`), followed by a space, the name of the chapter and a blank line:
   `# The Chapter Name`
3. To make a new section you start a line with two pound signs (`##`), followed by a space, the name of the section and a blank line:
   `## The Section Name`
4. To make a new paragraph just start typing. You don't need to indent your paragraphs, but you can add a tab if you want.
5. To force a line break within a paragraph, just hit the Enter key **once**.
6. Surround text with one asterisk (`*`) on each side to make it `*italic*`.
7. Surround text with two asterisks (`**`) on each side to make it `**bold**`.
8. To add a scene break, put three asterisks on a line by themselves, with blank lines above and below them. You can have spaces between the asterisks if you want:
   `* * *`
9. All other text and punctuation is typed normally:
    `He asked, "How do you type quotes?" "Like this," I replied.`

That's it!

## Minimal Formatting

When you are writing, *formatting is procrastination*. Writing is hard enough without needing to worry about formatting.

So, Markua provides fairly minimal formatting options. The only type of formatting provided in Markua is semantic formatting. This is formatting which has meaning in the text, and which should not be changed by a book designer.

Semantic formatting also includes `class` attributes on figures, which can be used by an author to identify a particular type of figure, so that these can be formatted in a consistent way in HTML or even in other output formats. With HTML and EPUB, a Markua Processor can support CSS formatting. (For non-programmers: CSS, or Cascading Style Sheets, is the way that HTML is properly formatted.) A Markua Processor can also use the class attributes as formatting hints when producing non-HTML-based formats, such as PDF. A Markua Processor can provide a set of predefined `class` attribute values that have a certain behaviour in PDF output and a similar behaviour accomplished via CSS to affect HTML and EPUB outputs.

Note that Markua deliberately does not specify any requirements about how to do formatting based on values of a `class` attribute, about CSS styles or about PDF output at all. This is deliberate, in order to maximize implementation flexibility and encourage competition among implementers of Markua Processors and among book designers. For simplicity, a Markua Processor does not need to even support formatting based on class attributes at all: while the class attribute must be present in the generated HTML (if present), there is no requirement for a given Markua Processor to support CSS--or even to generate HTML at all.

To emphasize how little formatting is in Markua: Markua doesn't have any concept of font sizes or margins! Also, Markua really, really, *really* does **not** care about "widows and orphans"--unless they're people!

## Markua: Markdown for Books

Markua is based on [Markdown](http://daringfireball.net/projects/markdown/). Markdown is a plain text format for writing text which can be transformed by Markdown processors into HTML. Markdown was created by John Gruber, with help from Aaron Swartz. Markdown was described by John Gruber as follows:

> Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).

The primary reason that Markdown is a great way to write is that it was designed to be this way:

> The overriding design goal for Markdown's formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. While Markdown's syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown's syntax is the format of plain text email.

Markua is heavily inspired by Markdown. What Markua does is to map most Markdown syntax to book concepts, as well as adding new syntax and concepts of its own.

The most popular subset of Markdown exists virtually unchanged in Markua. For example, *all* the Markua syntax described [earlier](#novel_syntax) as necessary to write a novel is inherited verbatim from Markdown.

One of the design goals of Markua is for it to be the most straightforward way for a Markdown document to become a book. So, if you already write your blog posts or lecture notes in Markdown, they are probably already valid Markua. You can use any Markua Processor, such as [Leanpub](http://leanpub.com), to turn them into an ebook with one click. Then, as you go down the path of enhancing the manuscript and adding things which only make sense in books, this process will feel like adding, not converting. The process of going from a Markdown document into a Markua ebook is mostly a process of decorating--enhancing and reinterpreting the Markdown document appropriately. In fact, one of the goals is for writers who are familiar with Markdown to feel as though they are still writing in Markdown, but that Markdown somehow *grew an understanding of book concepts*. Markua is really "Markdown for books".

At Leanpub, my cofounder [Scott Patten](https://twitter.com/scott_patten) and I created a dialect of Markdown called "Leanpub Flavoured Markdown". Leanpub Flavoured Markdown was basically Markdown minus inline HTML plus a number of extensions needed to write books. This Markdown dialect has been used for years by Leanpub authors to create all kinds of books.

Markua is the evolution of how Markdown is used at Leanpub. After years of experience with Leanpub Flavoured Markdown, I ([Peter Armstrong](https://twitter.com/peterarmstrong)) set out to specify it properly. I originally thought that this is what Markua would be: just a formalization of Leanpub Flavoured Markdown. But as the specification work evolved, I realized that Markua was really a descendant of Markdown, not just a flavour of it.

Books have different abstractions than HTML. All abstractions [leak](http://www.joelonsoftware.com/articles/LeakyAbstractions.html), so HTML's abstractions leak into Markdown and the abstractions of books leak into Markua.

So, I started over.

I started with Markdown. I then removed or changed the few things which were either not needed for books, or which were overly complex. I then found new, more appropriate abstractions for books--most importantly, resources, figures and attribute lists. I then reassembled the pieces around these abstractions into this whole. Hopefully it is a coherent whole.

## Why the Name "Markua"?

When I set out to specify Markua, I realized I needed a name. I wanted a name that conveyed the warmth and love that I have for Markdown, for writing and for writers, while not implying endorsement by John Gruber in any way. I also did not want a name which refenced Leanpub: Markua is a standalone specification with its own identity, which anyone (including Leanpub competitors) can freely implement. Finally, I was on vacation in Hawaii when I named Markua, and I wanted something that sounded happy, friendly and almost Hawaiian. (Yes, I'm aware that there is no r in Hawaiian.) I also wanted a name that had its .com domain name available, and that was short and spellable, for branding purposes. The Markua name does have all these these properties, and I feel it is a really good brand for what I'm trying to accomplish.

## Why is Inline HTML Not Supported in Markua?

Inline HTML is not supported for both implementation and philosophical reasons.

Supporting inline HTML would be very hard to implement, as Markua and Markdown have different use cases. Markdown is a better way to write HTML; Markua is a better way to write a book. Since Markdown's only output format target is HTML, there is a strong temptation to support inline HTML--generating HTML from HTML is as simple as passing the HTML through. From an implementation perspective, Markdown gets inline HTML support for free. On the other hand, for Markua, there is a large amount of HTML that makes no sense in books. Supporting inline HTML would put an undue burden on Markua Processors, the book and document production systems which produce PDF, EPUB, MOBI and HTML from Markua documents. Mapping all of HTML to PDF or MOBI formats in a meaningful way would be difficult and arbitrary.

Philosophically, Markua is intended to be a better way to write books. By not supporting inline HTML, Markua imposes more constraints on writers who would be tempted to use inline HTML for layout purposes. Since Markua does not support inline HTML, attempting to do complex layout in Markua using HTML is just not possible. And since it's not possible, the temptation to procrastinate is reduced.

Supporting inline HTML would make Markua a worse format, both for writers and implementors. So, it's not supported.

One design consequence of the support for inline HTML in Markdown is that Markdown's syntax can stay artificially small--since Markdown authors can always fall back to using HTML directly, Markdown does not need to be able to produce all of HTML. Since Markua does not support inline HTML, any required output must be produceable by a Markua input. For example, there is no official table syntax in Markdown, and Markdown authors can just use inline HTML tables. Since Markua does not support inline HTML, and since books often require tables, Markua needs to add a table syntax.

## UTF-8 Character Encoding

Markua documents are written in plain text. Specifically, Markua documents must be saved in the **UTF-8** character encoding. ASCII text (what "plain text" means to most westerners) is a valid subset of UTF-8, so for many western authors their favorite text editor already saves files as UTF-8 text.

## Markua Output Formats

The Markua specification specifies the Markua syntax and the conceptual mapping from Markua syntax to book concepts.

Markua Processors can output any number of output formats from a Markua document. For example, Leanpub can output PDF, EPUB, MOBI, HTML and InDesign. None of these output formats is required to be supported by a given Markua Processor. A Markua Processor just has to output *some* output format.

Not only are there no required output formats for a Markua Processor, the complete mapping from a Markua input to these output formats is also not formally specifed--not even for HTML. This is deliberate, in order to maximize implementation flexibility and encourage competition among implementers of Markua Processors.

## HTML Mapping

Even though there is no full, canonical HTML mapping, Markua *does* specify how many parts of Markua syntax **must** be mapped to HTML, if HTML is being generated by a Markua Processor.

These are requirements for any Markua Processor which outputs any version of HTML, including HTML5. These requirements also affect the HTML which is contained in an EPUB file. A Markua Processor which violates these HTML output requirements is in error.

For the most part, the HTML mapping which is specified relates to the type of formatting that a book designer typically has no discretion to change. This includes things like bold, italics, paragraphs, single newlines, etc. The HTML mapping also specifies things which it makes no sense for there to be any variation in the generated HTML. This includes things like headings and figures--even though they may be styled radically differently in CSS, the HTML that produces them should be consistent.

Creativity requires some constraints, and having a simple set of requirements around a basic subset of the HTML that is generated from a Markua document frees the implementors of Markua Processors to innovate in areas where it makes sense, while still sharing a common foundation. This common foundation will also make life easier for book designers to style the HTML output which is generated by a Markua Processor, since the basic HTML elements that are output will not change between Markua Processors.

The [HTML Mapping Requirements](#html_mapping_requirements) chapter contains these requirements. (Don't read it now, however--it won't make much sense until you've read the rest of the spec first, which is why it's at the end!)

## Status of the Markua Specification and Implementations

This is an in-progress, alpha quality specification. It is being constantly updated at <https://leanpub.com/markua>. To read the specification in PDF, EPUB, MOBI or HTML format, go there.

To read the specification manuscript in Markua, see <https://github.com/markuadoc/markua>. (Until Markua is fully supported in Leanpub, the Markua spec is a strange hybrid of Markua and Leanpub Flavoured Markdown.)

To stay current on Markua progress, follow [@markuadoc](https://twitter.com/markuadoc) or [@peterarmstrong](https://twitter.com/peterarmstrong) on Twitter.

At [Ruboss](http://ruboss.com), we are busy adding Markua support to Leanpub. Leanpub can take a Markdown or Markua manuscript and, with one click, generate an ebook which is available in PDF, EPUB, MOBI and HTML. (To generate an InDesign export requires a second click.) We are also working on an open source, ES6-based [Markua-to-HTML converter](https://github.com/markuadoc/markua-js). We also hope to work with the [pandoc](http://pandoc.org/) team to enable Markua support in pandoc, but we're not very good at programming in Haskell (which pandoc is written in).

{#text_formatting}
# Text Formatting

Markua's goal is to provide all the semantic formatting required by authors. Formatting that could be done by a book designer without needing to discuss it with the author is considered orthogonal to Markua, and is largely omitted from Markua.

Markua is a plain text format designed for the writing of books. Books have various types of text formatting in them: bold, italic, underline, strikethrough, superscript and subscript.

Here's how to do basic, semantic text formatting.

Italic
: To produce *italic text*, surround it with either `_one underscore_` or `*one asterisk*`.

Bold
: To produce **bold text**, surround it with either `__two underscores__` or `**two asterisks**`.

Bold + Italic
: To produce ***bold + italic text***, surround it with either `___three underscores___` or `***three asterisks***`.

Underline
: To produce ____underlined text____, surround it with `____four underscores____`. This is gross, but it's a tradeoff for Markdown compatibility: the one, two and three underscore choices were taken. Thankfully, it's usually preferable to use italic instead of underline. However, underline is not just a typewriter version of italics. In some languages, underlining serves a distinct, legitimate purpose.

Strikethrough
: To produce ~~strikethrough text~~, surround it with `~~two tildes~~`. This is the same syntax as is used by both [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/) and by John Macfarlane's excellent [pandoc](http://johnmacfarlane.net/pandoc/README.html).)

W> TODO_LEANPUB - add strikethrough to Leanpub

Superscript
: To produce superscript like the 3 in 5^3^ = 125, surround it with carets like `5^3^ = 125`. (This is the same syntax as is used by pandoc.)

Subscript
: To produce subscript like the 2 in H~2~O, surround it with single tildes like `H~2~O`.

Note that if the asterisks and underscores needed to produce bold and italic are not nested correctly, they will be output as asterisks and underscores instead of producing formatting. This includes combinations like `**_this**_`, `*__this*__` or `__*this__*`.

{#headings}
# Headings

Markdown is a way of writing HTML, and HTML has 6 heading levels: `h1`, `h2`, `h3`, `h4`, `h5` and `h6`. Markua, however, is a way of writing books. Books have things like chapters, sections and subsections. Sometimes books have parts, e.g. Part One and Part Two.

In Markdown, you can create the 6 HTML heading levels using Markdown syntax. What Markua does is to interpret the six heading levels as defining the structure of the book.

Markua is also a lot more strict about heading syntax than Markdown. In Markdown, there are two syntaxes for making headings, atx and Setext, and [both of them can take many forms](http://daringfireball.net/projects/markdown/syntax#header). However, **in Markua there is exactly one way of making every type of heading**. It is a subset of the atx headings in Markdown; Setext headings are not supported. To learn more about Markdown headings, see the end of this section.

Here's the only way that headings are made in Markua:

~~~
# Part #

This is a paragraph.

# Chapter

This is a paragraph.

## Section

This is a paragraph.

### Sub-Section

This is a paragraph.

#### Sub-Sub-Section

This is a paragraph.

##### Sub-Sub-Sub-Section

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section

This is a paragraph.
~~~

W> TODO_LEANPUB - bug - h6 needs proper newlines afterward, and needs to be numbered if numbering is enabled

Specificaly, to create a Markua heading, you put the following on a line by itself, with a blank line above and below it:

* between one and six pound signs (`#`)
* followed by exactly one space
* followed by text
* followed (only for parts) by exactly one space and exactly one pound sign

Making these headings divides your book or document into these divisions. If you add part headings, your book will have parts; if you don't, it won't. If you add chapter headings, your book will have chapters; if you don't, it won't.

Markua is more strict about spaces and pound signs than Markdown:

1. In Markua, to make a part heading you make a heading like `# Title #` -- the heading starts with exactly one pound sign and exactly one space, and ends with exactly one space and exactly one pound sign. No other combination of pound signs and spaces makes a part heading.
2. Part headings end with a space and a pound sign, but other than that, headings cannot have optional pound signs at the end of them. Any other pound signs are considered to be text in the heading. (This is different than the atx headers in Markdown.)
3. All headings must start with between 1 and 6 pound signs (`#`) and then have exactly one space, followed by text. If any other number of spaces is used or if tabs are used, the text must be interpreted as a paragraph by a Markua Processor, not as a heading. (This ensures that Markua manuscripts look consistent for authors, and can be parsed more easily by Markua Processors. Also, if we allowed spaces to be omitted, you couldn't start paragraphs with a #hashtag--which has not been a problem in traditional writing, but which would violate the principle of least surprise.)
4. Headings must be separated from other block elements by blank lines (created by two newlines) both before and after them. Because of the way that Markua concatenates files, headings at the top of a Markua document automatically have a blank line above them, and headings at the bottom of a Markua document automatically have a blank line below them. So, headings at the top of a document only need a blank line below them, and headings at the bottom of a document only need a blank line above them.
5. If there is only a single newline after the heading, a Markua Processor must consider the subsequent text to be part of the heading. If a Table of Contents is generated, the newline is converted into a space. This rule means that the entire contents of the next paragraph will be part of the heading, which will probably look like an obvious error in the book.

I thought long and hard about Markua headings, and changed my mind (as Scott and Braden will attest) a number of times. I settled on this design when I realized that the design requirements were as follows:

1. From looking at a heading in a Markua manuscript, an author must be able to know exactly what it is. It's not acceptable to need to reference metadata to know what the headings mean.
2. Only existing Markdown syntax can be used, to ensure that Markdown-aware tooling will work unchanged.
3. The number of leading pound signs must match the level of heading.
4. For a book with chapters only (no parts), the chapter headings must feel "top-level".
5. The syntax to create parts must be as economical as possible.
6. There must be only one way to create every level of heading. Headings structure Markua documents, and must be clear and unambiguous.
7. It should be possible to switch back and forth between having parts in your book without having to modify all existing headings.
8. Books with parts and chapters must be able to have the same number of levels of sub-sections.
9. Documents can have parts, chapters and sections just like books, and it's up to the document designer to create the appropriate CSS.

The design of Markua headings meets these requirements, in what I feel is an optimal way. This is in stark contrast to Leanpub Flavoured Markdown, which violated a number of these requirements, especially #2 (as parts were created with `-# Title`). Previous versions of Markua were even worse, violating many of these requirements (e.g. #1, #3, #4, #6, #7 and #8).

## Markdown Headings

Whereas Markua defines exactly one way of making every type of heading, Markdown defines two syntaxes for making headings: "Setext" and "atx". For the purpose of contrast, this section explains how headings are done in Markdown.

{#setext_headings}
### Setext Headings in Markdown

In the Setext-style of Markdown headings, top level headings can be made by adding a row of equals signs `========` below the heading, and second level headings can be made by adding a row of minus signs `--------` below the heading.

These are some Setext headers in Markdown:

~~~
This is an h1
=============

This is also an h1 (really)
=

This is an h2
-------------

This is also an h2 (really)
-
~~~

There are two main issues with this style of heading in Markdown:

1. It is inconsistent: It only supports defining `h1` and `h2`; to define h3 and below, the atx style of heading must be used.
2. It is confusing: Authors are confused about how many equals or minus signs you need to use. (As we saw above, the answer is 1, which looks disgusting.) Also, it's unclear whether you need to add a blank line below the row of equals signs or minus signs, and whether a heading is still produced if this is not done.

{#atx_headings}
### atx Headings in Markdown

In Markdown, the other heading syntax is "atx" headers. The [atx format](http://www.aaronsw.com/2002/atx/intro) was created by Aaron Swartz in 2002, and is an important predecessor to Markdown. To create an atx heading, you put the following on a line by itself, with a blank line above and below it: between one and six pound signs (`#`), followed by one or more spaces or tabs, followed by text, followed optionally by whitespace and any number of `#` characters. The number of `#` characters determines the level of heading.

These are some atx headers in Markdown:

~~~
# This is an h1

# This is also an h1 ####################

## This is an h2

## This is also an h2 ###################

### This is an h3

### This is also an h3 ##################
~~~

Note that all the trailing `#` characters are ignored and are not part of the heading text.

From reading this, you'll recognize that Markua headings are a subset of Markdown's atx headers.

{#spaces}
# Spaces, Newlines and Indentation

The goal for the handling of spaces, newlines and indentation in Markua is for everything to just work. Prose, poetry, code and figures should just work. There should be no surprises. Above all, no invisible formatting characters can be used.

In this regard, Markua has broader design goals than Markdown: Markdown is for web writers; Markua is for *writers*. Markdown is a format for authors to write HTML; Markua is a format for authors to write books. Books can be in many formats, including HTML. The concepts in Markdown are HTML concepts; the concepts in Markua are book concepts.

Because of this, the way that single newlines, three or more newlines and leading spaces are handled in Markua is different from the way that they are handled in Markdown. (By a newline, I mean the character which is produced by the enter key on the keyboard.)

## Paragraphs and Blank Lines

Paragraphs and blank lines are handled in almost the same way in Markua and Markdown. Normal Markua text is in paragraphs, which produce a `<p>` tag in HTML output. The distinguishing thing about a paragraph is that there is nothing else distinguishing about it: unlike headings, lists and other Markua elements, a paragraph requires no special formatting. To create a new paragraph, you add two newlines to create a blank line.

Here's an example of this in Markua syntax. Throughout this specification, examples of Markua syntax will be shown as a figure which is a code resource, so that the exact Markua manuscript text can be shown unprocessed. These are three paragraphs in Markua, each separated by the canonical two newlines which produce one blank line:

~~~
I'm paragraph one. Yay!

This is paragraph two.

This is paragraph three.
~~~

A paragraph is the least-specialized example of something called a block element. Block elements are separated from each other by at least one blank line. Broadly speaking, Markua documents consist of three things: block elements, span elements and metadata. Examples of other block elements include headings, figures and lists.

{#single_newlines}
## Single Newlines

The way that single newlines are handled is the *single largest breaking difference* between Markdown and Markua. Usually, Markua tries hard to not break Markdown syntax. This is the main exception.

In Markdown, you can manually wrap headings, paragraphs, lists and blockquotes with single newlines with no effect on the HTML output. Markdown, like HTML, treats single newlines as equivalent to single spaces.

In Markua, however, a forced line break in the input is a forced line break in the output: single newlines produce `<br/>` tags in HTML output, and must produce forced line breaks in all other output formats like PDF. This is true for headings, paragraphs, lists, blockquotes, asides, blurbs and callouts.

In ancient history, some text editors did not automatically wrap lines of text, so manual wrapping of plain text files was a good thing to do. Also, for computer programmers, we still do not wrap our text when programming. However, for *writing*, automatic wrapping of paragraphs is essential for staying in the flow while writing, and for being able to edit your text without needing to re-wrap every line in a paragraph. This is one decision that even Microsoft Word gets right.

The decision in Markua to treat single newlines as forced line breaks (i.e. as single newlines, and as a `<br/>` tag in HTML) means that Markua does *not* need to use the **horrible hack** that Markdown uses to output forced line breaks. In Markdown, to output a `<br/>` tag in HTML, you need to add two spaces at the end of the line, followed by a single newline. This means that it is **impossible** to look at a Markdown document with single newlines in it and understand what they mean: you need to find out if there are invisible formatting characters at the end of the line! Worse, some text editors (like Emacs, the editor I use) can be configured to remove trailing spaces at the ends of lines automatically when a file is saved. So, it's possible for me to inadvertently modify the meaning of a Markdown document by simply opening it and saving it! Also, in Markdown, it's impossible to type a sonnet without relying on the two space hack at the end of every line to force a newline--which isn't very poetic at all.

Example:

~~~
I'm paragraph one. Yay!

This is paragraph two.
This is *still* in paragraph two, preceded by a forced line break.
This is also in paragraph two, also preceded by a forced line break.

This is paragraph three.
~~~

## Three or More Newlines

In Markdown, if you add more than two newlines in a row, the extra newlines are ignored: two newlines in a row is equivalent to three (or ten!) newlines in a row. This makes sense because Markdown is a format for producing HTML.

In Markua, however, the extra newlines after the second newline are respected. The author typed them; presumably they were intended to produce, well, extra newlines. So, every extra newline after the second newline becomes an extra newline in between the close of the paragraph (or whatever Markua element was ending) and the start of the next paragraph (or whatever Markua element is beginning).

A> Markua authors should **strongly** resist the temptation to try to do things like pagination by adding extra newlines. Not only is that a distraction from writing, but to make matters worse, any meaningful editing before the extra newlines will change all your page breaks anyway. (Furthermore, in EPUB and MOBI, the page breaks vary based on the size of the device and the font size--so any fiddling that you do only affects PDF anyway.)

## Leading Spaces (Prose vs. Poetry)

In Markua, leading spaces are interpreted based on context: specifically, based on what came before them.

Following **exactly one** newline, whitespace is **preserved**. Specifically, a single space produces a single space (a "non-breaking" space, or `&nbsp;`, in HTML), and a single tab produces four spaces (four "non-breaking" spaces, or `&nbsp;&nbsp;&nbsp;&nbsp;`, in HTML).

Following **two or more** newlines (one or more blank lines), whitespace is **ignored**. So, you can manually indent your paragraphs if you're used to doing so, and it will have no effect.

This distinction also helps Markua support prose and poetry without a bunch of special syntax.

Two (or more) newlines in Markua create a new paragraph in prose, or a new stanza in poetry. That's it. Paragraphs can either be indented or not indented, but this is a global setting at the book or document level--not something that is specific to a given paragraph. Authors may choose to indent their paragraphs in their manuscript based on personal preference or habit, but this should have no effect on whether the paragraphs are indented in the output.

One newline, on the other hand, is used to add a forced line break, but to keep the existing paragraph (or stanza). Because of this, any leading space after a single newline is not paragraph indentation, but is instead deliberate indentation on the specific line. As such, it should be respected.

This means you can write a sonnet without typing any special formatting characters. In the following Markua text (courtesy of Shakespeare), every line break will be added correctly, and the last two lines will be indented:

~~~
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
~~~

In Markdown, not only would you lose the indents on the third and fourth lines, but without any trailing space hack used this would all be collapsed to one line! (Note how this shows that the two space hack is unacceptable: you should be able to tell what output is produced by looking at the input.)

More generally, the rules about single and double newlines mean that in Markua you can just write poetry without any formatting characters. Stanzas are separated with a blank line, and any indentation is preserved except on the first line of a stanza.

## Trailing Spaces are Stripped

Unlike Markdown, all trailing spaces at the end of a line are ignored by Markua. This way, there is no reliance on invisible formatting characters, and editors which strip trailing spaces have no effect on a Markua document.

## Internal Spaces Are Collapsed to One Space

Like Markdown, in Markua, spaces or tabs that are in the middle of a line of text are collapsed to a single space. In Markdown, the main reason for this is presumably that this is how things work in HTML (without using `&nbsp;`). In Markua, the two main reasons for this are (1) that it's consistent with Markdown, and (2) that it lets authors write books using either one or two spaces after a period, with there being no difference in the formatting.

Because of this, if you want to write poetry like e e cummings in which the exact spacing is preserved in leading and internal spaces, you need to use a code resource. Markua defines many different types of resources, including math and code resources. Resources are discussed later in this chapter.

## One Blank Line Is Added When Concatenating Manuscript Files

A> This section is intended for programmers. Non-programmers can skip it, knowing that Markua does the right thing.

A Markua document can be written in one file or multiple manuscript files. If a manuscript is written in multiple files, these files are concatenated together by the Markua processor to produce one temporary manuscript file, and that one file is used as the input. Importantly, in order to avoid a number of bugs, the files are not just concatenated together unchanged--they **must** be concatenated together by Markua Processors with **two newlines** added between the end of each file and the beginning of the next file. This is needed in order to separate the content of the two files with one blank line between them, in order to prevent a number of surprises for authors. Note that because of this rule, a paragraph (or any other block element) cannot span multiple manuscript files.

To see why this rule is important, consider the following single-file Markua manuscript:

W> TODO_LEANPUB - add caption support to Leanpub

{caption: manuscript.txt}
~~~
# Chapter One

Lorem ipsum dolor.

# Chapter Two

Yada yada yada.
~~~

Suppose instead a multiple-file approach was used, in which there were two files, ch1.txt and ch2.txt, with the following content:

{caption: ch1.txt}
~~~
# Chapter One

Lorem ipsum dolor.
~~~

{caption: ch2.txt}
~~~
# Chapter Two

Yada yada yada.
~~~

If Markua did not add any newlines between files, then these files would produce the following manuscript:

{caption: Incorrect Temporary Auto-Created Manuscript #1}
~~~
# Chapter One

Lorem ipsum dolor.# Chapter Two

Yada yada yada.
~~~

If Markua only added one newline when concatenating, this would produce the following manuscript:

{caption: Incorrect Temporary Auto-Created Manuscript #2}
~~~
# Chapter One

Lorem ipsum dolor.
# Chapter Two

Yada yada yada.
~~~

However, since Markua requires that headings be separated by blank lines above and below them, the `# Chapter Two` heading would not be a heading. It would be considered part of the previous paragraph! This would be very surprising and the source of a number of bugs. Worse, since a number of text editors such as Emacs have a "strip blank lines at the end of files" setting, it would be possible to introduce such a bug if Markua simply relied on blank lines being added to the end of a file by the author.

So, because of the blank line rule, concatenating the files produces the same manuscript as the single-file manuscript above:

{caption: Correct Temporary Auto-Created Manuscript}
~~~
# Chapter One

Lorem ipsum dolor.

# Chapter Two

Yada yada yada.
~~~

{#resources}
# Resources

Markua documents are written in plain text, either in one text file or multiple text files. However, modern books are not just text. Books embed many types of *resources*. These resources have traditionally included things like images, computer code listings and mathematical equations. More recently, with the development of ebooks and formats like EPUB3, ebooks have gained the ability to embed audio and video resources. Markua's goal is to make inserting all types of resources simple and consistent, while staying as close to Markdown's syntax as possible.

Resources vary in four different ways:

1. **Insertion Methods**: Span and Figure
2. **Locations**: Local, Web and Inline
3. **Types**: image, video, audio, code or math
4. **Formats**: `png`, `m4a`, `mp3`, `ruby`, `latex`, `plain`, etc.

There are five types of resources: image, video, audio, code and math. Each type of resource has a number of supported formats. Any of the five resource types can be inserted as a local resource or web resource, and many of the resource types can also be inserted as an inline resource.

Before going into more detail, it's helpful to consider a brief example of Markua text which shows a number of resources being inserted. These resources have different insertion methods (span and figure), different locations (local, web and inline), different types (image, code) and different formats (png, jpg, ruby)--yet the syntax to insert them is compact and consistent:

~~~
Inserting a span image is as easy as ![pie](pie.png). Inserting an image as a figure is also:

![A Piece of Cake](http://markua.com/cake.jpg)

Inline code resources are added as spans like this `hello world` or as figures:

```ruby
puts "hello world"
```

{format: ruby}
![Hello, World](hello.rb)
~~~

The last figure in the example above showed an **attribute list**, which is a list of key-value pairs in curly braces. Any figure can have an attribute list, regardless of resource location, type or format. Attribute lists are explained [in depth](#attributes) later.

If you're familiar with Markdown syntax, you'll note that the syntax for local and web resources is similar to Markdown's inline image insertion syntax, and that the syntax for inline resources is similar to the fenced code blocks syntax from popular Markdown extensions including GitHub Flavoured Markdown.

A> Markdown's reference style image syntax is not supported in Markua for *any* type of resource--including images.
A>
A> There are two main reasons for not supporting reference style resource syntax in Markua:
A>
A> 1. Resources in Markua are complex enough without having two syntaxes.
A> 2. In something as large as a book, the potential for id collisions in link definitions using the reference link syntax is a lot higher than in the blog post length of typical Markdown documents.

## Resource Insertion Methods

Resources can be inserted either as spans or as figures.

### Spans

When a resource is inserted as a span, the resource is inserted as part of the flow of text of a paragraph with no newlines before or after it. A span resource cannot have an attribute list.

The syntax for a local resource or a web resource inserted as a span is as follows:

~~~
It's just ![optional alt text](resource_path_or_url) right in the text.
~~~

The optional alt text is discussed shortly.

The syntax for an inline resource inserted as a span is as follows:

~~~
It's a single backtick `followed by inline resource content`optional_format and then a single backtick.
~~~

### Figures

When a resource is inserted as a figure, the resource is inserted with at least one newline before and after it. A figure can have an attribute list. A figure can either be top-level (with a blank line before and after it), or it can be part of the flow of text of a paragraph (with a single newline before it, and one or more newlines after it). The ways that figures and other block elements can be inserted in paragraphs is [discussed in depth](#inserting_into_paras) later.

The syntax for a local resource or a web resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
![Optional Figure Caption](resource_path_or_url)
~~~

Note that if there is a figure caption specified in the attribute list and in the square brackets, the one in the attribute list wins. In the following figure, the caption would be "Foo" not "bar":

~~~
{caption: Foo}
![bar](foo.png)
~~~

Note that this is a deliberate example of a mistake. Authors should never write Markua text like this; the caption should be specified only once.

The syntax for an inline resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
```optional_format
inline resource content
```
~~~

Note that you can also insert an inline resource as a figure using tildes as the delimiter. Otherwise, it would be really difficult to write about Markua in Markua. This syntax is as follows:

```
{key: value, comma: separated, optional: attribute_list}
~~~optional_format
inline resource content
~~~
```

The optional_format looks uglier after tildes than backticks, so the recommended style is to use backticks if there is an optional format being specified that way.

Note that if there is a format specified in the attribute list and after the backticks, the one in the attribute list wins. In the following figure, the format is `text` not `ruby`:

~~~
{format: text}
```ruby
puts "hello world"
```
~~~

(Again, authors should never write Markua like this; the format should be specified only once.)

A figure can also have attributes. The supported attributes vary based on the type of resource, but all figures support the `format`, `caption` and `class` attributes.

`format`
: This is the resource format. Different resource types have different legal values for format.

`caption`
: This is text which is shown near the figure, typically above or below it.

`class`
: Any attribute list supports a class attribute. When used in figures, this is the class of the figure. This can be used for styling, and it can also be used by Markua Processors which wish to group figures by classes (e.g. theorems, lemmas, etc).

Many resource types can also have alt text. Alt text is not the same thing as a figure caption.

## Figure Captions

A resource which is inserted as a figure can have a caption.

This caption shows up in two places:

1. Near the resource, typically above or below it, per the preference of the Markua Processor.
2. As the name of the Figure in the List of Illustrations or Table of Figures, if one is generated for the book. In this case, the caption name should serve as the text, and be a crosslink to the caption associated with the figure itself.

## Alt Text and Figure Captions

Some resources support alt text. Alt text is text which is intended to take the place of the resource if the resource itself cannot be seen. In the case of images, the obvious use case is for readers with visual disabilities who are using a screen reader, but it also includes audiobooks and ebook readers which often do not support embedded images, audio and video.

The four types of resource which can have alt text are image, video, audio and math. Resources of type code are themselves just text, so it makes no sense for them to have alt text. If any alt text is provided for a code resource it is ignored.

The alt text should **not** be the same thing as the figure caption, if the figure caption is present. (Imagine the annoyance of having a visual disability and having your screen reader read identical alt text and figure captions to you throughout an entire book!) Instead, the alt text should be descriptive of the image content, while the figure caption can be more creative. For example, a figure caption may be "Washington Crossing the Delaware" and the alt text could be "Denzel Washington riding a jet ski in a river". Having good alt text would enable readers who cannot see the image to still get the joke which the figure caption makes.

The syntax to provide alt text varies based on the resource location and insertion method.

### Span + (Local or Web)

The alt text for a local or web resource inserted as a span is provided in square brackets before the resource path or URL:

~~~
It's just ![optional alt text](resource_path_or_url) right in the text.
~~~

Here's an example:

~~~
This needs to ![a stop sign](stop.png) now.
~~~

If you omit the optional alt text with a local or web resource, you still need to type the square brackets:

~~~
This needs to ![](stop.png) now.
~~~

### Span + Inline

Alt text is supported for inline span resources, but the syntax is ugly. To add this, you simply tack on an attribute list after the span. The following shows alt text on an inline span SVG image:

~~~
Red `<svg width="10" height="10"><rect x="0" y="0" width="10" height="10" fill="red"/></svg>`svg{alt: a red square} square.
~~~

### Figure

The alt text for a resource inserted as a figure is provided in the attribute list above the figure. This is true regardless of whether the resource location is local, web or inline, as shown in the following examples:

~~~
{alt: "The Delaware state map"}
![Where To Incorporate](delaware.svg)

{alt: "Denzel Washington on a jet ski in a river"}
![Washington Crossing the Delaware](delaware.jpg)

{alt: "Denzel Washington on a jet ski in a river", caption: "Washington Crossing the Delaware"}
![](delaware.jpg)

{caption: "Earth From Space (Simplified)", alt: "a blue circle"}
```svg
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```
~~~

Note that as shown above, the caption for a figure can be provided either in the metadata or in the square brackets in front of a local or web resource.

### Context-Sensitive Meaning of Square Bracketed Text

You may have been surprised reading this section. Markua does not have many inconsistencies, but this is one of them: the optional text inside the square brackets with a local or web resource varies based on whether the resource is inserted as a span resource or as a figure!

{caption: Meaning of the Text Inside Square Brackets}
|------------------|-----------------------------|
| Insertion Method | Text in Square Brackets is  |
|------------------|-----------------------------|
| Span             | The Alt Text                |
| Figure           | The Figure Caption          |
|------------------|-----------------------------|

The reason for this inconsistency is that even though it's a bit harder to learn, it's much better for writers this way once they've learned it.

The square brackets contain the text which is the most common use case for both span resources and for figures. For a span resource, that is the alt text. For a figure, that is the figure caption.

This is especially true since a span image cannot have a figure caption, and since not all figures are of resource types that can have alt text. (Code resources are themselves text, so they cannot have alt text.) Also, many image, audio and video resources are inserted without alt text.

So, given this rule, a figure which is an external code sample can be inserted in the following two ways:

~~~
![My Amazing Algorithm](algorithm.rb)

{caption: "My Amazing Algorithm}
![](algorithm.rb)
~~~

The first choice is clearly shorter, as well as more pleasant to write and to read.

Since the text in square brackets is the figure caption in figures, both ways are supported. If the text in square brackets was alt text in figures, then only the longer, unpleasant second choice would be supported.

Note that the second choice is how you add captions to figures which are inline resources, since there are no square brackets to use:

~~~
Here's a paragraph before the figure.

{caption: "My Amazing Algorithm}
```ruby
puts "hello world"
```

Here's a paragraph after the figure.
~~~

## Resource Locations

A resource is either considered a local, web or inline resource based on its location:

Local Resource
: The resource is stored along with the manuscript--either in a `resources` directory on a local filesystem, or uploaded to the same web service where the manuscript is being written.

Web Resource
: The resource is referred to via an `http` or `https` URL.

Inline Resource
: The resource is defined right in the body of a Markua document.

### Local Resources

If local resources are used, all local resources must be stored inside a `resources` directory, or one of its subdirectories. The `resources` directory is not part of the path to the resource. Implementors of Markua Processors must ensure they do not support navigating upward with `../` in paths.

A file called `foo.jpg` in the `resources` directory is referenced as `![](foo.jpg)`--not as `![](/foo.jpg)`, `![](resources/foo.jpg)` or  `![](/resources/foo.jpg)`.

A file called `bar.png` in a subdirectory `images` of the resources directory is referenced as `![](images/bar.png)`--not as `![](/images/bar.png)`, `![](resources/images/bar.png)` or  `![](/resources/images/bar.png)`.

Markua does not specify whether there are any subdirectories of the `resources` directory, or what their names are. Since any subdirectories have their names as part of the path to the resource, implementations can do whatever they want. For example, Leanpub will create subdirectories of the `resources` directory for every type of resource (images, audio, video, code and math), but this is not a requirement.

W> TODO_LEANPUB - implement the resources directory support

The local resources approach can also be used by hosted services. Internally, services can store resources wherever they want, but if they provide a download (say as a zip file) they should create the resources directory and provide the uploaded resources in that directory. If a nested structure is used, it should be exported that way--if a web service produces paths which reference images inside an images directory (e.g. as `images/foo.png`), then the zip file centaining an export should contain a `resources` directory which contains an `images` subdirectory with the images.

### Web Resources

If web resources are supported, both `http:` and `https:` resources should be supported.

Web resources are identified by the absolute URL of the resource on the internet. In the case of image, audio and video resources, this becomes the `src` attribute of the resource in HTML.

### Inline Resources

Inline resources can be of type code or math (regardless of format) and they can also be image resources of `svg` format. Since an SVG image is just XML text, it can be contained in the text of a Markua document. This is not something that is true for binary resources like PNG or JPEG images or any type of audio or video file--these can only be local or web resources.

## Resource Types and Formats

There are five types of resources: image, video, audio, code, and math. Each type of resource has a number of supported formats. The format determines the type.

The formats can either be specified by the `format` attribute or (in most cases) inferred from the file extension for local and web resources. (Inline resources obviously have no file extension, since they are contained in the body of a Markua manuscript file.)

Certain file extensions must be associated with a specific type of resource. These are specified in the sections below. Also, as discussed in the [code](#code) section, Markua Processors must interpret all unspecified file extensions as specifying a resource of type code with a format of `guess`.

When a local or web resource is inserted as a span, the file extension is the only way to provide the format. When a local or web resource is inserted as a figure, the default type and format can be overridden by a type and/or format specified in the attribute list.

{caption: "Formats Mapped to Resource Types"}
|-------------------------------------|------------------------|
| Format Detected                     | Resource Type Inferred |
|-------------------------------------|------------------------|
| `gif`, `png`, `jpeg`, `svg`, `svgz` | image                  |
| `mp4`, `webm`                       | video                  |
| `mp3`, `aac`, `wav`, `ogg`          | audio                  |
| `latex`, `mathml`                   | math                   |
| `text`, `guess` (unrecognized)      | code                   |
|-------------------------------------|------------------------|

As an author, all you do is provide the correct file extension or set the format in the attribute list. Markua recognizes the format, and uses it to look up the type. (If the format is unrecognized, then the resource is a code resource with a format of `guess`.) Because of this, there is no way to specify a resource type in the attribute list: it is always inferred from the format. Also, there's no default value for the format of a given resource type: the format is determined first, and it determines the type.

We will now consider each of the types of resources in more detail, as well as the various formats that they support. We will also discuss the supported attributes for each resource type. Resources have different default attributes based on their type, format and insertion method. These default attributes are important, especially for resources inserted as a span, since they cannot have an actual attribute list--only resources inserted as a figure can have an attribute list.

{#images}
## Images

The most common type of resource in most Markua documents will probably be image. Like any resource, an image can be inserted as a span or as a figure.

The following types of images are supported in Markua: GIF, PNG, JPEG, SVG and zipped SVG.

{caption: "Resource File Extensions Associated With Images"}
|-----------|------------|---------------|
| Extension | `format`   | Description   |
|-----------|------------|---------------|
| `.gif`    | `gif`      | GIF image     |
| `.png`    | `png`      | PNG image     |
| `.jpg`    | `jpeg`     | JPEG image    |
| `.jpeg`   | `jpeg`     | JPEG image    |
| `.svg`    | `svg`      | SVG image     |
| `.svgz`   | `svgz`     | Zipped SVG    |
|-----------|------------|---------------|

W> TODO_LEANPUB - Support table captions (there should be one in the table above)

The syntax to insert an image is the same compact and consistent syntax that is used for any resource. Local and web resource locations are supported for any type of image; inline resource locations are supported for SVG images only.

Images in Markua are inserted in essentially the same way they are in Markdown for inline images. Again, the reference style image syntax of Markdown is **NOT** supported in Markua for images or any type of resource.

We will discuss the supported and the default attributes for images, and then show examples of images being inserted as spans and as figures for both local, web and inline images.

### Supported Attributes for Images

`alt`
: The `alt` is the alt text, to be displayed when the image cannot be shown. This can only be provided in square brackets for images inserted as spans and only in the attribute list for figures.

`caption`
: The `caption` is the figure caption. It can only be present when the image is inserted as a figure.

`class`
: The `class` can be used by Markua Processors to provide the approrpiate styling. With HTML and EPUB output this should be done via CSS. The class attribute can also be creatively used when generating non-HTML formats such as PDF.

`format`
: All resources support the format attribute. For images, the `format` is the specific image format. The legal set of formats is given in the `format` column in the above table.

### Local Images

#### Span

~~~
Easy as ![pie](pie.png).
~~~

#### Figure

~~~
Here's a paragraph before the first figure.

![A Piece of Cake](cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](pie.jpg)

Here's a paragraph after the third figure.
~~~

### Web Images

#### Span

~~~
Easy as ![pie](http://markua.com/pie.png).
~~~

#### Figure

~~~
Here's a paragraph before the first figure.

![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](http://markua.com/pie.jpg)

Here's a paragraph after the third figure.
~~~

### Inline Images (SVG only)

SVG images are just XML text, so they can be inserted inline in Markua.

Note that there is no support for `alt` text in SVG, so there is no support for `alt` attributes with inline images in Markua. The recommendation is to use the `<desc>` attribute of the SVG as alt text.

#### Span

~~~
Red `<svg width="10" height="10"><desc>a red square</desc><rect x="0" y="0" width="10" height="10" fill="red"/></svg>`svg square.
~~~

#### Figure

~~~
Here's a paragraph before the figure.

{caption: "Earth From Space (Simplified)"}
```svg
<svg width="20" height="20">
  <desc>a blue circle</desc>
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Here's a paragraph after the figure.
~~~

{#video}
## Video

Unlike images, which are supported in most circumstances, with video files it's currently a bit of a crapshoot. There's currently a dominant proprietary format (H.264, or .mp4) and a new open source challenger (WebM). It's entirely likely that many ebook readers won't support either.

The following types of videos are supported in Markua: MP4 and WebM.

{caption: "Resource File Extensions Associated With Video"}
|-----------|------------|---------------|
| Extension | `format`   | Description   |
|-----------|------------|---------------|
| `.mp4`    | `mp4`      | MP4 video     |
| `.webm`   | `webm`     | WebM video    |
|-----------|------------|---------------|

The syntax to insert a video is the same compact and consistent syntax that is used for any resource. Local and web resource locations are supported for both video formats; inline resource locations for video are obviously not supported.

We will discuss the supported and the default attributes for videos, and then show examples of videos being inserted as spans and as figures for both local and web videos.

### Supported Attributes for Video

`format`
: All resources support the format attribute. For video, the `format` is the specific video format. The legal set of formats is given in the `format` column in the above table.

`poster`
: The `poster` is the URL or path to an image which should be shown instead of the video before the video is played. If a Markua Processor is outputting some format where it is known that video resources are not supported, it must choose the poster to use as a replacement for the video. Books are not just ebooks--books can also be printed on the fibers of trees that have been chopped down ("paper"), producing something called a "book". These "books", whether they are bound in a sturdy fashion ("hardcover books") or a flimsy fashion ("paperback books"), have one thing in common with respect to embedded video: they do not support it.

`alt`, `caption` and `class`
: These attributes work exactly as they do for images. They apply to the image specified by the `poster` attribute, and to the size of the video once it starts playing. Once the video starts playing, it can obviously be made fullscreen by any player that supports it.

Since the `alt` is a fallback for the situation where the `poster` image cannot be displayed, the video has two fallbacks: the `poster` image and then the `alt` text. (The use of video fallbacks, such as HTML5's `mediagroup` syntax or multiple `source` elements, is not supported in Markua.)

When generating HTML, a Markua Processor may add attributes to the video resource that are not based on the attributes in this list. The supported HTML5 video attributes are [here](http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element).

### Local Video

#### Span

~~~
Easy as ![pie](pie_eating_contest.mp4).
~~~

#### Figure

~~~
Here's a paragraph before the figure.

{alt: "a man eating an entire chocolate cake"}
![A Piece of Cake](cake_eating_contest.webm)

Here's a paragraph after the figure.
~~~

### Web Video

#### Span

~~~
Introducing Markua: ![Peter's Markua talk](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0).
~~~

Ironically, it took me about a year after that talk was recorded to finally figure out what Markua was.

#### Figure

~~~
Here's a paragraph before the figure.

{poster: http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg}
![Introducing Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0)

Here's a paragraph after the figure.
~~~

{#audio}
## Audio

Just as with video, the audio support in ebooks and on the web is more varied than for images. With audio, there are MP3, AAC, Ogg and WAV formats all in widespread use, and there are a number of other formats with supporters. It's entirely likely that many ebook readers won't support any of them.

The following types of audio resources are supported in Markua: MP3, AAC, WAV and Ogg Vorbis.

{caption: "Resource File Extensions Associated With Audio"}
|-----------|------------|---------------|
| Extension | `format`   | Description   |
|-----------|------------|---------------|
| `.mp3`    | `mp3`      | MP3 audio     |
| `.m4a`    | `aac`      | AAC audio     |
| `.aac`    | `aac`      | AAC audio     |
| `.wav`    | `wav`      | WAV audio     |
| `.wave`   | `wav`      | WAV audio     |
| `.ogg`    | `ogg`      | Ogg Vorbis    |
| `.oga`    | `ogg`      | Ogg Vorbis    |
|-----------|------------|---------------|

Note that .mp4 is not supported as a file extension for MP4 AAC audio, since that is the file extension used for MP4 video.

The syntax to insert an audio file is the same compact and consistent syntax that is used for any resource. Local and web resource locations are supported for both audio formats; inline resource locations for audio are obviously not supported.

We will discuss the supported and the default attributes for audio files, and then show examples of audio being inserted as spans and as figures for both local and web audio files.

### Supported Attributes for Audio

`format`
: All resources support the format attribute. For audio, the `format` is the specific audio format. The legal set of formats is given in the `format` column in the above table.

`poster`
: The `poster` is the URL or path to an image which should be shown instead of the audio. (Think of it like an "album" cover: many humans have never seen an LP; for them, an album cover is as much a metaphor as the floppy disk which represents a save button.) The poster can have a play button superimposed on it by the Markua Processor. A Markua Processor can also ignore the poster entirely and just show a generic player for the audio resource. If a Markua Processor is outputting some format where it is known that audio resources are not supported (e.g. "books"), it must choose the poster to use as a replacement for the audio.

`alt`, `caption` and `class`
: These attributes work exactly how they do for images. They apply to the image specified by the `poster` attribute, not to the audio itself.

Since the `alt` is a fallback for if the `poster` image cannot be displayed, the audio has two fallbacks: the `poster` image and then the `alt` text.

When generating HTML, a Markua Processor may add attributes to the audio resource that are not based on the attributes in this list. The supported HTML5 audio attributes are [here](http://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element).

### Local Audio

#### Span

~~~
The talk audio highlights are here: ![](highlights.mp3).
~~~

#### Figure

~~~
The full version of the talk is here:

![Full Talk](talk.m4a)
~~~

### Web Audio

#### Span

~~~
The talk audio highlights are here: ![](http://markua.com/highlights.mp3).
~~~

#### Figure

~~~
The full version of the talk is here:

![Full Talk](http://markua.com/talk.m4a)
~~~

{#code}
## Code

Code can be a local, web or inline resource, just like any other resource, and the same resource syntax applies to code as to all other resources.

A> Markua's origins are in Leanpub Flavoured Markdown, which evolved based on Markdown but for computer programming books. So, everything you need to write a computer programming book is in Markua. In Leanpub Flavoured Markdown we had a special syntax for inserting code samples. It looked like `<<(code/some_code_file.rb)`. In Markua, however, code is just a resource, and that syntax is not supported.

As discussed, code cannot have alt text. It's just text. If any alt text is provided for a code resource, it is ignored.

Markua specifies only one specific file extension, `.txt`, to be associated with the code type. However, Markua Processors must interpret all unspecified file extensions as specifying a resource of type code with a format of `guess`.

{caption: "Resource File Extensions Associated With Code"}
|-----------|------------|--------------------------|
| Extension | `format`   | Description              |
|-----------|------------|--------------------------|
| `.txt`    | `text`     | Monospaced plain text    |
| (other)   | `guess`    | Implementation-dependent |
|-----------|------------|--------------------------|

All code must be formatted as monospaced text by Markua Processors.

The `text` format means to not do any syntax highlighting as well.

The `guess` format is a request for the Markua Processor to guess at the programming language based on the file extension and/or the syntax of the code itself. Then, if the detected language corresponds to a particular programming language which the Markua Processor recognizes, and if the Markua Processor supports syntax highlighting, then it can format the resource as nicely syntax-highlighted code.

Syntax highlighting is optional in Markua Processors. If a Markua Processor does not support syntax highlighting, or if it cannot detect a matching supported programming language, then it must format the code as though the format was `text`--i.e. to format it as unformatted monospaced text.

Besides the `text` and `guess` values of the format attribute, you can also specify the programming language by setting the format attribute to a specific programming language. This is more reliable than `guess`. Unlike other resource types, Markua does not specify the complete set of the values of the `format` attribute--there are so many programming languages in the world, and new ones are added so frequently, that doing so would be impractical.

{#supported_attributes_for_code}
### Supported Attributes for Code

`alt`, `caption` and `class`
: These attributes function as they do for images.

`format`
: For code, the `format` is the name of the programming language. There are two special types of `format` for code baked into Markua: `text` and `guess`. The default value of the format attribute for a code resource inserted as a figure varies based on whether the delimiter is three backticks or three tildes. With three backticks the default format is `guess`, and with three tildes, the default format is `text`. The `guess` format works better for code; the `text` format works better for poetry and for code that you don't want the language guessed at. You can specify any attributes you wish with either delimiter, and specified attributes override default ones. The only reason there are different defaults are to make things easier to type. Programmers refer to such niceties as syntactic sugar.

`line-numbers`
: This determines whether the code sample shows line numbers. Legal values are `true` or `false`. The default value is `false`. Any value other than `true` is interpreted as `false`. Note that a code resource inserted as a span should be a single line of code, so this attribute does not make sense with spans.

`number-from`
: If line numbers are shown, this lets you override the starting number of the line numbers. The default value is `1`.

`crop-start`
: Sometimes it's desirable to only show part of a code resource defined in an external file as the code example. The `crop-start` and `crop-end` attributes let you accomplish this. The `crop-start` attribute defines the line which represents the first line included from the resource. For example, `{crop-start: 10, crop-end: 15, line-numbers: true, number-from: 10}` ensures that lines 10-15 are shown and are numbered as lines 10-15. The default value is 1, which is the first line of the file.

`crop-end`
: This attribute ends the range started with crop-start. The default value of crop-end is to be omitted, which is equivalent to specifying the last line of the file.

### Local Code Resources

#### Span

~~~
Hello in Ruby is a simple ![](hello.rb) statement.
~~~

Note that in this example there can be no text inside the square brackets, since in a span the square brackets are for alt text, and with a code resource alt text is not supported.

#### Figure

Code can be inserted as a figure. In all the following examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

This first figure will be a type of code and a format of `guess`. A Markua Processor which associates `.rb` file extensions with Ruby code will treat this as Ruby code; a Markua Processor which has no association for `.rb` files will treat it as plain text:

~~~
Here's a paragraph before the figure.

![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

That is equivalent to:

~~~
Here's a paragraph before the figure.

{format: guess}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

If you don't want to take chances you can do this:

~~~
Here's a paragraph before the figure.

{format: ruby}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

Finally, note that the caption is optional in all figures:

~~~
Here's a paragraph before the figure.

![](hello.rb)

Here's a paragraph after the figure.
~~~

### Web Code Resources

This is identical to how local code resources work, including the significance of file extensions. The only differences is that the files are on the web.

#### Span

~~~
Hello in Ruby is a simple ![](http://markua.com/hello.rb) statement.
~~~

Note that in this example there can be no text inside the square brackets, since in a span the square brackets are for alt text, and with a code resource alt text is not supported.

#### Figure

~~~
This will be a type of code and a format of `guess` since the file extension is not specified:

![Hello World in Ruby](http://markua.com/hello.rb)

That is equivalent to:

{format: guess}
![Hello World in Ruby](http://markua.com/hello.rb)

If you don't want to take chances you can do this:

{format: ruby}
![Hello World in Ruby](http://markua.com/hello.rb)

Here's a paragraph at the end.
~~~

Note that in the above examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

### Inline Code Resources

Inline code resources are the most flexible and appropriate way to insert code as a span resource, and the most straightforward way to add short code examples as figures.

#### Span

The format of an inline code resource inserted as a span is:

~~~
Yada yada `some code here`optional_format yada yada.
~~~

The optional format specifies the programming language used. If it is not provided, the format defaults to `guess`, as shown in the following examples:

~~~
Hello in Ruby is a `puts "hello"` statement.

Hello in Ruby is a `puts "hello"`guess statement.

Hello in Ruby is a `puts "hello"`ruby statement.

Hello in Ruby is a `puts "hello"`text statement.
~~~

The first and second statement above are functionally identical since the default format of an inline resource with no format specified is `guess`. The third statement forces the format to be `ruby`. The fourth statement forces it to be plain monospaced code with no syntax highlighting.

The syntax of adding inline code resources as spans is identical to the code span syntax of Markdown.

#### Figure

This will be a type of code and a format of `guess` since the format is not specified:

~~~
```
puts "hello"
```
~~~

That is equivalent to:

~~~
```guess
puts "hello"
```
~~~

If you don't want to take chances you can do this:

~~~
```ruby
puts "hello"
```
~~~

If you don't like syntactic sugar you can do:

~~~
{format: ruby}
```
puts "hello"
```
~~~

If you want a figure caption, you can add it to the attribute list with any of the above. For example:

~~~
Some paragraph.

{caption: "Hello World in Ruby"}
```ruby
puts "hello"
```

Some paragraph.
~~~

Note that the syntax for inline code resource figures is similar to the "fenced code blocks" syntax of many Markdown extensions, such as PHP Markdown Extra and GitHub Flavoured Markdown.

A> The "four space indent" method of creating code blocks in Markdown is **NOT** supported in Markua. You cannot create an inline code figure this way. It may be slightly more pleasant to read, but it's obnoxious as hell to write, and it has bad effects on the rest of the specification.

### Typewriter Poetry with Code Resources

If you want to write "typewriter poetry" in the style of e e cummings, in which all the indentation and other whitespace matters, you can accomplish this by inserting a figure as an inline code resource whose format is `text`.

There are three ways to insert such a code resource inline:

1. by using three tildes to insert the inline code resource
2. by specifying the `text` format after the three backticks or three tildes
3. by specifying the `text` format in an attribute list

These three methods are shown next, as a poem is inserted all three ways. Determining the artistic merit of this "poem" is left as an exercise for the reader. Note that in all cases, the inline code resource can have an optional caption.

This use case is why the default format for three backticks is `guess` and the default format for three tildes is `text`: you wouldn't want your poem inadvertently being syntax highlighted like code, and the three backticks plus `text` version does not look very poetic!

#### Using three tildes

```
Here's a paragraph before the poetry.

{caption: "lazy cat"}
~~~
i
  am
      a        cat
            a        l a z y          cat

me   ow
~~~

Here's a paragraph after the poetry.
```

#### Using three backticks plus the `text` format via syntactic sugar

~~~
Here's a paragraph before the poetry.

{caption: "lazy cat"}
```text
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

#### Using three backticks plus the `text` format specified in an attribute list

~~~
Here's a paragraph before the poetry.

{caption: "lazy cat", format: text}
```
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

### Line Wrapping in Code Resources

Code resources should have newlines added by the author to ensure that automatic line wrapping is not relied upon. Markua Processors may wrap lines to ensure that all code is visible on a page, and *may* add continuation characters (like the backslash `\` character) in the output to indicate that a line has been automatically wrapped. However, adding a continuation character is not a requirement.

{#math}
## Math

Math can be a local, web or inline resource, just like any other resource, and the same resource syntax applies to code as to all other resources.

A> Just as with code, in Leanpub Flavoured Markdown we had a special syntax for inserting math. It looked like `{$$}...{/$$}`, which looks nice to people who like LaTeX, and looks like nothing else in Markdown. In Markua, however, math is just another resource, and that LaTeX-inspired syntax for wrapping math resources is not supported.

Math resources can be either LaTeX math or MathML.

{caption: "Resource File Extensions Associated With Math"}
|-----------|------------|---------------|
| Extension | `format`   | Description   |
|-----------|------------|---------------|
| `.tex`    | `latex`    | LaTeX math    |
| `.mathml` | `mathml`   | MathML math   |
|-----------|------------|---------------|

Note that Markua procesors do not need to support either math markup language fully in order to be compliant: if they choose to, they can simply render the text as a code resource of format `text`.

### Supported Attributes for Math

`alt`
: The `alt` is the alt text, to be displayed when the mathematical equations cannot be shown. This can only be provided in square brackets for mathematical equations inserted as spans and only in the attribute list for figures.

`caption` and `class`
: These attributes function as they do for images. (In fact, a Markua Processor may choose to transform the math into an image, for maximum ebook reader compatibility.)

`format`
: For math, the `format` is the name of the syntax used to write the mathematical equations. There are two special types of `format` for math baked into Markua: `tex` for LaTeX math and `mathml` for MathML math.

Since a math resource inserted as a span cannot have its default attributes overridden, when a math resource is inserted as a span, it must be positioned where it is inserted according to the `position: here` default attribute--it cannot be floated and repositioned by Markua processors.

### Local Math Resources

#### Span

~~~
This is ![too large to fit in the alt text](fermat_proof.tex) my proof.
~~~

#### Figure

~~~
Here's a paragraph before the figure.

{alt: "too large to fit in the alt text"}
![Proof of Fermat's Last Theorem](fermat_proof.mathml)

Here's a paragraph after the figure.
~~~

### Web Math Resources

This is identical to how local math resources work, including the significance of file extensions. The only difference is that the files are on the web.

#### Span

~~~
This is ![too large to fit in the alt text](http://markua.com/fermat_proof.mathml) my proof.
~~~

#### Figure

~~~
Here's a paragraph before the figure.

{alt: "too large to fit in the alt text"}
![Proof of Fermat's Last Theorem](http://markua.com/fermat_proof.tex)

Here's a paragraph after the figure.
~~~

Note that in the above examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

### Inline Math Resources

Inline math resources are the most flexible and appropriate way to insert math as a span resource, and the most straightforward way to add short math examples as figures. Both LaTeX and MathML can be inlined either as spans or figures, but only LaTeX is terse enough for it to be practical.

#### Span

The format of an inline math resource inserted as a span is:

~~~
Yada yada `some math here`optional_format yada yada.
~~~

The optional format specifies the math format used. While it's technically optional, it's not optional if you want math: you either need to say `latex` or `mathml`. Otherwise, if the format is not provided, the format defaults to `guess` and the resource is interpreted as code, not math.

~~~
One of the kinematic equations is `d = v_i t + \frac{1}{2} a t^2`latex this one.
~~~

Since these are span elements, LaTeX math will look a lot better than MathML, since it's a lot more terse. However, both are supported.

#### Figure

LaTeX math:

~~~
Here's a paragraph before the figure.

```latex
\left|\sum_{i=1}^n a_ib_i\right|
\le
\left(\sum_{i=1}^n a_i^2\right)^{1/2}
\left(\sum_{i=1}^n b_i^2\right)^{1/2}
```

Here's a paragraph after the figure.
~~~

MathML math:

~~~
Here's an example from [Wikipedia](http://en.wikipedia.org/wiki/MathML):

{type: math, format: mathml}
```
<apply>
  <plus/>
  <apply>
    <times/>
    <ci>a</ci>
    <apply>
      <power/>
      <ci>x</ci>
      <cn>2</cn>
    </apply>
  </apply>
  <apply>
    <times/>
    <ci>b</ci>
    <ci>x</ci>
  </apply>
  <ci>c</ci>
</apply>
```

Here's a paragraph after the figure.
~~~

## Required and Optional Resource Support

Current copyright law makes the use of resources problematic. As such:

* Support for `image`, `audio` and `video` resources is optional in Markua processors, regardless of location.
* Support for web resources is optional in Markua processors, regardless of resource type.
* Support for web resources is not all or nothing--a Markua Processor can support web resources for some resource types but not others.

For example, a Markua Processor could support web resources for code, math and text, but not for images, audio and video. If a Markua Processor does not support a particular type of web resource, it must consider all web resources of to be missing resources at the time of book or document generation, and use fallback resources or alt text if provided.

# Lists

Like Markdown, Markua supports ordered (i.e. numbered) and unordered (i.e. bulleted) lists.

Unlike Markdown, Markua also supports definition lists. Definition lists are discussed in the next section--although they are called "lists", their formatting and function is very different than unordered and ordered lists.

If you are familiar with Markdown, as you read the sections below you will note a number of differences between Markua lists and Markdown lists.

{#unorderedlists}
## Unordered Lists (i.e. Bulleted Lists)

Markua lets you make an unordered list by starting each list item with either an asterisk (`*`) or a hyphen (`-`), followed by 1-4 spaces or 1 tab, followed by text content. You can't mix and match asterisks and hyphens in the same list. Here's how this looks:

You can build a list out of items starting with an asterisk and one space:

~~~
* foo
* bar
* baz
~~~

You can build a list out of items starting with a hyphen and one tab:

~~~
-    one
-    two
-    three
~~~

(My editor converts tabs to spaces, so that's actually 4 spaces, which also works.)

Markdown also lets you use a plus sign (`+`) before each item, but Markua does not. Having three syntaxes is just overkill, so Markua drops the plus--it's far less common than the asterisk and hyphen. This is the same decision made by GitHub Flavored Markdown, which also [supports](https://help.github.com/articles/markdown-basics/) `*` and `-` but not `+`. Markua could have chosen only the asterisk (`*`) or the hyphen (`-`) and only one amount of spaces or tabs after it, but this would be too prescriptive. Markua is as opinionated as possible, but that would have been overkill.

These are the specific rules for unordered lists:

* Start each list item a bullet which is either an asterisk (`*`) or a hyphen (`-`).
* You can't mix and match asterisks and hyphens in the same list.
* Between 1 and 4 spaces or one tab is allowed after each bullet.
* You cannot mix tabs and spaces: if a tab is used after a bullet, tabs must be used after each bullet.
* If spaces are used after each bullet, the same number of spaces must be used after each bullet in the list.
* A varied number of spaces or tabs or a mixture of tabs and spaces does not create an unordered list. Instead, it creates a paragraph with line breaks inside it, which produces break tags in HTML output.
* A single element unordered list is a list: although it is a pretty stupid list, treating it as a literal paragraph starting with an asterisk, plus or hyphen would be even stupider.

In terms of style guidance, the preferred bullet type is the asterisk, and the preferred whitespace after the bullet is one space.

{#ordered_lists}
## Ordered Lists (i.e. Numbered Lists)

Markua defines many more types of ordered list numbering than Markdown.

Despite the fact that all lists actually have an order (otherwise they would not be lists!), Markua is sticking with the HTML terminology for "ordered" vs. "unordered" lists, instead of "numbered" vs. "bulleted" lists. Even though these feel more like programming terms, HTML terminology is so widely understood that using any other terminology is distracting. (Also, since ordered lists support numbering by letters, the term "ordered" is superior to "numbered" in some senses.)

In Markdown, the only type of numbering supported is decimal numbering starting from 1. If you need any more features, you need to use inline HTML. However, since Markua does not support inline HTML, Markua provides more list features.

In Markua, an ordered list can vary the following:

1. Numbering system
2. Numbering direction (ascending or descending)
3. Initial number (or letter, or Roman numeral)

The following choices of numbering system are supported:

1. Decimal numbers
2. Uppercase letters
3. Lowercase letters
4. Uppercase Roman numerals
5. Lowercase Roman numerals

Unlike in Markdown, in Markua **the number that begins the list in the manuscript is the number that begins the list in the output**.

To make an ordered list in Markua, you start one or more consecutive lines with either a consecutive number or the same number (or letter or roman numeral), followed by between 1 and 4 spaces or 1 tab, followed by text content.

Since Markua supports letters and Roman numerals as well as decimal numbers to start lists, the rules about using consecutive numbers or the same number are actually a bit complex.

Note that there are one or more spaces after the period. Unlike with an unordered list, the number of spaces does not need to be the same after each item (since numbers may have 2 or more digits, so a variable number of spaces may be desired to line everything up).

I had really wanted to support parentheses after the number as well as periods, since to me `a)` looks a lot better than `a.` does. However, there's no *good* way to do this in HTML, so I gave up. If you make a lettered list with parentheses, it just turns into a paragraph with a bunch of newlines for the list items--so you basically get what you want, just not using HTML constructs.

This set of examples shows many of the normal use cases of lists with the various numbering systems. For the edge cases, see the next sections.

Ascending decimal numbers starting from 1:

~~~
1. foo
2. bar
3. baz
~~~

Ascending decimal numbers starting from a higher number:

~~~
9.  foo
10. bar
11. baz
~~~

Descending decimal numbers:

~~~
3. foo
2. bar
1. baz
~~~

Identical decimal numbers for the lazy (producing 1, 2, 3):

~~~
1. foo
1. bar
1. baz
~~~

Ascending lowercase letters:

~~~
a. foo
b. bar
c. baz
~~~

Ascending uppercase letters:

~~~
I. foo
J. bar
K. baz
~~~

Ascending uppercase Roman numerals:

~~~
I.   foo
II.  bar
III. baz
~~~

### In Markua, A Single Element Ordered List is Not a List

Markdown has the interesting combination of supporting one element lists and ignoring the number that a list starts with. This means it's possible to inadvertently start a numbered list by beginning any line with a number followed by a period. The example that John Gruber [cites](http://daringfireball.net/projects/markdown/syntax) is the following:

`1986. What a great season.`

This would produce a single element numbered list starting with `1.` -- which in my opinion, is a blatant violation of the Principle of Least Surprise.

Now, in Markua, if we supported single element ordered lists, this would produce a single element numbered list starting with `1986.` -- which would be almost as bad as in Markdown.

(By the way, there is a very gross workaround in Markdown: you prefix the period with a backslash. So, you'd write `1986\. What a great season.` to avoid this.)

But what to do?

The answer is simple: in Markua, **single element ordered lists are not lists**. This is true for ordered lists only -- single element unordered lists and single element definition lists are both lists. (In the case of an unordered list it's stupid, but the alternative is stupider. In the case of a definition list there's actually a legitimate usage of a single element definition list: a single definition.)

To me, the notion of a *list* is something with more than one thing in it. If I have a list of chores to do, there are many of them. If I have one chore to do, I don't call it a list of chores--I call it a chore.

So, in Markua, the automatic creation of an ordered list only happens if you have two or more lines starting with numbers and periods.

This still has some possibly incorrect interpretations, but these will be a lot more rare. This matters: if you get burned by the automatic list creation, and you feel that you have to think about whether you can start a sentence with a number, then writing in Markua will feel more like programming than writing.

This is a microcosm of the difference between Markua and Markdown: since Markdown is a way of producing HTML, it is biased toward producing HTML constructs wherever it is most straightforward to do so. Markua is a way of writing books, and it only produces HTML constructs like lists when it is almost certainly appropriate to do so. So, whereas Markdown tries to make HTML wherever possible, Markua respects what the author wrote, and only substitutes HTML constructs where doing so is lossless in the text (period and parentheses are not equal) and unambiguous (a single element is probably not a 1 element list).

### Ordered List Numbering Rules

A> If you are an author who is just trying to write straightforward Markua, you can just [skip this section](#multi_paragraph_list_items). If you're a programmer, however, you may find it mildly interesting.

There are a number of rules about what does and does not trigger the creation of an ordered list. These rules are designed to help authors stay sane when writing in Markua, and also to help implementors of Markua processors stay sane. In all cases, the first number, letter or Roman numeral is the start of the list numbering. This never changes.

If, because of the correct application of these rules, an ordered list is not created, what happens is that a paragraph is created instead, with a break tag for each single newline. In this instance, the output directly matches the input, including all the numbering.

In theory, Markua supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number, either increasing or decreasing.
2. Every item in the list begins with the same number.

This is not actually quite true.

See, the notion of "consecutive" is easy to explain and to check for decimal numbers, either in increasing or decreasing order. `1, 2, 3, ...`, `456, 457, 458, ...`, or `5, 4, 3` are all easily verified as consecutive, both by humans and computers.

However, Markua also supports ordered lists using uppercase and lowercase alphabetical numbering, as well as uppercase and lowercase Roman numeral numbering, and in increasing or decreasing order.

In the case of alphabetical numbering, checking "consecutive" is harder. It's relatively straightforward for the first 26 items, but then all bets are off. In case you're curious, here is the sequence used in HTML for increasing alphabetical numbering:

`a, b, ..., z, aa, ab, ..., az, ba, bb, ... bz, za, zb, ..., zz, aaa, aab, ..., aaz, aba, abb, ...`

In terms of Roman numerals, it's even worse. I'm sure that someone in a Classics department (or in the NFL) knows the algorithm by heart, but I don't.

So, what are Markua authors and implementors of Markua processors to do?

Markua makes this simpler by specifying the following rules.

Markua *actually* supports creating an ordered list based on a different set of conditions based on the numbering type.

For decimal numbers, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number, either increasing or decreasing.
2. Every item in the list begins with `1.`

For uppercase and lowercase alphabetical numbering, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive letter, followed by a period, and the lettering does not extend past `z.` for lowercase, or `Z.` for uppercase. (This way, implementors of Markua processors don't need to check the `aa`, case, and authors writing in Markua don't need to remember it.)
2. Every item in the list begins with `a.` for lowercase letters or `A.` for uppercase letters.

These rules mean you can't start a list with `aa.` or higher. This is preferable to Markua having many variants of the Markdown `1986.` problem. If you want to write a paragraph starting with "AA.", to write a dramatic statement about either anti-aircraft fire or alcoholism, you would be really surprised to have created a single element list beginning with "AA" instead!

For uppercase and lowercase Roman numeral numbering, Markua actually supports creating an ordered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive Roman numeral, followed by a period, and the lettering does not extend past `xii.` for lowercase Roman numerals or `XII.` for uppercase Roman numerals. To be clear, this means that the only valid consecutive lowercase Roman numerals are `i, ii, iii, iv, v, vi, vii, viii, ix, x, xi, xii`, and that the only valid consecutive uppercase Roman numerals are `I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII`.
2. Every item in the list begins with `i.` for lowercase Roman numerals or `I.` for uppercase Roman numerals.

The combination of the rules for Roman numeral numbering means that you can have an arbitrarily long Roman numeral list starting from `i.` or `I.`, but that implementors of Markua processors don't need to write code to figure out whether `MCMLXXV` is a valid Roman numeral, and what the consecutive Roman numeral sequence after it is.

If you're wondering why I picked `xii` and `XII` for the last consecutive lowercase and uppercase Roman numerals to respect: this is Roman numeral 12, and the main usage of Roman numerals in modern life is in clock faces.

Speaking of clock faces, I have bad news for fans of watches and antique clocks:

* The only supported version of the Roman numeral 4 is the subtractive `iv` (in lowercase) or `IV` (in uppercase); the additive `iiii` or `IIII` form is not supported.
* The only supported version of the Roman numeral 9 is the subtractive `ix` (in lowercase) or `IX` (in uppercase); the additive `viiii` or `VIIII` form is not supported.

It turns out that the question of additive versus subtractive forms of Roman numerals is actually interesting; see [this article](http://mentalfloss.com/article/24578/why-do-some-clocks-use-roman-numeral-iiii) and [this Wikipedia entry](https://en.wikipedia.org/wiki/Roman_numerals) for a starting point.

In Markua, list numbers must **all** either be **consecutive**, given the type of numbering that is used, or **the same as the first number**. Otherwise, the list is interpreted as a paragraph with a bunch of break tags in it, and lines starting with the numbers given. The principle is the following: the numbers which are shown in the manuscript must be the same as those in the output, or the numbers must be clearly intended to be numbered list numbers. Otherwise, a list will not be produced.

If you want to prevent a list from being created with consecutive numbered items separated by single newlines, the backslash escape in front of the period used in Markdown to prevent lists also works in Markua. However, it is needed a lot less often.

{#multi_paragraph_list_items}
## Multi-Paragraph List Items

If lists were simple, they would contain be a bunch of simple one-line list items like:

~~~
* This is simple.
* So is this.
* This too!
~~~

However, in Markdown, list items can contain multiple paragraphs, and it makes sense for Markua to support this. If a list is going to contain list items with multiple paragraphs, then there should be blank lines between each list item.

As with Markdown, every paragraph in a list item after the first one must be indented by four spaces or one tab. This lets the Markua Processor know that the list is not over, but is instead being continued.

The following is legal Markdown and legal Markua:

~~~
Here's a paragraph before the list.

1.  This is the first paragraph in the first list item. Yay!

    This is a second paragraph in the first list item.

2.  The second list item is simple.

3.  The third list item has three paragraphs.
    This is still part of the first paragraph.

    Here's the second paragraph in the third list item.

    Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

Just as with normal non-list-item text, a single newline functions as a forced line break within the list item in question. However, to encourage the text to be lined up nicely in the list item, any leading whitespace after the linebreak is ignored. This is different from the whitespace being preserved after single newlines in paragraphs. That rule exists to support poetry, and if there's one thing that lists are not, it's poetry.

## Nested Lists

Lists can nest lists.

W> TODO_LEANPUB - support nested lists

To do this, simply insert the list nested inside a list item by 2 spaces for each level of nesting.

There is a limit of **THREE** levels of nesting, including the outermost list. In an ebook, you don't have infinite space--especially on phones. You can nest any kind of list inside any kind of list.

This example shows the maximum three levels of nesting:

~~~
* Foo
  1. One
  2. Two
    a. This is 2a
    b. This is 2b
  3. Three
* Bar
  i.   Lorem
  ii.  Ipsum
  iii. Dolor
* Baz
~~~

If you try to nest a fourth level of nesting (or more), the Markua Processor will simply interpret the additional levels as forced newlines and manual indentation.

## Nesting Block Elements in List Items

Nested lists are just an example of nesting block elements inside list items.

Other block elements such as figures can also be inserted nested inside list items. This is true for both single paragraph list items (with no blank lines between them) and multiple-paragraph list items (with a single blank line between each list item).

W> TODO_LEANPUB - support this

### Single-Paragraph List Items

~~~
* Foo
  ```ruby
  puts "hello"
  ```
* Bar
  {alt: "too large to fit in the alt text"}
  ![Proof of Fermat's Last Theorem](fermat_proof.mathml)
* Baz
~~~

In the single paragraph list items case, indenting the block element is optional but recommended.

### Multiple-Paragraph List Items

~~~
* This is paragraph 1 in the first list item.

  ```ruby
  puts "hello"
  ```

  This is paragraph 2 in the first list item.

* This is paragraph 1 in the second list item.

  {alt: "too large to fit in the alt text"}
  ![Proof of Fermat's Last Theorem](fermat_proof.mathml)

  This is paragraph 2 in the second list item.

* Baz
~~~

In the case of multiple paragraph list items, you need to indent the block element by the same four spaces (or one tab) that you use to indent subsequent paragraphs in the list item. Doing this ensures the continuation of the list.

# Definition Lists

Definition lists are supported in Markua. Although [some people](http://meta.stackexchange.com/questions/72395/is-it-possible-to-have-definition-lists-in-markdown) don't see the value in definition lists in HTML, I strongly believe in their value. Specifically, with the rise of mobile and the narrower screen reading experience becoming the new default, I see definition lists as being more important than tables. But instead of just being two columns, the idea of a definition list has actual meaning.

To define a definition list in Markua, use the following syntax:

~~~
term 1
: definition 1

term 2
: definition 2
~~~

There can be one to three spaces after the colon, or one tab.

A definition list can provide multiple definitions for a term:

~~~
term 1
: definition 1a
: definition 1b

term 2
: definition 2
~~~

A single term definition list is a definition list, regardless of how many definitions for the term exist:

~~~
term
: definition
~~~

Finally, like list items, a definition list item can contain newlines and multiple paragraphs. What you do here is indent the subsequent lines by the same amount of space as the initial line. (If you do not indent the subsequent lines, then you're ending the definiton list and just starting a new paragraph.) As with list items, one newline is a forced line break; two newlines is a new paragraph:

~~~
Here's a paragraph before the list.

one
: This is the first paragraph in the first list item. Yay!

  This is a second paragraph in the first list item.

two
: The second list item is simple.

three
: The third list item has three paragraphs.
  This is still part of the first paragraph.

  Here's the second paragraph in the third list item.

  Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

Just as with list items, any leading whitespace after the linebreak is used to continue the definiton list item, and is thus ignored. Like list items, definition list items are not poetry.

W> TODO_LEANPUB - confirm ids work on definition list items

# Tables

Markdown does not specify a table syntax. Since Markdown supports inline HTML, it does not need to--if you want a table, you can simply use an inline HTML table.

Markua does not support inline HTML, so it needs a table syntax. Actually, Markua has *two* table syntaxes: simple tables and complex tables.

Both of them are somewhat annoying to type. However, it's not actually so bad--unless you make columns that are too narrow at first, and then you need to widen them. Also, there will probably be tooling that evolves to help with tables--especially in the more complex cases.

## Simple Tables

[PHP Markdown Extra](https://michelf.ca/projects/php-markdown/extra/#table) defines a pretty good table syntax, which is supported and extended by [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/). So Markua supports this syntax since it is widely used. These tables are called "simple tables" in Markua.

At its most basic, a simple table looks like this:

~~~
Header A   | Header B   | Header C
-----------|------------|-----------
Content A1 | Content B1 | Content C1
Content A2 | Content B2 | Content C2
Content A3 | Content B3 | Content C3
~~~

The headers and the separator row of hyphens (`-`) is required so that Markua can tell that the text is a table.

You can also start and end the columns with pipes:

~~~
| Header A   | Header B   | Header C   |
|------------|------------|------------|
| Content A1 | Content B1 | Content C1 |
| Content A2 | Content B2 | Content C2 |
| Content A3 | Content B3 | Content C3 |
~~~

Finally, you can specify left, center and right alignment of columns with colons in the header separator row. The following columns are left-, center-, and right-aligned respectively:

~~~
| Header A    | Header B     | Header C    |
|:------------|:------------:|------------:|
| Content A1  | Content B1   | Content C1  |
| Content A2  | Content B2   | Content C2  |
| Content A3  | Content B3   | Content C3  |
~~~

Simple tables work fine in most cases, and they are the simplest to type.

## Complex Tables

Complex tables are slightly more effort to type than simple tables. However, they're just as easy to read, and they have more features. These include being able to individually align cells and to specify a cell that spans multiple rows or multiple columns.

At its most basic, a complex table looks like this:

~~~
|============|============|============|
| Header A   | Header B   | Header C   |
|============|============|============|
| Content A1 | Content B1 | Content C1 |
|------------|------------|------------|
| Content A2 | Content B2 | Content C2 |
|------------|------------|------------|
| Content A3 | Content B3 | Content C3 |
|============|============|============|
| Footer A   | Footer B   | Footer C   |
|============|============|============|
~~~

The header is separated from the body cells by a row of `=` signs and `|` characters. Every row of cells is separated by a row of `-` signs and `|` characters. The `|` characters **MUST** line up and **MUST** start and end each line.

My recommended approach is to write the table first, and then copy and paste the row separators. If you get the column widths wrong, updating row separators is a headache, and you'll end up copying and pasting them anyway.

You can also specify left, center and right alignment of columns with colons in the header separator row, just as with simple tables. The following columns are left-, center-, and right-aligned respectively:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Content A1  | Content B1   | Content C1  |
|-------------|--------------|-------------|
| Content A2  | Content B2   | Content C2  |
|-------------|--------------|-------------|
| Content A3  | Content B3   | Content C3  |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can have more than one row of content in cells, and there is no ambiguity since each row of cells is separated with a row of `-` signs and `|` characters:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Content A1  | Content B1   | Content C1  |
| is really   | is longer    |             |
| really      |              |             |
| long        |              |             |
|-------------|--------------|-------------|
| Content A2  | Content B2   | Content C2  |
|-------------|--------------|-------------|
| Content A3  | Content B3   | Content C3  |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can specify a column span just by skipping a `|` in the appropriate place:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Content A1 and B1 Merged   | Content C1  |
|-------------|--------------|-------------|
| Content A2  | Content B2   | Content C2  |
|-------------|--------------|-------------|
| Content A3  | Content B3   | Content C3  |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can specify a row span just by skipping a part-row of `-` signs in the appropriate place:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Content A1  | Content B1   | Content C1  |
| and A2      |--------------|-------------|
| merged      | Content B2   | Content C2  |
|-------------|--------------|-------------|
| Content A3  | Content B3   | Content C3  |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can also individually align cells with colons in the `-` part-row **above** them. This alignment overrides any alignment already on the column, and it works for merged cells too:

~~~
|=============|===============|=============|
| Header A    | Header B      | Header C    |
|:============|:=============:|============:|
| Content A1 and B1 Merged    | Content C1  |
|------------:|:--------------|-------------|
| Content A2  | Content B2    | Content C2  |
|:-----------:| and B3 merged |-------------|
| Content A3  |               | Content C3  |
|=============|===============|=============|
| Footer A    | Footer B      | Footer C    |
|=============|===============|=============|
~~~

In that table, column A is left-aligned, column B is center-aligned and column C is right-aligned. However, cell A2 is right-aligned, cell A3 is center-aligned and merged cell B2 and B3 is left-aligned.

## Tables Can Have Captions and Other Attributes

Regardless of whether they are simple or complex, tables can have captions and other attributes which are specified in an attribute list. The syntax for the attribute list is identical to that used for figures--but tables are not figures, they are tables.

This simple table has a caption:

~~~
{caption: "A Simple Table"}
| Header A   | Header B   | Header C   |
|------------|------------|------------|
| Content A1 | Content B1 | Content C1 |
| Content A2 | Content B2 | Content C2 |
| Content A3 | Content B3 | Content C3 |
~~~

This complex table has a caption:

~~~
{caption: "A Complex Table"}
|=============|===============|=============|
| Header A    | Header B      | Header C    |
|:============|:=============:|============:|
| Content A1 and B1 Merged    | Content C1  |
|------------:|:--------------|-------------|
| Content A2  | Content B2    | Content C2  |
|:-----------:| and B3 merged |-------------|
| Content A3  |               | Content C3  |
|=============|===============|=============|
| Footer A    | Footer B      | Footer C    |
|=============|===============|=============|
~~~

## Supported Attributes for Tables

`caption`
: The `caption` is the table caption.

`class`
: Just as with images, the `class` can be used by Markua Processors to provide the approrpiate styling. (In fact, a Markua Processor may choose to transform the table into an image, for maximum ebook reader compatibility.)

# Block Elements

We've already seen many examples of block elements in this specification, including paragraphs, headings and figures. These are the rest of them...

## Scene Breaks

In fiction, scene breaks are sometimes added between paragraphs in a chapter to denote a break in context.

To make a scene break, create a line which has only hyphens, asterisks or underscores on it, and which has at least three of them. There may be whitespace between the hyphens or asterisks. Scene breaks must have a blank line above them and below them.

Example:

~~~
This is before the first scene break.

* * *

This is after the first scene break and before the second.

---

This is after the second scene break.
~~~

Markua Processors can take great liberties in how they output scene breaks. For example, scene breaks can be displayed as a few centered asterisks, an image, or just a blank line, depending on whether the book is fiction or another type of book. Scene breaks can also be displayed as the `hr` element in HTML, but that is not a requirement.

## Blockquotes (`>`)

Blockquotes in Markdown are created by prefacing lines with `> `, i.e. a greater than character followed by a space:

~~~
This is the first paragraph.

> This is a blockquote.
>
> It is outside the paragraphs.

This is the second paragraph.
~~~

Blockquotes in Markua are created in one of two ways:

1. By prefacing lines with `> `, i.e. a greater than character followed by a space.
2. By wrapping the blockquote in `{blockquote}` ... `{/blockquote}`

Option #1 is preferable for short quotes; option #2 is easier on authors for really long quotes.

Like figures and tables, blockquotes can be inserted in the middle of a paragraph or as a sibling of it.

For non-programmers: I'm calling these things "blockquotes", not "block quotes", since their origin is in Markdown [blockquotes](http://daringfireball.net/projects/markdown/syntax#blockquote).

These Markua blockquotes are siblings of the paragraphs:

~~~
This is the first paragraph.

> This is a blockquote.
>
> It is outside the paragraphs.

This is the second paragraph.

{blockquote}
This is a blockquote.

It is outside the paragraphs.
{/blockquote}

This is the third paragraph.
~~~

These Markua blockquotes are nested in the paragraph:

~~~
This is the first paragraph.

This is the second paragraph.
> This is a blockquote
>
> It is inside the second paragraph.
This is part of the second paragraph.
{blockquote}
This is a blockquote.

It is inside the second paragraph.
{/blockquote}
This is part of the second paragraph.

This is the third paragraph.
~~~

A blockquote can contain other block-level elements, most commonly paragraphs.

If you are using the `{blockquote}` ... `{/blockquote}` approach, this is trivial: just pretend you're in a normal paragraph, and the syntax is the same.

If you are using the Markdown approach of `>`, then to start a new block level element within a blockquote, just put a line starting with a `>` followed by a space, followed by the block level element. It is equivalent to placing a `>` and a space in front of every line of the paragraphs.

Blockquotes can be multi-paragraph. To create a multi-paragraph blockquote, you need to separate each paragraph with a line containing a `>` and (optionally) whitespace.

In Markdown, a single newline inside a blockquote (where both lines are preceded by a `>` and a space) adds a single space. In Markua, however, a single newline inside a blockquote adds a forced line break, which produces a `<br/>` in HTML. This is identical to how single newlines inside a normal Markua paragraph function. This is discussed at length in the [Single Newlines](#single_newlines) section earlier. Note that it means you **cannot** manually wrap blockquotes to make them look nicer. Manually wrapping blockquotes is tedious and discourages editing of your own work. If you have really long blockquotes which span multiple paragraphs, the `{blockquote}` syntax is more pleasant to write in.

If a blockquote contains headings, these headings may be formatted by a Markua Processor differently than normal headings. Finally, if a Markua Processor is automatically generating a [Table of Contents](#toc) from chapter and section headings, any headings inside blockquotes should be ignored.

## Asides (`A>`)

Since Markua is for writing books, including technical books, it needs not just a syntax for blockquotes--it also needs a syntax for asides, as well as for blurbs and callouts. These syntaxes are very similar to the Markua syntax for blockquotes. Like blockquotes, any headings inside asides, blurbs and callouts do not show up in a Table of Contents (if one is present), and they can also be formatted differently by Markua Processors.

We will consider asides first.

Asides are typically short or long notes in books which are tangential to the main idea--sort of like footnotes, but in the body text itself. In technical books, quite often they are formatted in a box. Asides can span multiple pages.

The syntaxes for asides are very similar to blockquotes:

1. By prefacing lines with `A> `, i.e. an A, then a greater than character, then a space.
2. By wrapping the aside in `{aside}` ... `{/aside}`

Option #1 is preferable for short asides; option #2 is easier on authors for really long asides.

Like blockquotes, asides can be siblings of paragraphs or nested in them.

Here's a short aside:

~~~
A> This is a short aside.
~~~

Here's a longer aside, which also contains a heading:

~~~
A> # A Longer Aside
A>
A> This is a longer aside.
A>
A> It can have multiple paragraphs.
A>
A> The `A> ` stuff can get tedious after a while.
A>
A> This is why the `{aside}` syntax exists.
~~~

Here's a longer aside using the `{aside}` syntax, which also contains a heading:

~~~
{aside}
# A Note About Asides

This is a longer aside.

It can have multiple paragraphs.

Asides can also have headings, like this one does.

Multi-paragraph asides are more pleasant using this syntax.
{/aside}
~~~

A> Do not confuse the syntax for asides, blurbs and callouts with an attribute list. They are not attribute lists.

## Blurbs (`B>`)

Blurbs are like asides, but shorter. A blurb cannot span multiple pages. A blurb can contain headings.

The syntaxes for blurbs are very similar to asides:

1. By prefacing lines with `B> `, i.e. a B, then a greater than character, then a space.
2. By wrapping the blurb in `{blurb}` ... `{/blurb}`

Examples:

~~~
B> This is a short blurb.
~~~

~~~
B> # A Longer Blurb
B>
B> This is a longer blurb.
B>
B> It can have multiple paragraphs.
~~~

~~~
{blurb}
#A Longer Blurb

This is a longer blurb.

It can have multiple paragraphs.
{/blurb}
~~~

A> Blurbs are the better-named equivalent of the `G>` "generic boxes" of Leanpub Flavoured Markdown.

### Supported Attributes for Blurbs

Blurbs also have support for an attribute list, which can contain a `class` attribute as well as other implementation-specific "extension attributes".

#### Blurb `class` Types

Markua has its origin in Leanpub Flavoured Markdown, and Leanpub has its origin in authoring computer programming books.

In computer programming books, there are a number of blurb types which are a defacto standard:

* `discussion`
* `error`
* `exercise`
* `information`
* `question`
* `tip`
* `warning`

These blurb types can be set on a blurb as its `class` attribute. A Markua Processor can optionally style these blurbs appropriately based on the class, for example by adding custom icons for each class of blurb.

Here's how this looks with the `B> ` syntax:

~~~
{class: warning}
B> This is a warning!
~~~

Here's how this looks with the `{blurb}` syntax:

~~~
{class: warning}
{blurb}
This is a warning!
{/blurb}
~~~

The attribute list must precede the `{blurb}` with no blank line between it.

### Syntactic Sugar for Blurb Classes: `D>`, `E>`, `I>`, `Q>`, `T>`, `W>`, `X>`

Having to constantly type `{class: warning}` in a computer programming book with a number of warnings would get tedious, as would any of the other blurb classes listed above.

So, Markua defines a standard shorthand syntax for these classes of blurbs. With this syntax, you use a different letter than `B` in the `B>`, to create a blurb with the appropriate `class`.

These are the syntactic sugar values you can use:

| Sugar | Equivalent To a B> With |
|-------|-------------------------|
| `D>`  | `{class: discussion}`   |
| `E>`  | `{class: error}`        |
| `I>`  | `{class: information}`  |
| `Q>`  | `{class: question}`     |
| `T>`  | `{class: tip}`          |
| `W>`  | `{class: warning}`      |
| `X>`  | `{class: exercise}`     |

Examples:

~~~
D> This is a discussion blurb.

E> This is an error blurb.

I> This is an information blurb.

Q> This is a question blurb.

T> This is a tip blurb.

W> This is a warning blurb.

X> This is an exercise blurb.
~~~

These are equivalent to:

~~~
{class: discussion}
This is a discussion blurb.

{class: error}
This is an error blurb.

{class: information}
This is an information blurb.

{class: question}
This is a question blurb.

{class: tip}
This is a tip blurb.

{class: warning}
This is a warning blurb.

{class: exercise}
This is an exercise blurb.
~~~

Note that nothing in this section defines what a Markua Processor must *do* with the given class of blurb. A Markua Processor is free to ignore the `class` entirely. Or it can do something it considers appropriate--Leanpub, for example, uses it to add an appropriate icon from [Font Awesome](https://fortawesome.github.io/Font-Awesome/) at the left of the blurb.

### Using Extension Attributes on Blurbs to add `icon` Support

Markua Processors must ignore any attributes which they do not understand.

Because of this, Markua attribute lists can contain any number of extension attributes. An extension attribute is an attribute which is not defined in the Markua specification.

The `icon` attribute on blurbs is an example of extension attributes.

Markua does not specify that a blurb must support an `icon` attribute, or what it would mean if it did. However, Leanpub understands an `icon` attribute to reference an icon from Font Awesome. The value of this attribute is assumed to be the name of an icon in Font Awesome, without the `fa-` prefix.  So, in Leanpub, you can do this:

~~~
{icon: car}
B> You can't spell carbon without it!

{icon: leanpub}
B> Yes, we're in Font Awesome!

{icon: github}
B> So is GitHub, of course. Unicorns.
~~~

In Leanpub, this will produce a nice icon of a car, using the Font Awesome icon. In a Markua implementation that does not understand the icon attribute, nothing will be generated for that attribute -- it will be functionally equivalent to the attribute not being present.

Let's see whether the Markua processor that produced this document understands the `icon` attribute:

{icon: car}
B> Car. You can't spell carbon without it!

{icon: leanpub}
B> Leanpub. Yes, we're in Font Awesome!

{icon: github}
B> So is GitHub, of course. Unicorns.

## Callouts (C>)

Callouts are essentially blurbs that float.

The main difference between callouts and blubs or asides is that callouts can be freely and creatively positioned by the Markua Processor near the position in the manuscript it was defined. Asides and blurbs must be positioned exactly at the manuscript position. A callout can have page breaks in it, but shouldn't if possible.

The other difference between callouts and blurbs is that like asides, callouts don't support `class` or `icon` (or any) attributes.

The syntaxes for callouts are very similar to blurbs:

1. By prefacing lines with `C> `, i.e. a C, then a greater than character, then a space.
2. By wrapping the callout in `{callout}` ... `{/callout}`

Examples:

~~~
C> This is a short callout.
~~~

~~~
C> # A Longer Callout
C>
C> This is a longer callout.
C>
C> It can have multiple paragraphs.
~~~

~~~
{callout}
# A Longer Callout

This is a longer callout.

It can have multiple paragraphs.
{/callout}
~~~

Finally: I hate callouts, and so do Scott and Len. They ruin the flow of the text, typically by taking the best line in an article and making it into a stupid graphic which essentially says "don't think; tweet this." But, that said, they're a thing, and Markua supports them.

W> TODO_LEANPUB - make C> be callout not center in Markua.

{#inserting_into_paras}
## Inserting Block Elements Inside Paragraphs

In Markdown, lists and other block elements cannot be nested inside a paragraph. Instead, they all function like top-level siblings to a paragraph. This makes sense since Markdown is a way of producing HTML, and in HTML5 the W3C has [told anyone who wants to embed a list inside a paragraph to go pound sand](http://www.w3.org/TR/html5/grouping-content.html#the-p-element):

> "The solution is to realise that a paragraph, in HTML terms, is not a logical concept, but a structural one. In the fantastic example above, there are actually five paragraphs as defined by this specification: one before the list, one for each bullet, and one after the list."

So, basically, you can't embed a `<ul>` or `<ol>` inside a `<p>` tag in HTML5. Since Markdown is a way of producing HTML, you can't do it in Markdown either.

In Markdown, a block element like a list or figure is a sibling of the paragraphs before or after it:

~~~
This is paragraph one.

* this is a
* sibling of
* paragraphs one and two

This is paragraph two.
~~~

Markua supports this method of inserting block elements.

However, Markua is more than just a way of producing HTML. Markua is a way of authoring books. HTML is just one of the output formats of Markua. And in books, there is a long history of embedding lists, code samples and figures in the middle of a paragraph--not in a separate top-level element, in the actual middle of the paragraph. So, Markua supports this too.

Many block elements such as lists and figures can also be inserted nested in a paragraph. The way this is done is to add single newlines instead of blank lines.

This example shows a list nested in the middle of a paragraph:

~~~
This is paragraph one.

This sentence is in paragraph two.
* this list is
* part of
* paragraph two
This sentence is also in paragraph two.

This is paragraph three.
~~~

This example shows a figure which is an inline code resource nested in the middle of a paragraph:

~~~
This is paragraph one.

This sentence is in paragraph two.
```ruby
puts "hello world"
```
This sentence is also in paragraph two.

This is paragraph three.
~~~

This example shows a figure which is a local code resource nested in the middle of a paragraph:

~~~
This is paragraph one.

This sentence is in paragraph two.
{format: ruby}
![Hello, World](hello.rb)
This sentence is also in paragraph two.

This is paragraph three.
~~~

This example shows figures which are local or web image resources nested in the middle of paragraphs. Note that as with all figures, the square bracket text in both cases is the figure caption (not alt text):

~~~
This is paragraph one.

This sentence is in paragraph two.
![A Piece of Cake](cake.jpg)
This sentence is also in paragraph two.

This sentence is in paragraph three.
{alt: "a slice of chocolate cake"}
![A Piece of Cake](http://markua.com/cake.jpg)
This sentence is also in paragraph three.

This is paragraph four.
~~~

It is possible to insert a block element as the last part of a paragraph by adding a single newline before it, but a blank line after it:

~~~
This is paragraph one.

This sentence is in paragraph two.
* this list is
* part of
* paragraph two

This is paragraph three.
~~~

This works for most block elements, like lists, figures and tables. It does **NOT** work for definition lists, since those rely on blank lines in between elements.

# Span Elements

We've already seen many examples of span elements in this specification, especially in the resources section showing resources inserted as spans. These are the rest of them...

## Links

Markua's hyperlink support is a subset of that of Markdown. The **inline** link syntax is supported, as is the **automatic link** shortcut. The reference link syntax and the implicit link name shortcuts are **NOT** supported.

Markdown is a way of writing HTML designed by bloggers, and links are so plentiful in that medium that it makes some sense to support four syntaxes to create links. In ebooks, however, links are not as prevalent, so it makes sense to be opinionated here. Furthermore, in something as large as a book, the potential for id collisions in link definitions using the reference link syntax is a lot higher than in a blog post.

### Inline Links

The normal way to create a link is as follows:

~~~
[link text](absolute_url)
~~~

In Markdown, the URL can be either absolute (starting with `http://` or `https://`) or relative (just referring to a path like /foo/bar.html), since relative URLs can make sense when writing blog posts which live on web servers. In Markua, however, all URLs must be absolute.

Example:

~~~
Markua was developed at [Leanpub](http://leanpub.com).
~~~

### Automatic Links

To create a link where the text displayed for the link text is the URL itself, the automatic link syntax can be used. In this syntax, an absolute URL is enclosed in angle brackets.

~~~
Some text <absolute_url> some text.
~~~

Example:

~~~
Markua was developed at <http://leanpub.com>.
~~~

## Explicitly Creating Spans with `[`...`]`

Surrounding text in square brackets can be useful not just for giving it a URL to link to. If you wish to add attributes to an arbitrary span of text, you can create an arbitrary span of text using square brackets and then add an attribute list immediately afterward:

~~~
My friend said [bonjour mon ami]{lang: fr} to me.
~~~

With the attribute I have indicated that the bonjour is a French word. So, if the Markua processor uses a different font for French, it can do so.

This is a contrived example, but it makes a lot more sense with intermixing right-to-left languages like Hebrew and Arabic with left-to-right languages. In those cases, bad output can result if a Markua Processor does not realize it needs to reverse directions and switch fonts.

You can use any attribute list on this span, and you can also just use the id syntactic sugar `{#theid}` on this span. The most common use cases are for `id`s, index entries and language overrides.

### Sometimes a Square Bracket is Just a Square Bracket

If there are no round brackets or curly braces immediately after some text in square brackets, the text in square brackets is just that: text in square brackets. In this case, the square brackets are output as normal text.

This is useful when you want to [sic.] something, etc.

## Footnotes

Books often have footnotes.

To add a footnote, you insert a footnote tag using square brackets, a caret and the tag, like this:

~~~
This has a footnote[^thenote].
~~~

Then, you define the footnote later in the document, using the same square brackets, caret and tag, followed by a colon, a space and the footnote definition:

~~~
[^thenote]: This is the footnote content.
~~~

If you wish to write multiple paragraphs in the footnote, you must indent the subsequent paragraphs by four spaces or one tab:

~~~
This has a footnote[^thenote].

Here is some unrelated text.

[^thenote]: This is the first paragraph of footnote content.

    This is the second paragraph of footnote content.

Here is some more unrelated text.
~~~

Whether the numbering of footnotes restarts every chapter is something that can be specified by the [`restart-footnote-numbering`](#restart-footnote-numbering) setting.

## Endnotes

Books often have endnotes as well. Sometimes these are instead of footnotes, but other times, these are in addition to footnotes. So, it makes sense for Markua to define separate syntaxes for both, rather than just defining one "footnote or endnote" syntax and letting the author pick whether the notes are footnotes or endnotes via a global setting.

To add an endnote, you insert an endnote tag using square brackets, two carets and the tag, like this:

~~~
This has an endnote[^^thenote].
~~~

Endnotes are like footnotes, but happier.

Then, you define the endnote later in the document, using the same square brackets, two carets and tag, followed by a colon, a space and the endnote definition:

~~~
[^^thenote]: This is the endnote content.
~~~

Just as with a footnote, if you wish to write multiple paragraphs in the endnote, you must indent the subsequent paragraphs by four spaces or one tab.

Whether the numbering of endnotes restarts every chapter is something that can be specified by the [`restart-endnote-numbering`](#restart-endnote-numbering) setting.

## Crosslinks and ids

There are two parts to making a crosslink.

1. Define an id.
2. Reference that id with a crosslink.

### Defining an id

There are two ways to define an id:

1. Using an id attribute `{id: some-id}` in an attribute list which can contain other attributes.
2. Using a shorter "syntactic sugar" approach when the id is by itself: `{#some-id}`

The shorter approach is preferred. The main reason the `{id: some-id}` syntax is supported is that it allows it to be added in with other attributes in a larger attribute list. You **CANNOT** add the `{#some-id}` to an attribute list.

In terms of the value of an `id`, it has some special restrictions:

1. The first character in the `id` has to be a lowercase or uppercase letter, i.e. `[a-zA-Z]` if you think in regular expressions.
2. The remaining characters in the `id` have to be a lowercase or uppercase letter or a digit or a hyphen (-) or an underscore (_).
3. You can only define an `id` value once in an entire Markua document, even one that is split over multiple files.

These restrictions ensure that your `id`s can then be linked to by a crosslink from anywhere in the Markua document.

The id needs to be defined on either a block or span element.

A> If an id is defined with an invalid name, the Markua Processor must ignore it and should provide a warning in the list of warnings it produces when generating the document.

#### Defining an id on a Block Element

To define an id on a block element like a paragraph, figure, heading or even a definition list item, you simply stick the id definition on a line above the start of the block element.

Here's how to use the attribute list syntax to define an id attribute:

~~~
{id: some-id}
This is a paragraph with the id of `some-id`.
~~~

Here's how to use the shorter "syntactic sugar" approach to define an id attribute:

~~~
{#some-id}
This is a paragraph with the id of `some-id`.
~~~

#### Defining an id on a Span Element

To define an id on a span element you simply add the id definition immediately after the span element.

Here's how to use the attribute list syntax to define an id attribute on a span elemnet:

~~~
The word Markua{id: markua} has an id.

Leanpub is based in **Victoria, BC, Canada**{id: victoria}.
~~~

Here's how to use the shorter "syntactic sugar" approach to define an id attribute:

~~~
The word Markua{#markua} has an id.

Leanpub is based in **Victoria, BC, Canada**{#victoria}.
~~~

Here's how to define an id on a custom span:

~~~
The [quick sly fox]{#quick_sly} jumped over the lazy dogs.
~~~

If you want to define an id on a span while also defining other attributes like index entries, the `id:` syntax must be used in a full attribute list:

~~~
The [quick sly fox]{id: quick_sly, i: "Fox, Sly and Quick"} jumped over the lazy dogs.
~~~

### Referencing an `id` With a Crosslink

Regardless of how you defined the id, you then link to it to create a crosslink. To do this, you use the `#` character and the id in a link:

~~~
[link text](#some-id)
~~~

This syntax is intended to be reminiscent of HTML anchor tags, not of `h1` titles in Markua.

Note that order of definition and use does not matter: crosslinks will work regardless of whether the `id` is defined before or after the use of it.

### Rules for `id`s and Crosslinks

* If a Markua document contains duplicate `id` attribute values, the **first** one is used and the subsequent ones are ignored. A Markua Processor should output a warning about duplicate `id`s.
* Crosslinks that reference an unused `id` may either be created as a (broken, non-functional) link or be created as normal text (not a link) by a Markua Processor. The Markua Processor may also output a warning about this somewhere, but not in the actual document text itself.

### Referencing Chapter, Section and Figure Heading Names and Numbers in Crosslinks

Chapters, sections and figures with captions often have two useful properties for writers:

1. A name which is often short and useful to reference.
2. A number, if numbering is turned on.

Whether the numbers exist is determined by the `number-chapters`, `number-parts` and `number-figures` attributes.

Here's how these references to titles and numbers work:

* `#t` is for "title"
* `#n` is for "number"
* `#d` is for "description" (e.g. "Figure", "Chapter", "Section")
* `#f` is for "full title"

So, for "Figure 8.2: Anatomy of a Squirrel", these are:

* `#t` is "Anatomy of a Squirrel"
* `#n` is "8.2"
* `#d` is "Figure"
* `#f` is "Figure 8.2: Anatomy of a Squirrel"

Note that in this example, "Anatomy of a Squirrel" was typed by the author, whereas "Figure 8.2: " was generated by the Markua Processor. It does not matter; both can be referenced.

Also, note that regardless of section level, sections referenced in `#d` or `#f` are all called "Section" (not "Sub-Section", "Sub-Sub-Section", etc.)

The expectation is that `#f` will be used by authors who don't mind verbosity, and #t and #n will be used by authors who prefer control and brevity. The #d is for very lazy authors who like saving keystrokes and/or who don't know whether their publisher will call the code samples "Listing", "Example" or some other word and want to protect themselves against extra work.

The `code-sample-names`, `figure-names` and `table-names` settings control the words used to name things.

Examples:

~~~
This is discussed in [section #n, #t](#crosslinks).

This is discussed in [#f](#crosslinks).

This is discussed in a [#d](#crosslinks) above.

See [chapter #n](#span-elements), which is the best chapter in this book.

This is in figure [#n](#fancy-diagram), arguably the fanciest diagram in this document.
~~~

A> The only way to reference the title and numbers is in crosslinks. There's no syntax to do so without creating a crosslink--a crosslink is more helpful, since it is clickable, and adding another syntax simply to be less helpful to the reader is a bad idea. Markua has enough syntax as it is.

Notes:

* Figures, chapters, code samples, etc all have implicit numbering. So, #n always works even if numbering is off. However, you will confuse readers if you refer to numbering they cannot see.
* If numbering is off, the `#f` will not include either the `#d` or `#n` parts: it will be "Anatomy of a Squirrel" not "Figure 8.2: Anatomy of a Squirrel".

## Soft hyphen

In certain rare situations, it's desirable to be able to give hints to a Markua Processor about where hypenation can be done.

This attribute makes us sad. However, it's a nod to reality. Hopefully this attribute is never used by authors writing the first draft of anything.

To insert a soft hyphen, used a backslash followed by a hyphen:

Example:

~~~
My name is Rumpel\-stiltskin.
~~~

Soft hyphens are not displayed in HTML but a `&shy;` entity is output.

# Metadata

{#attributes}
## Attributes

Attributes are used to do everything from specify the language of code blocks, add ids for crosslinkng and even support extensions to Markua. We have already seen attributes throughout the specification in the attribute lists we have encountered.

### Attribute List Format

An attribute list is one or more key-value, comma-separated pairs:

`{key_one: value1, key_two: value_two, key_three: "value three!", key_four: true, key_five: 0, key_six: 3.14}`

Note that you can skip the space between the colon and the value: the following `{format: ruby}` and `{format:ruby}` both work. However, for consistency I recommend always adding a space.

An attribute list can be inserted into a Markua document in one of three ways:

1. Immediately above a block element (e.g. heading, figure, etc), with one newline separating it from the block element.
2. Immediately after a span element (e.g. a word, italicized phrase, etc), with no spaces separating it from the span element.
3. On a line by itself, with one blank line above and below it. In this format, the attribute list contains [directives](#directives).

Regarding #2 and #3: Any line outside of a code resource which starts with an opening curly brace `{` and ends with a closing curly brace `}` is assumed to be an attribute list, and will not be output by a Markua processor. If you want to start a line with a literal opening curly brace `{` you need to preface it with a backslash (`\`).

### Attribute Keys

The keys of attributes must consist exclusively of lowercase letters and underscores (`_`). (For you programmers, this is [`a-z_`].)

If a key is duplicated in an attribute list, the first key value is used and subsequent ones are ignored. A Markua Processor should add a warning in its list of warnings, which are *not* output in the ouptut itself.

### Attribute Value Types

Attributes are typed as `boolean`, `integer`, `float` or `text`. Most attributes are `text`.

Every attribute in Markua has a default.

Here's how attribute values are interpreted:

`boolean`
: The values `true` or `false` are boolean values. Unless otherwise specified by the attribute itself, the default value of a boolean attribute is `false`. Any value other than `true` is interpreted as `false`.

`integer`
: Any number which does not contain a decimal point is interpreted as an integer. Unless otherwise specified by the attribute itself, the default value of an integer is 0.

`float`
: Any number which contains a decimal point is interpreted as a float. If an attribute is a float, it can accept attribute values that are integers as well. (You're not required to type 0.0 for 0.) Unless otherwise specified by the attribute itself, the default value of a float is 0.

`text`
: Any value other than `true`, `false` or a number is text. A text attribute value must be enclosed in quotes unless every character in it is a lowercase letter, uppercase letter, number, hyphen (`-`) or underscore (`_`). (For you programmers, this is [`a-zA-Z0-9_-`].)

Only text attribute values can be enclosed in quotation marks.

If a text attribute value contains a quote, it must be "escaped" with a backslash: e.g. `{caption: "\"Fresh\" Fish"}`

A> Note that almost all attributes in Markua are text attributes which have an enumeration of legal values. However, because of Markua's extension attributes syntax, it makes sense to provide basic types so that people can be creative without having to deal with parsing strings everywhere.

### `id` Attributes

As previously discussed, there is special syntactic sugar for ids: `{#foo}` is equivalent to `{id: foo}`. However, ids are just attributes.

{#extension-attributes}
### Extension Attributes

Markua Processors must silently ignore any attributes which they do not understand. This is true whether the attributes are inserted in an attribute list attached to a span, block or even in free-floating directives.

Because of this, Markua attribute lists can contain any number of extension attributes. An extension attribute is an attribute which is not defined in the Markua specification.

This encourages competition in the Markua ecosystem, while ensuring that Markua implementations do not choke on Markua input which goes beyond their capabilities.

Extension attributes go far beyond adding icons to blurbs: they allow for specialized uses of Markua. Since CSS is so powerful, with creative uses of custom attributes and custom CSS, Markua documents can be transformed. Some obvious uses of extension attributes include adding CSS classes which can then be styled to set fonts, adding custom types to figures for things like lemmas and theorems, etc.

This ensures that new attributes can be added to future versions of Markua without a negative effect on older Markua implementations. It also ensures that new versions of Markua can simply stop supporting attributes defined in this version of Markua without needing to specify anything special.

## Index Entries

Markua supports adding index entries via the attribute list syntax. Index entries let authors or indexers produce professional-looking indexes in Markua books.

Index entries can either be attached to block or span elements using the same attribute list syntax. In fact, index entries can just be added as part of a larger attribute list.

The actual syntax of what the value of an index entry looks like is [inspired by LaTeX](https://en.wikibooks.org/wiki/LaTeX/Indexing).

The key of an index entry is `i`, for index.

In its simplest form, an index entry is simply `{i: "hello"}`. Like any attribute list, you don't need a space between the colon and the quote--you can also do `{i:"hello"}`.

These are the various formats of an index entry:

~~~
{i: hello}
{i: "hello"}
{i: "Armstrong, Peter"}
{i: "Yahoo\!"}
{i: "*hello*"}
{i: "**hello**"}
{i: "hello!Peter"}
{i: "hello!*Peter*"}
{i: "hello!**Peter**"}
{i: "Peter|see{i:'hello'}"}
{i: "Jen|seealso{i:'Jenny'}"}
~~~

Here's what they do:

`{i: hello}`
: Adds an index entry for `hello`. If an index entry has no punctuation or formatting then it does not need quotes.

`{i: "hello"}`
: Adds an index entry for `hello`. Quotes are always fine to use, even when not required.

`{i: "Armstrong, Peter"}`
: Adds an index entry for `Armstrong, Peter`. The quotes are always omitted. Their function is to allow things like exclamation marks and other punctuation to be added without fear, in case you don't feel like learning which punctuation is safe.

`{i: "Yahoo\!"}`
: Adds an index entry for `Yahoo!`. Note that the exclamation mark must be backslash-escaped because `!` is a delimiter otherwise. The `|`, `{`, `}` and `\` characters also must be backslash-escaped.

`{i: "*hello*"}`
: Adds an index entry for `hello`, with `hello` in italics.

`{i: "**hello**"}`
: Adds an index entry for `hello`, with `hello` in bold.

`{i: "hello!Peter"}`
: Adds an index entry for `Peter` which is a sub-entry of `hello`.

`{i: "hello!*Peter*"}`
: Adds an index entry for `Peter` (with *Peter* in emphasis) which is a sub-entry of `hello`. Note that this cannot be combined with a see or seealso (the | syntax).

`{i: "hello!**Peter**"}`
: Adds an index entry for `Peter` (with **Peter** in strong emphasis) which is a sub-entry of `hello`. Note that this cannot be combined with a see or seealso (the | syntax).

`{i: "Peter|see{i:'hello'}"}`
: Adds an index entry for `Peter`, which references the index entry `hello` with the equivalent of "see" in the language of the book. Note that this cannot be combined with a sub-entry (the ! syntax).

`{i: "Jen|seealso{i:'Jenny'}"}`
: Adds an index entry for `Jen`, which references the index entry `Jenny` with the equivalent of "see also" in the language of the book. Note that this cannot be combined with a sub-entry (the ! syntax).

Index entries are case sensitive. For example, `{i: "mark"}` and `{i: "Mark"}` are distinct entries. (The first is for a result or a smudge, the second is a person's name.)

To attach an index entry to the start of a block, put it on its own line above a block:

~~~
{i: "hello"}
I just came to say hello, hello, hello, hello
~~~

To attach an index entry to a word, just add the index entry after the word:

~~~
I just came to say hello{i: "hello"}, hello, hello, hello
~~~

To attach an index entry to a span element, just add the index entry after the span element:

~~~
The first program that a programmer writes in a language is usually *Hello World*{i: "Hello World"}
~~~

Index entries can have commas and other punctuation (except colons) in their definition:

~~~
My wife read some book about a whale by Herman Melville{i: "Melville, Herman"}.
~~~

Multiple index entries can exist in a block, or even a sentence:

~~~
Supposedly the great-great-great-granduncle of the musician
Moby{i: "Moby"} was Herman Melville{i: "Melville, Herman"},
the author of a book about a whale{i: "Moby-Dick; or, The Whale"}.
~~~

Note that adding index entries is best left until the end of a book. At that time, ids like {#myid} can be converted to {id: #myid, i: "blah"} if index entries are being added where ids already are.

{#directives}
## Directives

Directives are switches which affect the future behaviour of a Markua Processor.

The syntax for directives is simple: they are just contained in an attribute list. The only difference is that the attribute list is inserted an a line by itself, with one blank line above and below it.

### Language Attributes and Directives

A Markua document has a language. By default, the language is `en` for English. The default language can be set in the settings, discussed later.

Every human language has a direction, either left-to-right or right-to-left. Also, some fonts only handle certain languages correctly.

So, it's important to be able to indicate in Markua which language the text is in, so that a Markua Processor can use the correct fonts and apply the correct direction.

To do this, you use the `lang` attribute.

If you use the `lang` attribute in an attribute list of a block or span, the `lang` change just applies to that block or span, which can help ensure that the font was correctly set.

However, if you use the `lang` attribute as a directive, it applies as the new default until a different `lang` directive is encountered.

The following example shows how you would say hello in English, then switch the language to Hebrew, then Chinese (Simplified), then Arabic, and then switch back to English to say goodbye:

~~~
hello

{lang: he}

Hebrew

text

here

{lang: zh}

Chinese

text

here

{lang: ar}

Arabic

text

here

{lang: en}

goodbye
~~~

Note that I didn't actually say hello or goodbye in Hebrew, Chinese or Arabic because the code font used for this specification does not support them all.

A> In Leanpub Flavoured Markdown, we had `{rtl}` and `{ltr}` directives. These are not supported in Markua, and neither is a `{dir}` attribute in general: while there are left-to-right languages (most of them) and right-to-left languages (e.g. Arabic and Hebrew), any given language is either a left-to-right or a right-to-left language. So, specifying the language is sufficient--there's no need to have separate `dir` and `lang` attributes.

### Book Section Directives

Most published books have three types of material in them: the front matter, the text and the back matter.

What authors write, the manuscript, is typically what goes into the text, or main matter, of the book. In style guidelines such as the [Chicago Manual of Style](http://www.chicagomanualofstyle.org/home.html) this is called the text; in formats such as TeX and LaTeX it is called main matter. It's what is numbered with Arabic numerals starting from 1.

There's a bunch of other stuff (the Dedication, Epigraph, Table of Contents (or ToC), Foreword, Preface, etc.) which can come before the main text of the book. This is called "front matter". Some of the front matter comes before the ToC and is not numbered; the rest of the front matter that comes after the ToC gets numbered with Roman numerals.

There's also a bunch of other stuff (acknowledgments, appendices, the index, etc) which can come after the main matter. This is called the "back matter".

If Markua just relied on its headings support there would be no good way to accomplish the division of a manuscript into front matter, main matter and back matter. (We could try some convention about heading names, but that would be a highly objectionable, English-centric hack.) Furthermore, there would be no good way to determine which parts of the front matter got numbered and which did not.  Also, there would be no good way to give explicit hints to Markua processors about how to style the various parts of a book.

The book `section` directive is the solution to this. You add a book `section` directive like this:

`{section: mainmatter}`

Adding multiple instances of the `section` directive throughout the book lets you indicate to Markua Processors what section of a book they are in, in order to affect numbering, formatting and other concerns like the placement of the Table of Contents.

Markua is a fairly minimalist format, so this is all accomplished with one directive. Furthermore, for authors who do not know about this directive, nothing bad or unexpected will happen.

There are three types of values of the book `section` directive: front matter values, the `mainmatter` value and back matter values. These values are named for the different book sections identified in the Chicago Manual of Style.

The following values of the `section` directive can occur in front matter:

* `half-title`
* `series-title`
* `title-page`
* `copyright`
* `dedication`
* `epigraph`
* `toc`
* `figures`
* `tables`
* `foreword`
* `preface`
* `acknowledgments` (note that this value can also typically occur after the `{section: mainmatter}` book section directive)
* `introduction`
* `abbr` (yes, it's called `abbr` and not `abbreviations`, and note that this can also typically occur after the `{section: mainmatter}` book section directive)
* `chronology` (note that this can also typically occur after the `{section: mainmatter}` book section directive)

The `{section: mainmatter}` value indicates that the front matter is over. It is the start of the first page of the text.

The following values of the `section` directive can occur in back matter:

* `appendices`
* `notes`
* `glossary`
* `bibliography` (note that a Markua processor may wish to format the text inside this section appropriately)
* `contributors`
* `illustration-credits`
* `index`

You can write a book or document in Markua without using any directives at all, including book `section` directives. However, if you add a `section` directive with a value of any of the front matter values, the `{section: mainmatter}` directive is required.

If you're an author and this seems confusing, don't fear. Almost all of the book `section` directives will typically be added either by someone working for a publisher or automatically by book generation software. The only `section` directives that many authors will use are `{section: dedication}` and `{section: mainmatter}`.

Also, note that Markua Processors may ignore all of the book `section` directives. Book `section` directives are only hints that indicate that the Markua Processor may wish to do things like switch to hanging indents, change the font size, use a custom layout, etc. based on what section of the book they are in.

While these book `section` directives are mere hints, there are strict rules about their use:

1. Like any directive, each book `section` directive must be on a line by itself with blank lines above and below it.
2. Each value of a book `section` directive can only appear once.
3. The book `section` directives are all optional; it is legal to have a Markua document with no book `section` directives.
4. If any book section directives with values which occur in front matter are present, a `{section: mainmatter}` directive is required.

Authors new to Markua can completely ignore all directives, including book `section` directives. Only when they wonder how to make certain sections excluded from the numbering, or to have Roman numerals etc, do they have to worry about book `section` directives. And using directives is very simple, despite how formally specified this section makes them.

W> TODO_LEANPUB - add section directives to Leanpub, and convert the frontmatter and mainmatter directives in this spec to Markua section directives once supported in Leanpub

{#toc}
## Table of Contents

Books often have a Table of Contents.

Markua does not specify any hard requirements about a Table of Contents. However, the following are recommendations:

* A Markua Processor should provide the option of automatically generating a Table of Contents from the names of the parts (if any), chapters, sections and sub-sections of the book.
* A Markua Processor should allow the author to specify how many levels of section are included in the Table of Contents.
* A Markua Processor should allow the author to specify whether parts, chapters, sections and sub-sections are numbered.

Also, a Markua Processor may allow precise positioning of the Table of Contents in the front matter with a `{section: toc}` book section directive.

{#settings}
## Settings

As discussed earlier, a Markua document can be written in one file or multiple manuscript files. If a manuscript is written in multiple files, these files are concatenated together by the Markua processor to produce one temporary manuscript file, and that one file is used as the input.

The settings for a Markua document can alse be provided in four ways:

1. at the top of the first file, enclosed in curly braces
2. in a separate settings file
3. separately (e.g. via a web interface)
4. some combination of #1-#3

Typically approaches #2, #3 and #4 are used when a Markua document is being written in multiple manuscript files.

With approach #1, the settings are added at the top of the file:

~~~
{
title: Markua Specification
authors: Peter Armstrong
}

# The Magical Typewriter

Imagine...
~~~

With approaches #2, #3 and #4, the Markua Processor must act as though there is one file as follows:

~~~
{
(the contents of the actual or synthesized settings file)
}
(the contents of the first manuscript file)

(the contents of the second manuscript file)
...
~~~

The settings contain information about the document. This will include things like the title, subtitle, copyright, author names, etc.

### Settings Are Just Newline-Separated Key-Value Pairs

As the title of this section states, settings are just newline-separated key-value pairs.

Here's an example of the settings metadata:

~~~
title: Markua Specification
authors: Peter Armstrong
contributors: Scott Patten, Braden Simpson and Jordan Ell
copyright: Peter Armstrong
~~~

The format of the metadata is one entry per line, with the keys and values separated by a colon and a space.

Any whitespace at the beginning or end of the keys and values will be stripped. Only the first colon is important. Subsequent colons on a line will just be part of the value.

{#setting-keys-and-values}
### Markua-Defined Settings

The following settings must be supported by all Markua Processors. Markua Processors can also add their own settings, just as Markua Processors can understand their own extension attributes.

code
: The default language that code is. The default is `guess`, which means to guess at the code language based on the syntax encountered (or the file extension for external code samples), and attempt to syntax highlight appropriately. A good alternative is `text`, which means no syntax highlighting should be used, but the code should be in a monospaced font suitable for a programming language. Besides these options, you can specify a particular programming language used, such as `ruby` or `java`. If a Markua processor does not recognize the programming language specified, it must format it as `text`.

language
: The IS0 639-2 alpha-3 language code of the language that the Markua document is written in. The list of choices is here: <http://www.loc.gov/standards/iso639-2/php/code_list.php>. The default is `eng`.

## Escaping Special Characters

### Curly Braces (`{` and `}`)

Curly braces are special in Markua. At the beginning of a line, an opening curly brace (`{`) starts an attribute list. In the middle of a block element, an opening curly brace starts an index entry. And, at the top of a manuscript.txt file (if the single file approach is used), an opening curly brace starts a settings block. So, to use a curly brace as an actual curly brace character, you need to backslash-escape it like this: `\{`. (Note that this does not apply inside code or other resources: Markua does not process anything inside them.)

### Backticks (`)

A backtick in text content (such as this paragraph) starts an inline span resource such as a code resource.

So, to show a literal backtick in a span, you start and end it with *two* backticks.

This is the same reason that there are two ways to create inline figures, with three backticks and three tildes. Starting an inline figure with three tildes lets three backticks be used without closing the figure; similarly, starting an inline figure with three backticks lets three tildes be used without closing the figure. This is necessary for Markua to be usable to write about Markua!

{#comments}
# Comments

While Markua does not support inline HTML, Markua does support using the HTML comment syntax (`<!--` .... `-->`) to comment out portions of a Markua manuscript.

A Markua Processor must ignore any manuscript text inside an HTML comment.

Note that inside an inline code block, an HTML comment is not special: it is just part of the code block, like anything else.

{#criticmarkup}
# CriticMarkup

[CriticMarkup](http://criticmarkup.com/) is supported in Markua. CriticMarkup describes itself as follows:

> a way for authors and editors to track changes to documents in plain text. As with Markdown, small groups of distinctive characters allow you to highlight insertions, deletions, substitutions and comments, all without the overhead of heavy, proprietary office suites.

Basically, supporting CriticMarkup gives Markua authors the benefit of track changes in Word, but with all the benefits of using Markua. An editor can use CriticMarkup to make suggestions about text to add, delete or replace, as well as leaving comments and highlights on selected text.

The largest benefit to using the CriticMarkup syntax in Markua is that since Markua documents are in plain text, you can use proper version control (like Git or Mercurial) with them, and this includes having the comments versioned right along with the rest of the Markua manuscript. Finding a comment that you deleted six months ago is as easy as checking out the revision that contained the comment.

If you enjoy using track changes in Word, then you'll enjoy using CriticMarkup. If you don't enjoy working with editors or getting feedback about your writing in the text itself, then CriticMarkup isn't for you! If this is the case, don't worry about it: the support for CriticMarkup has no impact on the rest of Markua. If you don't want to use it, you don't need to learn about it.

There are five types of changes supported by the markup in CriticMarkup:

|--------------|------------------------------|
| Change       | Markup                       |
|--------------|------------------------------|
| Addition     | `{++` ... `++}`              |
| Deletion     | `{--` ... `--}`              |
| Substitution | `{~~` ... `~>` ... `~~}`     |
| Comment      | `{>>` ... `<<}`              |
| Highlight    | `{==` ... `==}{>>` ... `<<}` |
|--------------|------------------------------|

These types of markup do not conflict with any Markua markup for attribute lists, since the opening curly brace is always followed by special characters.

Markua Processors can support CriticMarkup in one of two ways:

1. By outputting the additions, deletions, substitutions, comments and highlights appropriately, as defined in the very well-written [CriticMarkup spec](http://criticmarkup.com/spec.php).
2. By outputting the original text, removing all suggestions made in CriticMarkup.

Both ways are appropriate, and a Markua Processor could support both. For example, a Markua Processor could output CriticMarkup when previewing, but output only the original text when publishing.

For example, the following example shows a paragraph annotated with all five types of CriticMarkup:

~~~
If you enjoy using track changes{>>Who enjoys this?<<} in Word, then {~~you'll enjoy~>you may like~~} using
CriticMarkup {++annotations++}. If you don't enjoy working with editors{-- or getting feedback about your
writing in the text itself--}, then CriticMarkup isn't for you! If this is the case, don't worry about
it: {==the support for CriticMarkup has no impact on the rest of Markua==}{>>This sounds ambivalent.<<}.
If you don't want to use it, you don't need to learn about it.
~~~

The CriticMarkup section in the HTML Mapping Requirements chapter [shows](#criticmarkup_html) the result of a Markua Processor either outputting or ignoring all the CriticMarkup.

W> TODO_LEANPUB - support this in Leanpub

{#html_mapping_requirements}
# HTML Mapping Requirements

Even though there is no full, canonical HTML mapping, Markua *does* specify how certain parts of Markua syntax **must** be mapped to HTML, if HTML is being generated by a Markua Processor either as an output format or as the basis of an EPUB file.

This chapter defines this HTML mapping.

If you're implementing a Markua Processor, this chapter should be helpful. In addition, note that an open source, ES6-based reference implementation of a Markua Processor which outputs HTML5 is [here](https://github.com/markuadoc/markua-js).

In the HTML ouptut, note the use of `class` attributes where appropriate. This is to enable Markua Processors to use CSS better. Note that no CSS is specified, in order to allow for maximum flexibility and competition on behalf of Markua Processor implementations. However, in some rare cases, CSS rules will be recommended.

This chapter is ordered in an almost identical way to the rest of the spec, but only the examples where there is a spec are included. Unlike the rest of the spec, which did a bunch of explaining and showed almost no HTML, in this chapter there is not much explaining--it's mostly just a bunch of examples.

These examples are not just examples--they are also the basis of a compatibility test suite for Markua Processors. These examples are automatically extracted from this specification and used as tests: Markua processors must generate the given HTML output (ignoring indentation whitespace between HTML tags) for the given Markua input and the given test dependencies. (In this section, there will be a number of Dependencies shown. These are the names and contents of files which get created by the software that generates the Markua test.) See <https://github.com/markuadoc/markua-test> for more information.

## Text Formatting

{#text_formatting_html}
The syntax for text formatting is described [here](#text_formatting).

##### Example

###### Markua Syntax

{#input_text_formatting_1}
~~~
This is _an i tag_ and this is *an em tag*.
This is __a b tag__ and this is **a strong tag**.
This is ___a b i tag combo___ and this is ***a strong em tag combo***.
This is ____a u tag____. Yeah, it's ugly.
This is ~~a strikethrough tag~~.
5^3^ = 125
Water is H~2~O.
~~~

###### HTML Output

{#output_text_formatting_1}
~~~
<p>This is <i>an i tag</i> and this is <em>an em tag</em>.<br/>
This is <b>a b tag</b> and this is <strong>a strong tag</strong>.<br/>
This is <b><i>a b i tag combo</i></b> and this is <strong><em>a strong em tag combo</em></strong>.<br/>
This is <u>a u tag</u>. Yeah, it's ugly.<br/>
This is <span class="strikethrough">a strikethrough tag</span>.<br/>
5<sup>3</sup> = 125<br/>
Water is H<sub>2</sub>O.</p>
~~~

##### CSS Recommendation

The following CSS rule is recommended:

~~~
.strikethrough {
  text-decoration: line-through;
}
~~~

### Why Markua Produces `<b>`, `<strong>`, `<i>` and `<em>` Tags

If you're familiar with Markdown, you will notice a subtle difference with how Markua and Markdown produce bold and italic. There's a good, albeit long, explanation for this--if you like such things, read on.

Markua is a plain text format designed for the writing of books. Books contain bold and italicized text--and have done so for centuries. Because of this, you'd think that the notion of making text bold or italic would be well understood.

If you think this, you are clearly not familiar with the work of the W3C. The notion of making something bold or italic is very controversial in HTML: first the `<b>` and `<i>` tags were used to do this, then they got kind of deprecated in favour of `<strong>` and `<em>`, and now there are four main ways of adding emphasis to text in HTML5: [`<strong>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-strong-element), [`<b>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-b-element), [`<em>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-em-element) and [`<i>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-i-element). The `<strong>` and `<b>` tags can wrap a span of text and add bold-esque emphasis to it, while the `<em>` and `<i>` tags can wrap a span of text and add italic-esque emphasis to it. I say "esque" since there is no guarantee that any of the four tags will actually make anything bold or italic. Seriously.

So, what to do in Markua? Clearly we need to be able to make text bold and italic, since authors have been doing this in books for centuries. How should bold and italic be mapped to HTML?

Here's what Markdown does:

| Markdown Syntax       | HTML Produced                      | Appearance |
|-----------------------|------------------------------------|------------|
| `_one underscore_`    | `<em>one underscore</em>`          | _italic_   |
| `*one asterisk*`      | `<em>one asterisk</em>`            | *italic*   |
| `__two underscores__` | `<strong>two underscores</strong>` | __bold__   |
| `**two asterisks**`   | `<strong>two asterisks</strong>`   | **bold**   |

So, Markdown just always generates `<strong>` and `<em>` tags. Both `**two asterisks**` and `__two underscores__` make a `<strong>` tag, and `*one asterisk*` and `_one underscore_` make an `<em>` tag. In 2004, John Gruber was clearly in the camp of "the `<b>` and `<i>` tags are unsemantic and bad". (At that time, many people were in this camp, as HTML had gone to a dark place full of presentational attributes in tags. The "move all presentation to CSS" backlash was very necessary, but there were a couple places--such as this, and such as the deprecating of the `start` element of an `<ol>`--where semantic information was lumped in with presentation-only information and was unfairly maligned.)

Now, since you can inline HTML in Markdown, if you wanted filthy `<b>` and `<i>` tags in your Markdown document, you could just add them yourself.

Markua, however, does not support inline HTML.

So, what to do?

The goal of Markua is to be the best way in the world to write books, to be simple *and* powerful. Markua also tries to stay as close to Markdown syntax as possible.

Given this, Markua needs to provide the power of picking what kind of emphasis that you want, while ensuring that Markua remains simple to learn and that someone familiar with Markdown won't be surprised by what Markua does. Markua needs to support all four syntaxes for producing emphasis in Markdown (one and two asterisks, one and two underscores), and we want to be able to produce all four of the (newly semantic!) emphasis tags in HTML5. That's exactly what we're going to do. Unlike Markdown which defines four input tags and only two outputs (`<strong>` and `<em>`), Markua maps the four inputs to four outputs.

| Markua Syntax         | HTML Produced                    | Appearance |
|-----------------------|----------------------------------|------------|
| `_one underscore_`    | `<i>one underscore</i>`          | _italic_   |
| `*one asterisk*`      | `<em>one asterisk</em>`          | *italic*   |
| `__two underscores__` | `<b>two underscores</b>`         | __bold__   |
| `**two asterisks**`   | `<strong>two asterisks</strong>` | **bold**   |

W> TODO_LEANPUB - fix two underscores in Leanpub

This way, the appearance of Markua text is the same as Markdown: `**two asterisks**` and `__two underscores__` look bold, and `*one asterisk*` and `_one underscore_` look italic. They just happen to produce four tags, not two.

There are actually a number of benefits to this solution:

* Publishers can style `<b>` and `<strong>` differently. The `<strong>` tag can produce text which is using an even heavier-weight font than the `<b>` tag.
* Authors can italicize things they are supposed to (e.g. the titles of books), without implying the kind of semantic emphasis of the `<em>` tag.
* Since the four combinations of asterisks and underscores produces different output, which to choose will be determined by the desired output, not personal taste of "do you prefer underscores or asterisks". This means that multi-author Markua projects won't have to have pointless writing style debates about which type of Markua markup to use.
* All Markdown text which has any of the four kinds of emphasis will still generate emphasis that looks like this in Markua.
* Text editors (e.g. iA Writer) which know how to show emphasis for Markdown syntax will do so with Markua emphasis syntax.
* If Markua text is processed by a Markdown processor, bold and italic will still look bold and italic. The only difference will be that only `<strong>` and `<em>` tags will be used.

Note that this decision carries over to the ___bold + italic___ combinations. To produce ***bold + italic text***, surround it with either `___three underscores___` (producing `<b><i>` in HTML) or `***three asterisks***` (producing `<strong><em>` in HTML).

W> TODO_LEANPUB - fix three underscores in Leanpub

## Headings

{#headings_html}
The syntax for headings is described [here](#headings).

In Markua, both parts and chapters produce an `h1` in HTML. This is mildly surprising, but entirely appropriate: For books which have no parts, the chapter is the topmost organizational unit. In a book with parts, it is more important for chapters to behave the same way that they do in a book without parts (i.e. to be created with `# Title` and to produce an `h1`) than to be correctly "contained" (if you think like an outliner) inside the Part.

##### Example

###### Markua Syntax

{#input_headings_1}
~~~
# Part (h1) #

This is a paragraph.

# Chapter (also h1)

This is a paragraph.

## Section (h2)

This is a paragraph.

### Sub-Section (h3)

This is a paragraph.

#### Sub-Sub-Section (h4)

This is a paragraph.

##### Sub-Sub-Sub-Section (h5)

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section (h6)

This is a paragraph.
~~~

###### HTML Output

{#output_headings_1}
~~~
<h1 class="part">Part (h1)</h1>
<p>This is a paragraph.</p>
<h1 class="chapter">Chapter (also h1)</h1>
<p>This is a paragraph.</p>
<h2 class="section">Section (h2)</h2>
<p>This is a paragraph.</p>
<h3 class="sub-section">Sub-Section (h3)</h3>
<p>This is a paragraph.</p>
<h4 class="sub-sub-section">Sub-Sub-Section (h4)</h4>
<p>This is a paragraph.</p>
<h5 class="sub-sub-sub-section">Sub-Sub-Sub-Section (h5)</h5>
<p>This is a paragraph.</p>
<h6 class="sub-sub-sub-sub-section">Sub-Sub-Sub-Sub-Section (h6)</h6>
<p>This is a paragraph.</p>
~~~

## Spaces, Newlines and Indentation

{#spaces_html}
The syntax for spaces, newlines and indentation is described [here](#spaces).

### Paragraphs and Blank Lines

##### Example

###### Markua Syntax

{#input_whitespace_1}
~~~
I'm paragraph one. Yay!

This is paragraph two.

This is paragraph three.
~~~

###### HTML Output

{#output_whitespace_1}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two.</p>
<p>This is paragraph three.</p>
~~~

### Single Newlines

##### Example

###### Markua Syntax

{#input_single_newlines_1}
~~~
I'm paragraph one. Yay!

This is paragraph two.
This is *still* in paragraph two, preceded by a forced line break.
This is also in paragraph two, also preceded by a forced line break.

This is paragraph three.

# This.
Is.
Heading Text!!!

This is paragraph four.
~~~

###### HTML Output

{#output_single_newlines_1}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two.<br/>
This is *still* in paragraph two, preceded by a forced line break.<br/>
This is also in paragraph two, also preceded by a forced line break.</p>
<p>This is paragraph three.</p>
<h1>This.<br/>
Is.<br/>
Heading Text!!!</h1>
<p>This is paragraph four.</p>
~~~

### Three or More Newlines

If there are n newlines after a paragraph, there are n-2 break tags in the HTML output, for all n > 2.

##### Example

###### Markua Syntax

{#input_three_or_more_newlines_1}
~~~
This paragraph is followed by two newlines.

This paragraph is followed by three newlines.


This paragraph is followed by five newlines.




The End
~~~

###### HTML Output

{#output_three_or_more_newlines_1}
~~~
<p>This paragraph is followed by two newlines.</p>
<p>This paragraph is followed by three newlines.</p>
<br/>
<p>This paragraph is followed by five newlines.</p>
<br/>
<br/>
<br/>
<p>The End</p>
~~~

### Leading Spaces (Prose vs. Poetry)

##### Example

###### Markua Syntax

{#input_leading_spaces_1}
~~~
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
~~~

###### HTML Output

{#output_leading_spaces_1}
~~~
<p>I grant I never saw a goddess go;<br/>
My mistress when she walks treads on the ground.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;And yet, by heaven, I think my love as rare<br/>
&nbsp;&nbsp;&nbsp;&nbsp;As any she belied with false compare.</p>
~~~

### Internal Spaces Are Collapsed to One Space

##### Example

###### Markua Syntax

{#input_internal_spaces_1}
~~~
foo   bar
~~~

###### HTML Output

{#output_internal_spaces_1}
~~~
<p>foo bar</p>
~~~

## Resources

### Images

{#images_html}
The syntax for images is described [here](#images).

#### Local Images

##### Example

###### Markua Syntax

{#input_local_images_1}
~~~
Easy as ![pie](pie.png).

Here's a paragraph before the first figure.

![A Piece of Cake](cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](pie.jpg)

Here's a paragraph after the third figure.
~~~

###### HTML Output

{#output_local_images_1}
~~~
<p>Easy as <img src="resources/pie.png" alt="pie"/>.</p>
<p>Here's a paragraph before the first figure.</p>
<div class="figure">
  <img src="cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the first and second figures.</p>
<div class="figure">
  <img src="cake.jpg" alt="a slice of chocolate cake" class="fullbleed"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the second and third figures.</p>
<div class="figure">
  <img src="pie.jpg" alt="a slice of apple pie with ice cream on top" class="food-closeup"/>
  <p class="caption">A Piece of Pie</p>
</div>
<p>Here's a paragraph after the third figure.</p>
~~~

#### Web Images

##### Example

###### Markua Syntax

{#input_web_images_1}
~~~
Easy as ![pie](http://markua.com/pie.png).

Here's a paragraph before the first figure.

![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](http://markua.com/pie.jpg)

Here's a paragraph after the third figure.
~~~

###### HTML Output

{#output_web_images_1}
~~~
<p>Easy as <img src="http://markua.com/pie.png" alt="pie"/>.</p>
<p>Here's a paragraph before the first figure.</p>
<div class="figure">
  <img src="http://markua.com/cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the first and second figures.</p>
<div class="figure">
  <img src="http://markua.com/cake.jpg" alt="a slice of chocolate cake" class="fullbleed"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the second and third figures.</p>
<div class="figure">
  <img src="http://markua.com/pie.jpg" alt="a slice of apple pie with ice cream on top" class="food-closeup"/>
  <p class="caption">A Piece of Pie</p>
</div>
<p>Here's a paragraph after the third figure.</p>
~~~

#### Inline Images (SVG only)

##### Example

###### Markua Syntax

{#input_inline_images_1}
~~~
Red `<svg width="10" height="10"><desc>a red square</desc><rect x="0" y="0" width="10" height="10" fill="red"/></svg>`svg square.

Here's a paragraph before the figure.

{caption: "Earth From Space (Simplified)"}
```svg
<svg width="20" height="20">
  <desc>a blue circle</desc>
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_inline_images_1}
~~~
<p>Red <svg width="10" height="10"><desc>a red square</desc><rect x="0" y="0" width="10" height="10" fill="red"/></svg> square.</p>
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <svg width="20" height="20">
    <desc>a blue circle</desc>
    <circle cx="10" cy="10" r="9" fill="blue"/>
  </svg>
  <p class="caption">Earth From Space (Simplified)</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Video

{#video_html}
The syntax for video is described [here](#video).

#### Local Video

##### Example

###### Markua Syntax

{#input_local_video_1}
~~~
Easy as ![pie](pie_eating_contest.mp4).

Here's a paragraph before the figure.

{alt: "a man eating an entire chocolate cake"}
![A Piece of Cake](cake_eating_contest.webm)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_local_video_1}
~~~
<p>Easy as <video src="resources/pie_eating_contest.mp4" alt="pie"/>.</p>
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <video src="cake_eating_contest.webm" alt="a man eating an entire chocolate cake"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

#### Web Video

##### Example

###### Markua Syntax

{#input_web_video_1}
~~~
Introducing Markua: ![Peter's Markua talk](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0).

Here's a paragraph before the figure.

{poster: http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg}
![Introducing Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_web_video_1}
~~~
<p>Easy as <video src="https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0" alt="Peter's Markua talk"/>.</p>
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <video src="https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0"
    poster="http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg"/>
  <p class="caption">Introducing Markua</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Audio

{#audio_html}
The syntax for audio is described [here](#audio).

#### Local Audio

##### Example

###### Markua Syntax

{#input_local_audio_1}
~~~
The talk audio highlights are here: ![](highlights.mp3).

The full version of the talk is here:

![Full Talk](talk.m4a)
~~~

###### HTML Output

{#output_local_audio_1}
~~~
<p>The talk audio highlights are here: <audio src="resources/highlights.mp3"/>.</p>
<p>The full version of the talk is here:</p>
<div class="figure">
  <audio src="resources/talk.m4a"/>
  <p class="caption">Full Talk</p>
</div>
~~~

#### Web Audio

##### Example

###### Markua Syntax

{#input_local_audio_1}
~~~
The talk audio highlights are here: ![](http://markua.com/highlights.mp3).

The full version of the talk is here:

![Full Talk](http://markua.com/talk.m4a)
~~~

###### HTML Output

{#output_local_audio_1}
~~~
<p>The talk audio highlights are here: <audio src="http://markua.com/highlights.mp3"/>.</p>
<p>The full version of the talk is here:</p>
<div class="figure">
  <audio src="http://markua.com/talk.m4a"/>
  <p class="caption">Full Talk</p>
</div>
~~~

### Code

{#code_html}
The syntax for code is described [here](#code).

#### Local Code Resources

##### Span Example

###### Example Dependency

This file must exist in the resources directory. The filename is given, followed by a colon, a newline and the file contents.

{#dependencies_local_code_span_1}
~~~
hello.rb:
puts "hello world"
~~~

###### Markua Syntax

{#input_local_code_span_1}
~~~
Hello in Ruby is a simple ![](hello.rb) statement.
~~~

###### HTML Output

{#output_local_code_span_1}
~~~
<p>Hello in Ruby is a simple <code>puts "hello world"</code> statement.</p>
~~~

##### Figure Example

###### Dependencies

This file must exist in the resources directory. The filename is given, followed by a colon, a newline and the file contents.

{#dependencies_local_code_figure_1}
~~~
hello.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Syntax

{#input_local_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: ruby}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_local_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code format="ruby">
puts "hello"

puts "world"
  </code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

#### Local Code Resources

##### Span Example

###### Example Dependency

This file must exist in the resources directory. The filename is given, followed by a colon, a newline and the file contents.

{#dependencies_local_code_span_1}
~~~
hello.rb:
```
puts "hello world"
```
~~~

###### Markua Syntax

{#input_local_code_span_1}
~~~
Hello in Ruby is a simple ![](hello.rb) statement.
~~~

###### HTML Output

{#output_local_code_span_1}
~~~
<p>Hello in Ruby is a simple <code>puts "hello world"</code> statement.</p>
~~~

##### Figure Example

###### Dependencies

This file must exist in the resources directory. The filename is given, followed by a colon, a newline and the file contents.

{#dependencies_local_code_figure_1}
~~~
helloworld.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Syntax

{#input_local_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: ruby}
![Hello World in Ruby](helloworld.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_local_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code format="ruby">
puts "hello"

puts "world"
  </code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

#### Web Code Resources

##### Span Example

###### Example Dependency

This file exists on `http://markua.com` for test purposes.

{#dependencies_web_code_span_1}
~~~
http://markua.com/hello.rb:
```
puts "hello world"
```
~~~

###### Markua Syntax

{#input_web_code_span_1}
~~~
Hello in Ruby is a simple ![](http://markua.com/hello.rb) statement.
~~~

###### HTML Output

{#output_web_code_span_1}
~~~
<p>Hello in Ruby is a simple <code>puts "hello world"</code> statement.</p>
~~~

##### Figure Example

###### Dependencies

This file exists on `http://markua.com` for test purposes.

{#dependencies_web_code_figure_1}
~~~
http://markua.com/helloworld.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Syntax

{#input_web_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: ruby}
![Hello World in Ruby](http://markua.com/helloworld.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_web_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code format="ruby">
puts "hello"

puts "world"
  </code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

#### Inline Code Resources

##### Span Example

###### Markua Syntax

{#input_inline_code_span_1}
~~~
Hello in Ruby is a `puts "hello"`ruby statement.
~~~

###### HTML Output

{#output_inline_code_span_1}
~~~
<p>Hello in Ruby is a <code format="ruby">puts "hello"`</code> statement.</p>
~~~

##### Figure Example

###### Markua Syntax

{#input_inline_code_figure_1}
~~~
Here's a paragraph before the figure.

{caption: "Hello World in Ruby"}
```ruby
puts "hello"

puts "world"
```

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output_inline_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code format="ruby">
puts "hello"

puts "world"
  </code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Typewriter Poetry with Code Resources

When the `format` is `text` (which happens as the default format of using tildes, or by specifying it explicitly), a `<pre>` block is used with **no** `<code>` block contained inside it. This way, CSS rules to format code won't inadvertently format poetry like code.

##### Example 1: Using three tildes

###### Markua Syntax

{#input_typewriter_poetry_1}
```
Here's a paragraph before the poetry.

{caption: "lazy cat"}
~~~
i
  am
      a        cat
            a        l a z y          cat

me   ow
~~~

Here's a paragraph after the poetry.
```

###### HTML Output

{#output_typewriter_poetry_1}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre>i
  am
      a        cat
            a        l a z y          cat

me   ow</pre>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

##### Example 2: Using three backticks plus the `text` format via syntactic sugar

###### Markua Syntax

{#input_typewriter_poetry_2}
~~~
Here's a paragraph before the poetry.

{caption: "lazy cat"}
```text
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

###### HTML Output

{#output_typewriter_poetry_2}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre>i
  am
      a        cat
            a        l a z y          cat

me   ow</pre>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

##### Example 3: Using three backticks plus the `text` format specified in an attribute list

###### Markua Syntax

{#input_typewriter_poetry_3}
~~~
Here's a paragraph before the poetry.

{caption: "lazy cat", format: text}
```
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

###### HTML Output

{#output_typewriter_poetry_3}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre>i
  am
      a        cat
            a        l a z y          cat

me   ow</pre>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

### Math

Math resources can be either LaTeX math or MathML.

Markua does not specify how math is output in HTML. It is perfectly acceptable for a Markua processor to output any math block as an image or as the LaTeX or MathML text of the math equation itself.

## Lists

### Unordered Lists

##### Example

###### Markua Syntax

{#input_unordered_list_1}
~~~
lorem

* foo
* bar
* baz

ipsum

*  foo
*  bar
*  baz

dolor

*   foo
*   bar
*   baz

sit

*    foo
*    bar
*    baz

amet

- foo
- bar
- baz

lorem

* foo

ipsum

- foo

dolor

~~~

###### HTML Output

{#output_unordered_list_1}
~~~
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>dolor</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>sit</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>amet</p>
<ul class="hyphen">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>lorem</p>
<ul>
  <li>foo</li>
</ul>
<p>ipsum</p>
<ul class="hyphen">
  <li>foo</li>
</ul>
<p>dolor</p>
~~~

### Not Lists

##### Example

###### Markua Syntax

{#input_not_lists_1}
~~~
lorem

+ foo
+ bar
+ baz

ipsum

+ foo

dolor

*    foo
*   bar
*  baz

sit
~~~

###### HTML Output

{#output_not_lists_1}
~~~
<p>lorem</p>
<p>+ foo</p>
<p>+ bar</p>
<p>+ baz</p>
<p>ipsum</p>
<p>+ foo</p>
<p>dolor</p>
<p>*    foo<br/>
*   bar<br/>
*  baz</p>
<p>sit</p>
~~~

### Ordered Lists (i.e. Numbered Lists)

#### Example 1: Decimal Numbers

##### Example

###### Markua Syntax

{#input_ordered_lists_1}
~~~
lorem

1. foo
2. bar
3. baz

ipsum

9. foo
10. bar
11. baz

dolor

3. foo
2. bar
1. baz

sit

11. foo
10. bar
9. baz

amet

1. one
1. two
1. three

etc.
~~~

###### HTML Output

{#output_ordered_lists_1}
~~~
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

#### Example 2: Uppercase Letters

##### Example

###### Markua Syntax

{#input_ordered_lists_2}
~~~
lorem

A. foo
B. bar
C. baz

ipsum

I. foo
J. bar
K. baz

dolor

C. foo
B. bar
A. baz

sit

K. foo
J. bar
I. baz

amet

A. foo
A. bar
A. baz

etc.
~~~

###### HTML Output

{#output_ordered_lists_2}
~~~
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="A" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="A" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="A" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

#### Example 3: Lowercase Letters

##### Example

###### Markua Syntax

{#input_ordered_lists_3}
~~~
lorem

a. foo
b. bar
c. baz

ipsum

i. foo
j. bar
k. baz

dolor

c. foo
b. bar
a. baz

sit

k. foo
j. bar
i. baz

amet

a. foo
a. bar
a. baz

etc.
~~~

###### HTML Output

{#output_ordered_lists_3}
~~~
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="a" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="a" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="a" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 4: Uppercase Roman Numerals

###### Markua Syntax

{#input_ordered_lists_4}
~~~
lorem

I. foo
II. bar
III. baz

ipsum

IX. foo
X. bar
XI. baz

dolor

III. foo
II. bar
I. baz

sit

XI. foo
X. bar
IX. baz

amet

I. foo
I. bar
I. baz

etc.
~~~

###### HTML Output

{#output_ordered_lists_4}
~~~
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="I" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="I" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="I" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 5: Lowercase Roman Numerals

###### Markua Syntax

{#input_ordered_lists_5}
~~~
lorem

i. foo
ii. bar
iii. baz

ipsum

ix. foo
x. bar
xi. baz

dolor

iii. foo
ii. bar
i. baz

sit

xi. foo
x. bar
ix. baz

amet

i. foo
i. bar
i. baz

etc.
~~~

###### HTML Output

{#output_ordered_lists_5}
~~~
<p>lorem</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="i" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="i" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="i" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 6: In Markua, A Single Element Ordered List is Not a List

###### Markua Syntax

{#input_ordered_lists_6}
~~~
foo

1. This isn't a list.

bar

1975. Also, not a list.

lorem

a. This isn't a list either.

ipsum

A. This isn't a list either.

dolor

i. This isn't a list either.

sit

I. This isn't a list either.

amet
~~~

###### HTML Output

{#output_ordered_lists_6}
~~~
<p>foo</p>
<p>1. This isn't a list.</p>
<p>bar</p>
<p>1975. Also, not a list.</p>
<p>lorem</p>
<p>a. This isn't a list either.</p>
<p>ipsum</p>
<p>A. This isn't a list either.</p>
<p>dolor
<p>i. This isn't a list either.</p>
<p>sit</p>
<p>I. This isn't a list either.</p>
<p>amet</p>
~~~

##### Example 7: Ordered List Numbering Rules

###### Markua Syntax

{#input_ordered_lists_7}
~~~
This makes an ordered list with decimal numbers (1, 2, 3):

1. one
1. two
1. three

This does not make a list, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

This makes a list (1975, 1976):

1975. An amazing year.
1976. The year after 1975.

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

This makes a lowercase alphabetical ordered list (a, b):

a. one
b. two

This makes a lowercase alphabetical ordered list (e, f):

e. five
f. six

This makes a lowercase alphabetical ordered list (i, ii, iii, iv):

i. one
ii. two
iii. three
iv. four

Not a list:

i. one
ii. two
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

That's it!
~~~

###### HTML Output

{#output_ordered_lists_7}
~~~
<p>This makes an ordered list with decimal numbers:</p>
<ol>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ol>
<p>This does not make a list, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>This makes a list (1975, 1976):</p>
<ol start="1975">
  <li>An amazing year.</li>
  <li>The year after 1975.</li>
</ol>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>This makes a lowercase alphabetical ordered list (a, b):</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (e, f):</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (i, ii, iii, iv):</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>Not a list:</p>
<p>a\. one<br/>
b\. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>That's it!</p>
~~~

### Multi-Paragraph List Items

##### Example

###### Markua Syntax

{#input_multi_para_lists_1}
~~~
Here's a paragraph before the list.

1.  This is the first paragraph in the first list item. Yay!

    This is a second paragraph in the first list item.

2.  The second list item is simple.

3.  The third list item has three paragraphs.
    This is still part of the first paragraph.

    Here's the second paragraph in the third list item.

    Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

###### HTML Output

{#output_multi_para_lists_1}
~~~
<p>Here's a paragraph before the list.</p>
<ol>
  <li>
    <p>This is the first paragraph in the first list item. Yay!</p>
    <p>This is a second paragraph in the first list item.</p>
  </li>
  <li>The second list item is simple.</li>
  <li>
    <p>The third list item has three paragraphs.<br/>
    This is still part of the first paragraph.</p>
    <p>Here's the second paragraph in the third list item.</p>
    <p>Here's the third paragraph in the third list item.</p>
  </li>
</ol>
<p>Here's a paragraph after the list.</p>
~~~

### Nested Lists

##### Example

###### Markua Syntax

{#input_nested_lists_1}
~~~
* Foo
  1. One
  2. Two
    a. This is 2a
    b. This is 2b
  3. Three
* Bar
  i.   Lorem
  ii.  Ipsum
  iii. Dolor
* Baz
~~~

###### HTML Output

{#output_nested_lists_1}
~~~
<ul>
  <li>
    Foo
    <ol>
      <li>One</li>
      <li>
        Two
        <ol type="a">
          <li>This is 2a</li>
          <li>This is 2b</li>
        </ol>
      </li>
      <li>Three</li>
    </ol>
  </li>
  <li>
    Bar
    <ol type="i">
      <li>Lorem</li>
      <li>Ispum</li>
      <li>Dolor</li>
    </ol>
  </li>
  <li>Baz</li>
</ul>
~~~

### Nesting Block Elements in List Items

#### Single-Paragraph List Items

##### Example

###### Markua Syntax

{#input_spli_1}
~~~
* Foo
  ```ruby
  puts "hello"
  ```
* Bar
  {alt: "too large to fit in the alt text"}
  ![Proof of Fermat's Last Theorem](fermat_proof.mathml)
* Baz
~~~

###### HTML Output

{#output_spli_1}
~~~
TODO
~~~

#### Multiple-Paragraph List Items

##### Example

###### Markua Syntax

{#input_mpli_1}
~~~
* This is paragraph 1 in the first list item.

  ```ruby
  puts "hello"
  ```

  This is paragraph 2 in the first list item.

* This is paragraph 1 in the second list item.

  {alt: "too large to fit in the alt text"}
  ![Proof of Fermat's Last Theorem](fermat_proof.mathml)

  This is paragraph 2 in the second list item.

* Baz
~~~

###### HTML Output

{#output_mpli_1}
~~~
TODO
~~~

## Definition Lists

##### Example

###### Markua Syntax

{#input_definition_lists_1}
~~~
Here's a paragraph before the list.

one
: This is the first paragraph in the first list item. Yay!

  This is a second paragraph in the first list item.

two
: The second list item is simple.

three
: The third list item has three paragraphs.
  This is still part of the first paragraph.

  Here's the second paragraph in the third list item.

  Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

###### HTML Output

{#output_definition_lists_1}
~~~
~~~

## Tables

### Simple Tables

##### Example

###### Markua Syntax

{#input_simple_tables_1}
~~~
~~~

###### HTML Output

{#output_simple_tables_1}
~~~
~~~

## TODO_HERE

TODO

Tables are not specified, so that Markua Processors may transform them into images!?

{#criticmarkup_html}
## CriticMarkup

When outputting HTML, a Markua Processor can either output or ignore all the CriticMarkup.

The choice is situation-dependent. For example, a Markua Processor could output CriticMarkup when previewing, but output only the original text when publishing.

However, regardless of the fact that there is a choice, there is an exact specification for both cases. Also, there is only one choice: all or nothing. It's not acceptable to support some CriticMarkup annotations but not others.

The following example shows a paragraph annotated with CriticMarkup:

~~~
If you enjoy using track changes{>>Who enjoys this?<<} in Word, then {~~you'll enjoy~>you may like~~} using
CriticMarkup {++annotations++}. If you don't enjoy working with editors{-- or getting feedback about your
writing in the text itself--}, then CriticMarkup isn't for you! If this is the case, don't worry about
it: {==the support for CriticMarkup has no impact on the rest of Markua==}{>>This sounds ambivalent.<<}.
If you don't want to use it, you don't need to learn about it.
~~~

Here's the HTML that must be produced when the Markua Processor is ignoring all CriticMarkup:

~~~
<p>If you enjoy using track changes in Word, then you'll enjoy using CriticMarkup. If you don't enjoy
working with editors or getting feedback about your writing in the text itself, then CriticMarkup
isn't for you! If this is the case, don't worry about it: the support for CriticMarkup has no impact
on the rest of Markua. If you don't want to use it, you don't need to learn about it.</p>
~~~

Here's the HTML that must be produced when the Markua Processor is outputting all CriticMarkup:

~~~
<p>If you enjoy using track changes<span class="critic comment">Who enjoys this?</span> in Word,
then <del>you'll enjoy</del><ins>you may like</ins> using CriticMarkup <ins>annotations</ins>. If
you don't enjoy working with editors<del> or getting feedback about your writing in the text itself</del>,
then CriticMarkup isn't for you! If this is the case, don't worry about it: <mark>the support for
CriticMarkup has no impact on the rest of Markua</mark><span class="critic comment">This sounds
ambivalent.</span>. If you don't want to use it, you don't need to learn about it.</p>
~~~

{backmatter}

{#acknowledgments}
# Acknowledgments

I ([Peter Armstrong](https://twitter.com/peterarmstrong)) am the creator of Markua, but I'm getting lots of help.

First, a huge thanks to [Scott Patten](https://twitter.com/scott_patten), my co-founder at Ruboss and Leanpub. Scott is the lead developer of Leanpub's book generation engine. Leanpub Flavoured Markdown would not have existed without Scott's code. Furthermore, Scott is providing valuable feedback in the development of the Markua specification, as well as adding Markua support to Leanpub's book generation engine. Scott is giving me opinionated feedback on the Markua syntax, just as Aaron Swartz gave John Gruber feedback on the Markdown syntax. In many instances, e.g. the poetry syntax, what happens is that I come up with an idea which is good but flawed, Scott points the flaws out and suggests an alternative which often feels like giving into the status quo or feels too much like programming, I get really mad, and then I come up with something better than I would have otherwise. So, Markua probably also wouldn't exist if I couldn't--repeatedly and productively--get mad at Scott.

Second, I'd like to thank [Braden Simpson](https://twitter.com/bradensimpson). Braden has been instrumental in the development of the open source ES6 Markua parser, as well as the open source MarkuaPad editor and its usage in Leanpub. Braden has also been key in developing the test suite for Markua, and along with Scott has given me great feedback on crucial design decisions such as the image syntax.

Third, I'd like to thank my other Leanpub co-founder, [Len Epp](https://twitter.com/lenepp). Len has been instrumental in the development of Leanpub. He joined in the very early days, and has greatly helped our customer development process, helping (as he likes to tease me) grow Leanpub over 100x before Scott and I made him a co-founder. Besides giving the Markua spec a thorough copy edit, he got me to change my mind about the three-or-more newline handling case--so, if you enjoy using gratuitous newlines, you have Len to thank!

Next, a huge thanks to [Ken Pratt](https://twitter.com/ken_pratt), who made a number of key contributions to the development of Leanpub Flavoured Markdown and to Ruboss over his years working with us.

I'd also like to thank [Justin Damer](https://twitter.com/damerdamer). Justin and I designed the logo for Markua together, just as we designed the Leanpub logo together. I've never enjoyed working with a designer more than I enjoy working with Justin.

I'd like to thank my father, who has read the manuscript and given me feedback more than once. This process helped me realize how much of a slog it was to read the first time through, and this led to my factoring out the HTML mapping stuff into its own chapter.

I'm getting great feedback on Twitter and via email as well:

* [Iva Cheung](https://twitter.com/IvaCheung) helped me figure out how to think about front matter, main matter and back matter properly. She also organizes a Vancouver publishing unconference that I've had the pleasure of speaking at.
* I know [Assaf Arkin](https://twitter.com/assaf) from my Silicon Valley days: Assaf was the CTO of Intalio for the four years that I was a developer there. Assaf is probably the smartest technologist that I have ever worked with (sorry Ken!), and his interest in Markua and his feedback during its early development were both motivating and helpful.
* [Axel Rauschmayer](https://twitter.com/rauschma) was really helpful to me in an email thread that we had, which was the catalyst for me to rethink my goals with Markua and to start throwing out more than I had planned to from Leanpub Flavoured Markdown.
* [Michael Müller](https://twitter.com/muellermi) was key in convincing me to add index entry support to Markua.
* Dave Warnock helped me clarify my thinking about lists, and asked a number of insightful questions.
* André Bacci provided good feedback on my HTML mapping decisions.

Perhaps most important, Markua is benefiting from years of feedback about Leanpub Flavoured Markdown from Leanpub authors. If it wasn't for Leanpub authors, there would be no Markua.

Finally, I would like to thank my wife Caroline and my son Evan: while this is not as long as my other books, a lot of thought and effort went into it, and a lot of sacrifice. (Evan in particular is sick of hearing "when Markua's done" as my answer to a number of questions.) Arguably, this was harder than any book I've ever written. As always, their support is very much appreciated.