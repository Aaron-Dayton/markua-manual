# Markua Syntax Guide

Markua syntax is heavily based on Markdown syntax, and is adapted for the needs of books and documents. This is a writer's guide to all of Markua's syntax, focusing on the happy path of how you are supposed to write Markua, and ignoring the complex edge cases.

Markua is used to generate PDF, EPUB, MOBI and HTML. While HTML is just one of the output formats of Markua, it is also the basis of EPUB. The Markua specification defines a precise mapping from Markua to HTML and to book and document concepts. So, in this syntax guide, the HTML that is generated is mentioned where appropriate. The mapping to PDF, MOBI and other formats is implementation-dependent, as is the choice for the CSS to accompany the HTML produced by Markua.

To learn the details of why Markua is the way it is, and for the full specification of Markua and of the HTML produced, read the rest of this specification. If you just want to know how to write proper Markua, just read this chapter.

Markua's goal is to provide all the semantic formatting required by authors. Formatting that could be done by a book designer without needing to discuss it with the author is considered orthogonal to Markua, and is largely omitted from Markua.

## Text Formatting

Here's how to do basic, semantic text formatting.

Italic
: To produce *italic text*, surround it with either `_one underscore_` (producing `<i>`) or `*one asterisk*` (producing `<em>`).

Bold
: To produce **bold text**, surround it with either `__two underscores__` (producing `<b>`) or `**two asterisks**` (producing `<strong>`).

Bold + Italic
: To produce ***bold + italic text***, surround it with either `__three underscores__` (producing `<b><i>`), `***three asterisks***` (producing `<strong><em>`).

Underline
: To produce ____underlined text____, surround it with `____four underscores____` (producing `<u>`). This is gross, but it's a tradeoff for Markdown compatibility: one and two underscores were taken.

Strikethrough
: To produce ~~strikethrough text~~, surround it with `~~two tildes~~`.

Superscript
: To produce superscript like the 3 in 5^3^ = 125, surround it with carets like `5^3^ = 125`.

Subscript
: To produce subscript like the 2 in H~2~O, surround it with single tildes like `H~2~O`.

## Paragraphs, Poetry and Whitespace

A paragraph is text with a blank line both above and below it. This produces a `<p>` tag in HTML.

The distinguishing thing about a paragraph is that there is nothing else distinguishing about it. All block elements that are not some specialized type (like a heading) are paragraphs. Note that since two newlines are added between all Markua files during the concatenation of multiple-file Markua documents, there is an assumed blank line at the top and bottom of each Markua file. So, you cannot make a paragraph (or any block element) span multiple Markua source files.

A single line break produces a forced line break, and a `<br/>` tag in HTML.

Whitespace (either spaces or tabs) is preserved at the beginning of a line.

You can write most poetry without any special formatting characters, such as the following:

I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.

Whitespace in between words, however, is reduced to one space. The primary reason for this is that it lets authors write books using either one or two spaces after a period, with there being no difference in the look. A secondary reason is that this is how things work in HTML (without using `&nbsp;`).

So, if you want to write poetry like e e cummings, you need to use a code block:

~~~
{code: poetry}
```
i am a cat
                        a        l a z y          cat
         me   ow
```
~~~

Whitespace is stripped from the ends of lines and files. Markdown's hack of adding two spaces at the end of a line to force a line break is not needed (or supported) in Markua, since a single line break already produces a line break, as it should.

## File Structure

A Markua document can be written in one file or multiple manuscript files.

If the multiple file approach is used, the listed files are first concatenated together by a Markua Processor to produce one temporary Markua manuscript file, and that one file is used as the input. The Markua Processor generates PDF, EPUB, MOBI and/or HTML output.

Importantly, in order to avoid a number of bugs, the files are not just concatenated together simply--they must be concatenated together with two newlines added between the end of each file and the beginning of the next file, in order to separate the content of the two files with one blank line between them.

Because of this, a paragraph (or any other block element) cannot span multiple manuscript files.

## Resources

Markua books and documents are written in plain text, either in one text file or multiple text files. However, modern books and documents are not just text. Books and documents embed many types of *resources*. These resources have traditionally included things like images, computer code listings and mathematical equations. More recently, with the development of ebooks and formats like EPUB3, ebooks have gained the ability to embed audio and video resources.

The goal here is to make inserting all types of resources simple and consistent, as shown by these brief examples:

Inserting an image is as easy as `![pie](pie.png)`. It's also...

```
{caption: "A Piece of Cake"}
![a slice of chocolate cake](http://markua.com/cake.jpg)
```

For a code samples, it's easy to insert inline code samples:

~~~
```ruby
puts "hello world"
```
~~~

It's also easy to insert external code samples, which are just a resource of type `code`:

```
{type: code, format: ruby}
![](hello.rb)
```

Resources vary in four different ways:

1. Insertion: Span and Figure
2. Location: Local, Web and Inline
3. Type: `image`, `video`, `audio`, `code`, `math` or `text`
4. Format: `png`, `m4a`, `mp3`, `ruby`, `latex`, `plain`, etc.

The syntax to define and insert a resource varies based on its location (local, web or inline) and whether it is inserted as a span or a figure. This will be shown clearly with specific examples below, but it's helpful to start in general terms.

**Insertion:**
If a resource is inserted as part of the flow of text of a paragraph (even if there are single line breaks above or below it), the resource is considered to be a **span resource**. If a resource is inserted with at least one blank above and below it, it's a **figure**.

**Location:**
If a resource is stored along with the manuscript (in a `resources` directory on a local filesystem, or uploaded to the same web service that the manuscript is being written on), it's called a **local resource**. If a resource is referred to via a URL, it's a **web resource**. Finally, if a resource is defined right in the body of a Markua document, it's an **inline resource**.

The syntax for a local resource or a web resource inserted as a figure is as follows:

```
{key: value, comma: separated, optional: attribute_list}
![Optional Alt Text](resource_path_or_url)
```

The syntax for a local resource or a web resource inserted as a span resource is as follows:

```
It's just ![Optional Alt Text](resource_path_or_url) right in the text.
```

The syntax for an inline resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
```optional_format
inline resource content
```
~~~

The syntax for an inline resource inserted as a span element is as follows:

```
It's just `inline resource content\`optional_format right in the text.
```

These syntaxes were all shown in the examples above, and will be shown in more detail in the descriptions of the six resource types below.

### Resource Types and Formats

There are six types of resources: `image`, `video`, `audio`, `code`, `math` and `text`.

Any of the six resource types can be inserted as a local or web resource. Inline resources can be of type `code`, `math` or `text` (regardless of format), and they can also be `image` resources of `svg` format.

Each `type` of resource has a number of supported formats, which can either be specified by the `format` attribute or (in most cases) inferred from the file extension for local and web resources. (Inline resources obviously have no file extension, since they are contained in the body of a Markua manuscript file.)

While the default `type` of a local resource or web resource is always `image`, the default `type` of an inline resource depends on the `format` specified.

* If the format is `svg`, the inline resource is assumed to be of type `image`.
* If the format is `latex` or `mathml`, the inline resource is assumed to be of type `math`.
* If the format is omitted or is `plain`, the inline resource is assumed to be of type `text`.
* For any other format, the inline resource is assumed to be of type `code`.

These defaults mean that Markua can usually do the right thing based on the format, and that the resource type can almost always be inferred for inline resources.

All figures support three attributes: `type`, `format` and `caption`.

As we'll see now, certain resource types of figures support other attributes.

### Images

Like any figure, if an image is inserted as a figure, it can have an attribute list, e.g.

```
{type: image, align: center, float: none, position: near, width: auto, height: auto}
![](http://markua.com/cake.jpg)
```

Note that the values in the above attribute list are actually the default values for web and local resources inserted as figures. So, this attribute list above is identical to there being no attribute list specified.

Markua supports five formats of local and web `image` resources: `gif`, `jpeg`, `png`, `svg` and `svgz`. While the format can be specified by a `format` attribute, for images it can also be inferred by the file extension: `.gif` for `gif`, `.jpg` or `.jpeg` for `jpeg`, `.png` for `png`, `.svg` or `.xml` for `svg, and `.svgz` for `svgz` (zipped SVG).

Markua also supports inserting `svg` format images as inline resources.

The supported attributes for `image` resources are: `align`, `float`, `position`, `width` and `height`. These affect how an image is sized and positioned. The defaults are: `{align: center, float: none, position: near, width: auto, height: auto}`.

The `align` is the horizontal alignment. It can be `center` (the default), `left` or `right`.

The `float` can be `none` (the default), `left`, `conter` or `right`. The `float` trumps `align`. If `float` is anything except its default of `none`, the value of `align` is ignored and the resource is positioned according to the value of the `float`, with the text flowing freely around it.

The `position` refers to vertical positioning on a page. The position only has an effoct on PDF generation -- it is ignored in EPUB and MOBI. It can be `near` (the default), `here`, `top` or `bottom`. The `near` position means to position the image near here, while the `here` position means to position the image exactly here. The `top` position means the top of the page; the `bottom` position means the bottom of the page. (If you're familiar with LaTeX, `near` is similar to `h` and `here` is similar to `H` or `h!`. Note that Markua deliberately does not specify anything about PDF output, to maximize implementation flexibility and encourage competition.)

The `width` and `height` can both be `auto`, `fullbleed` or an integer between `1` and `100` inclusive. The default is `auto`, which means to respect the actual size of the image without overflowing into page margins. If only one of `width` and `height` are `auto`, the image aspect ratio is respected; if both `width` and `height` are specified, the image is resized accordingly. The value of `fullbleed` means to resize the image to full width or height of the page, ignoring margins. It is legal for either one or both of `width` and `height` can be `fullbleed`. The integer values between 1 and 100 are percentage widths of the content area of the page.

Examples:

```
![map of Delaware](delaware.svg)

{caption: "Washington Crossing the Delaware", width: 80, position: top}
![Denzel Washington riding a jet ski in a river](delaware.jpg)

Many startups are ![happy](happy.png) to incorporate in Delaware.
```

SVG images can also be inserted using Markua's inline resource syntax, which is normally used for code samples or math. Doing the following will insert an SVG image of a blue circle:

~~~

```svg
<svg width="50" height="50">
  <circle cx="25" cy="25" r="20" fill="blue"/>
</svg>
```
~~~

### Video

Markua supports two types of `video` resourcess: MP4 and WebM. The video type is determined by file extension: `.mp4` for MP4, and `.webm` for WebM.

The supported attributes for `video` resources are: `poster`, `align`, `float`, `position`, `width` and `height`.

The `poster` is the URL or path to an image which should be shown instead of the video before the video is played. If a Markua Processor is outputting a print book or some format where it is known that video resources are not supported (including if the video is a web resource and web resources are not supported for video), it must choose the poster to use as a replacement for the video.

The `align`, `float`, `position`, `width` and `height` attributes work exactly how they do for images. They apply to the image specified by the `poster` attribute.

Examples:

```
Here's a video:

{type: video, poster: http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg}
!["Peter Armstrong's first talk about Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0 "Introducing Markua")

Ironically, I'm writing this sentence almost a year after that was recorded.
```

### Audio

Markua supports four types of `audio` resources: MP3, AAC, WAV and Ogg Vorbis. The audio type is determined by file extension: `.mp3` for MP3, `.m4a` and `.aac` for AAC, `.wav` and `.wave` for WAV, and `.ogg` and `.oga` for Ogg Vorbis.

There are no supported attributes for `audio` resources.

Examples:

```
The talk highlights are here:

{type: audio}
![](audio.mp3)

A longer version is on the web here:

{type: audio}
![](http://markua.com/fulltalk.m4a)
```

### Code Resources

Code resources can be inserted either from external files (as local or web resources) or in the text of the document inline resources.

{type: code, language: ruby}
![](hello.rb)

{language: ruby}
```
puts "hello"
```

~~~
{type: code}
```svg
<svg width="50" height="50">
  <circle cx="25" cy="25" r="20" fill="blue"/>
</svg>
```
~~~

~~~
{type: image}
```svg
<svg width="50" height="50">
  <circle cx="25" cy="25" r="20" fill="blue"/>
</svg>
```
~~~


```ruby
puts "hello"
```

```text
puts "hello"
```

{type: image}
```svg
```

### Math Resources


Blah blah `puts "hello"`ruby blah blah.

Blah blah `puts "hello"`text blah blah.

Blah blah `x = 2`math blah.

LaTeX math is `math`, MathML is `mathml`.

```math
```

```mathml
```

{language: math}
```
```

{language: mathml}
```
```

TODO