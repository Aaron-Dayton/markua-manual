# Markua Syntax

Markua syntax is heavily based on Markdown syntax, and is adapted for the needs of books and documents. This is a high-level, informal guide to all of Markua's syntax. To learn the details of why Markua is the way it is, and for the full specification both of Markua and of the HTML produced, read the rest of this specification.

Markua is used to generate PDF, EPUB, MOBI and HTML. While HTML is just one of the output formats of Markua, it is also the basis of EPUB. The rest of the Markua specification defines a precise mapping from Markua to HTML and to book and document concepts. In this syntax guide, however, the HTML that is generated is only mentioned where it's interesting. The mapping to PDF, MOBI and other formats is not discussed, and neither are the choices for the CSS to accompany the HTML produced by Markua--all of these are implementation-dependent, in order to encourage creativity and competition in the Markua ecosystem.

## Text Formatting

Markua's goal is to provide all the semantic formatting required by authors. Formatting that could be done by a book designer without needing to discuss it with the author is considered orthogonal to Markua, and is largely omitted from Markua.

Here's how to do basic, semantic text formatting.

Italic
: To produce *italic text*, surround it with either `_one underscore_` (producing `<i>` in HTML) or `*one asterisk*` (producing `<em>` in HTML).

Bold
: To produce **bold text**, surround it with either `__two underscores__` (producing `<b>` in HTML) or `**two asterisks**` (producing `<strong>` in HTML).

Bold + Italic
: To produce ***bold + italic text***, surround it with either `___three underscores___` (producing `<b><i>` in HTML), `***three asterisks***` (producing `<strong><em>` in HTML).

Underline
: To produce ____underlined text____, surround it with `____four underscores____` (producing `<u>` in HTML). This is gross, but it's a tradeoff for Markdown compatibility: the one, two and three underscore choices were taken. Thankfully, it's usually (but not always!) preferable to use italic instead of underline.

Strikethrough
: To produce ~~strikethrough text~~, surround it with `~~two tildes~~`.

W> TODO - FIX STRIKETHROUGH IN LEANPUB

Superscript
: To produce superscript like the 3 in 5^3^ = 125, surround it with carets like `5^3^ = 125`.

Subscript
: To produce subscript like the 2 in H~2~O, surround it with single tildes like `H~2~O`.

## Paragraphs, Whitespace and Poetry

A paragraph is text with a blank line both above and below it. This produces a `<p>` tag in HTML. The distinguishing thing about a paragraph is that there is nothing else distinguishing about it. All block elements that are not some specialized type (like a heading) are paragraphs.

Whitespace handling in Markua is straightfoward:

* Two or more newlines separate top level elements (like paragraphs and headings) from each other. The number of newlines does not matter: ten newlines in a row is equivalent to two newlines in a row.
* A single newline inside a paragraph produces a forced line break (producing `<br/>` in HTML). The top level element is still the same paragraph.
* Spaces or tabs are ignored at the beginning of a line.
* Spaces or tabs are ignored and the end of a line. Markdown's hack of adding two spaces at the end of a line to force a line break is neither supported nor needed in Markua, since a single newline already produces a line break--as it should. (Relying on invisible formatting characters like trailing spaces is a terrible idea, especially since some text editors like Emacs strip trailing spaces by default.)
* Spaces or tabs are reduced to a single space in the middle of a line. The primary reason for this is that it lets authors write books using either one or two spaces after a period, with there being no difference in the formatting. A secondary reason is that this is how things work in HTML (without using `&nbsp;`).

If you want to write poetry where the whitespace (including indentation) matters, you need to surround the poem in three tildes or three backticks. As you'll see in the Resources section, three tildes and backticks have different defaults: three tildes defaults to `plain` format text, whereas three backticks defaults to `monospaced` format text.

The three tildes syntax can be useful to indent sonnets where the indentation matters, but otherwise looks like normal text:

```
~~~
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
~~~
```

The three backticks syntax can be useful to write monospaced poetry like e e cummings:

~~~
```
i am a cat
                        a        l a z y          cat
         me   ow
```
~~~

## File Structure

A Markua document can be written in one file or multiple manuscript files.

If the multiple file approach is used, the listed files are first concatenated together by a Markua Processor to produce one temporary Markua manuscript file, and that one file is used as the input. Importantly, in order to avoid a number of bugs, the files are not just concatenated together simply--they must be concatenated together by Markua Processors with two newlines added between the end of each file and the beginning of the next file, in order to separate the content of the two files with one blank line between them. Because of this, a paragraph (or any other block element) cannot span multiple manuscript files.

## Resources

Markua books and documents are written in plain text, either in one text file or multiple text files. However, modern books and documents are not just text. Books and documents embed many types of *resources*. These resources have traditionally included things like images, computer code listings and mathematical equations. More recently, with the development of ebooks and formats like EPUB3, ebooks have gained the ability to embed audio and video resources. Markua's goal is to make inserting all types of resources simple and consistent, while staying as close to Markdown's syntax as possible.

Before considering each type of resource, it's helpful to consider some brief examples:

~~~
Inserting a span image is as easy as `![pie](pie.png)`. Inserting an image as a figure is also...

![A Piece of Cake](http://markua.com/cake.jpg)

Inline code resources are added as spans like `hello world` or as figures:

```ruby
puts "hello world"
```

{type: code, format: ruby}
![Hello, World](hello.rb)
~~~

The last figure in the example above showed an attribute list, which is a list of key-value pairs in curly braces. Any figure can have an attribute list, regardless of resource location, type or format.

Resources vary in four different ways:

1. Insertion Methods: Span and Figure
2. Locations: Local, Web and Inline
3. Types: `image`, `video`, `audio`, `code`, `math` or `text`
4. Formats: `png`, `m4a`, `mp3`, `ruby`, `latex`, `plain`, etc.

### Resource Locations and Insertion Methods

A resource is either considered a local, web or inline resource based on its location:

Local Resource
: The resource is stored along with the manuscript--either in a `resources` directory on a local filesystem, or uploaded to the same web service where the manuscript is being written.

Web Resource
: The resource is referred to via an `http` or `https` URL.

Inline Resource
: The resource is defined right in the body of a Markua document.

Resources can be inserted either as spans or as figures.

Span
: The resource is inserted as part of the flow of text of a paragraph with no newlines before or after it. A span resource cannot have an attribute list.

Figure
: The resource is inserted with at least one newline before and after it. A figure can have an attribute list. A figure can either be top-level (with a blank line before and after it), or it can be part of the flow of text of a paragraph (with a single newline before it, and one or more newlines after it).

The syntax for a local resource or a web resource inserted as a span is as follows:

```
It's just ![optional alt text](resource_path_or_url) right in the text.
```

The syntax for a local resource or a web resource inserted as a figure is as follows:

```
{key: value, comma: separated, optional: attribute_list}
![Optional Figure Caption](resource_path_or_url)
```

The syntax for an inline resource inserted as a span is as follows:

```
It's a single backtick `followed by inline resource content\`optional_format and then a single backtick.
```

The syntax for an inline resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
```optional_format
inline resource content
```
~~~

### Resource Types and Formats

There are six types of resources: `image`, `video`, `audio`, `code`, `math` and `text`.

Each `type` of resource has a number of supported formats, which can either be specified by the `format` attribute or (in most cases) inferred from the file extension for local and web resources. (Inline resources obviously have no file extension, since they are contained in the body of a Markua manuscript file.)

Any of the six resource types can be inserted as a local resource or web resource, and many of the resource types can also be inserted as an inline resource.

Inline resources can be of type `code`, `math` or `text` (regardless of format), and they can also be `image` resources of `svg` format.

The default `type` of a local resource or web resource is always `image`. This means images in Markua are inserted in essentially the same way they are in Markdown.

The default `type` of an inline resource depends on the `format` specified:

* If the format is `svg`, the inline resource is assumed to be of type `image`.
* If the format is `latex` or `mathml`, the inline resource is assumed to be of type `math`.
* If the format is omitted or is `plain`, the inline resource is assumed to be of type `text`.
* For any other format, the inline resource is assumed to be of type `code`.

These defaults mean that Markua can usually do the right thing based on the format, and that the resource type can almost always be inferred for inline resources. Markua is intended to be pleasant to write, so that means eliminating verboseness by using sensible defaults wherever possible.







## TODO ###############################################

[Below are spare parts that need to be revised and integrated into the above. If you want a nice reading experience, you might as well stop reading now.]


While this seems complex, it's important to emphasize that Markua resource syntax is just Markdown's inline image syntax, extended to support the resource types, figure captions and other attributes required by Markua. The details of all this will be described later, but it's useful to show how this fits together briefly first.

A> The reference style image syntax of Markdown is **NOT** supported in Markua. In something as large as a book, the potential for id collisions in link definitions using the reference link syntax is a lot higher than in the blog post length of typical Markdown documents.


All Markua Processors must support all types of Local Resources. However, due to the nightmare that is current copyright law, support for Web Resources is optional in Markua Processors. Furthermore, support for Web Resources is not all or nothing -- a Markua Processor can support Web Resources for some resource types but not others. For example, a Markua Processor could support Web Resources for code, math and text, but not for images, audio and video. If a Markua Processor does not support a particular type of Web Resource, it must consider all Web Resources of to be missing resources at the time of book or document generation, and use fallback resources or alt text if provided.

A> Obviously, embedding audio and video does not work for printed books and documents. It also won't work in many ebook readers and some ebook formats. However, for the applications (e.g. high school and first year university textbooks) where audio and video would be useful, it would be really, really useful.

Unlike with images which are supported in most circumstances, with audio or video files it's currently a bit of a crapshoot. With audio, there are MP3, AAC, Ogg and WAV formats all in widespread use, and there are a number of other formats with supporters. With video, there's currently a dominant proprietary format (H.264, or .mp4) and a new open source challenger (WebM). It's entirely likely that for a given ebook reader, any given audio or video format will not be supported, and as an ebook author you should be prepared to provide a fallback audio or video resource format and/or a fallback image for situations (including print books) where a audio or video resource will never work.

As such, both the inline and reference methods for defining an audio or video resource support defining an arbitrary number of fallback audio or video resources or images. The reason to provide a fallback audio or video resource is to provide essentially the same content in a different format; the reason to provide a fallback image is to provide a suitable replacement in a situation where audio or video resources are not supported at all.

If a Markua Processor is outputting a print book or some format where it is known that audio or video resource is not supported, it must choose the first fallback image. If no fallback image is provided and a Markua Processor is outputting a format in which audio or video resources are not supported, a missing audio or video image placeholder must be output. The look of this missing audio or video image is not specified in Markua; it can either be deliberately ugly (like the missing image icon in web browsers circa 1995) or it can be attractive.

My assumption is that in most cases authors will only provide alt text and a fallback image, or not provide anything at all. My hope is that at least alt text is provided.


When inserting an audio or video resource as a span element in the flow of a paragraph, Markua Processors will want to use a very small (possibly emoji-sized) thumbnail for the audio or video resource. Otherwise, the paragraph would quickly look ridiculous, as a typical audio or video resource thumbnail is many times the height of a typical line of text.

A> I considered using a definition list syntax for defining audio or video resources, and supporting different figure captions based on which audio or video resource was used. However, I decided that this was objectionable: the text of a book should not change based on the capabilities of the ebook reader, and I consider figure captions to be book text. So, since the alternative caption use case was not legitimate, the need for the definition list syntax evaporated with it. (Yes, there will be line wrapping if there are a number of fallback media defined; that's preferable to having two syntaxes to do the same thing.)


This syntax is similar to Markdown's inline image insertion syntax. Markdown's reference style image syntax is not supported in Markua.

All local resources are stored inside a `resources` directory, whose name is not part of the path. A file called `foo.jpg` in the `resources` directory is referenced as `![](foo.jpg)` -- not as `![](/foo.jpg)`, `![](resources/foo.jpg)` or  `![](/resources/foo.jpg)`. A file called `bar.png` in a subdirectory `foo` of the resources directory is referenced as `![](foo/bar.png)` -- not as `![](/foo/bar.png)`, `![](resources/foo/bar.png)` or  `![](/resources/foo/bar.png)`.

Web resources are identified by URL. Both `http:` and `https:` resources must be supported. Because of copyright concerns, support for web resources is optional in Markua Processors. A Markua Processor may or may not support web resources for any given type of resource.

The `resource_path_or_url` is either the relative path to the resource inside the `resources` directory or the absolute URL of the resource on the internet. In the case of images, audio and video, this becomes the `src` attribute of the resource in HTML.

The default type of a resource is `image`. For other types of resources, the type must be specified as an attribute.

The `resources/` directory is not included in the path in the Markua manuscript; it is present in the generated HTML.

All images identified with a directory path must be inside the `resources` directory or one of its subdirectories. Implementors of Markua Processors must ensure they do not support navigating upward with `../` in paths.

The local resources approach can also be used by hosted services. If they provide a download they should create a resources directory... TODO

A file called `foo.jpg` in the `resources` directory is referenced as `![](foo.jpg)` -- not as `![](/foo.jpg)`, `![](resources/foo.jpg)` or  `![](/resources/foo.jpg)`.

A file called `bar.png` in a subdirectory `foo` of the resources directory is referenced as `![](foo/bar.png)` -- not as `![](/foo/bar.png)`, `![](resources/foo/bar.png)` or  `![](/resources/foo/bar.png)`.

W> In Leanpub Flavoured Markdown, we included `images/` in the path of all images. This is not supported in Markua. If  Not only is it redundant, it incorrectly implies that the directory could be named anything, which is not the case. So, if there is resources/ in a path, a Markua processor **must** assume this is the name of a directory *inside* the resources directory.

When inserting an resource as a span element in the flow of a paragraph, Markua Processors will want to use a very small (possibly emoji-sized) thumbnail for the resource. Otherwise, the paragraph would quickly look ridiculous, as a typical resource thumbnail is many times the height of a typical line of text.



The default attribute list for a local resource or a web resource inserted as a figure is as follows:

```
{type: image, align: center, float: none, position: near, width: auto, height: auto}
```

So, by default, a local or web resource is a center aligned image which does not float and which tries to have its preferred height and width, respecting margins.



The default attribute list for an inline resource inserted as a figure varies based on the delimiters (tildes or backticks) used.

Three tildes produce a default attribute list of:

```
{type: text, format: plain}
```

This is useful for normal poetry.

Three backticks, on the other hand, produce a default attribute list of:

```
{type: text, format: monospaced}
```

This is useful for unformatted code samples and monospaced poetry.

Note that the difference between the default attribute lists with the backtick-delimited and tilde-delimited inline resources is just a difference of defaults. You can specify any attributes you wish with either delimiter, and specified attributes override default ones. The only reason there are different defaults are as syntactic sugar.


All of the resource insertion syntaxes will be shown in more detail in the descriptions of the six resource types below. First, it's important to discuss the optional figure caption and optional alt text.

### Optional Figure Caption and Optional Alt Text

In the Markua local and web resource syntax, just as with the Markdown image syntax, the optional alt text is in square brackets before the resource insertion. Markua also supports specifying the optional alt text as ... TODO

 For inline resources in Markua,

This is text which is intended to take the place of the resource if the resource itself cannot be seen. In the case of images, the obvious use case is for readers with visual disabilities who are using a screen reader, but it also includes audiobooks and ebook readers which often do not support embedded images, audio and video.

While the alt text is optional, it is important to have alt text. This is one reason why the image syntax puts it in the square brackets before the image path: you need to type the square brackets whenever inserting an image, so you might as well type some alt text. Empty square brackets look ugly--like a mistake--and it's a mistake to ignore the needs of readers with visual disabilities.

The alt text should not be the same thing as the figure caption, if the figure caption is present. (Imagine having your screen reader read identical alt text and figure captions to you.) Instead, the alt text should be descriptive of the image content, while the figure caption can be more creative. For example, a figure caption may be "Washington Crossing the Delaware" and the alt text could be "Denzel Washington riding a jet ski in a river". Having good alt text would enable readers who cannot see the image to still get the joke which the figure caption makes.

A> Alt text does not make sense for code or text resources, and it does not make much sense for math resources. (It could make sense for math resources if the mathematical equations are turned into an image or are rendered using a math library not supported by a given ebook reader, however.) Regardless of this fact, it does make sense to use the same syntax for all resources. In a case where there is no appropriate alt text, it can be omitted by using empty square brackets, like `![](resource_path_or_url)`.

A Figure can have a caption. This caption shows up in two places:

1. Near the image, typically above or below it, per the preference of the Markua Processor.
2. As the name of the Figure in the List of Illustrations (a.k.a. Table of Figures), if one is generated for the book. The caption name serves as the text, and it is a crosslink to the image caption associated with the figure itself.






All figures support three attributes: `type`, `format` and `caption`.



A figure can also have attributes. There are three attributes: `float`, `width` and `type`. These are optional, and are expressed in an attribute list above the image. The `float` and `width` turn into inline style tags in the HTML, so if you find that distasteful, then don't do it. (You can always add a `class` attribute to an image, and style that class yourself if you prefer.)

`float`
: The `float` refers to where on the page the image is floated, and can have value of `left`, `right` or `none`. The default is `none`. If the value is `left` the image is floated left; if the value is `right` the image is floated right. If the value is `none`, the image is not floated. Instead, the image is centered on the page, and text does not wrap around it. The `none` value is equivalent to not specifying a value of `float`. Regardless of the value of `float`, the figure caption (if present) is positioned near the image per the preference of the Markua processor.

`width`
: The `width` specifies the width of the image. It is either `auto`, `fullbleed` or an integer between between `1` and `100` inclusive. The default is `auto`, which means to respect the actual size of the image, with a default maximum width of 100% of the page, respecting margins. The value of `fullbleed` means to advise a Markua Processor generating a PDF to resize the image to the full width of the page, ignoring margins. (In the HTML output this just adds a class of `fullbleed` and sets the width to `100%`, and CSS can be used to do whatever the author or book designer chooses to accomplish the fullbleed effect.) The integer values between 1 and 100 mean to resize the image to that percentage width of the page, respecting margins--so `100` means to be 100% of the usable page width, but not spilling into the margins.

`type`
: For an image, the `type` attribute is redundant, as the default type of a Figure is `image`. However, if you feel like it, you can add the `type` attribute with the value `image` if you choose. The reason that the `type` attribute exists on a figure is to allow the figure variant of the image syntax to also support inserting audio and video; see those chapters for details.


As we'll see now, certain resource types of figures support other attributes.

### Images

Like any figure, if an image is inserted as a figure, it can have an attribute list, e.g.

```
{type: image, align: center, float: none, position: near, width: auto, height: auto}
![](http://markua.com/cake.jpg)
```

Note that the values in the above attribute list are actually the default values for web and local resources inserted as figures. So, this attribute list above is identical to there being no attribute list specified.

Markua supports five formats of local and web `image` resources: `gif`, `jpeg`, `png`, `svg` and `svgz`. While the format can be specified by a `format` attribute, for images it can also be inferred by the file extension: `.gif` for GIF, `.jpg` or `.jpeg` for JPEG, `.png` for PNG, `.svg` or `.xml` for SVG, and `.svgz` for SVGZ (zipped SVG).


Markua supports four types of images: GIF, JPEG, PNG and SVG.

The file extension determine the specific type of image. The supported image types are:

* GIF images: `.gif`
* JPEG images: `.jpg`, `.jpeg`
* PNG images: `.png`
* SVG images: `.svg`, `.svgz` (for zipped SVG), `.xml`


The supported attributes for `image` resources are: `align`, `float`, `position`, `width` and `height`. These affect how an image is sized and positioned. The defaults are: `{align: center, float: none, position: near, width: auto, height: auto}`.

The `align` is the horizontal alignment. It can be `center` (the default), `left` or `right`.

The `float` can be `none` (the default), `left`, `conter` or `right`. The `float` trumps `align`. If `float` is anything except its default of `none`, the value of `align` is ignored and the resource is positioned according to the value of the `float`, with the text flowing freely around it.

The `position` refers to vertical positioning on a page. The position only has an effoct on PDF generation -- it is ignored in EPUB and MOBI. It can be `near` (the default), `here`, `top` or `bottom`. The `near` position means to position the image near here, while the `here` position means to position the image exactly here. The `top` position means the top of the page; the `bottom` position means the bottom of the page. (If you're familiar with LaTeX, `near` is similar to `h` and `here` is similar to `H` or `h!`. Note that Markua deliberately does not specify anything about PDF output, to maximize implementation flexibility and encourage competition.)

The `width` and `height` can both be `auto`, `fullbleed` or an integer between `1` and `100` inclusive. The default is `auto`, which means to respect the actual size of the image without overflowing into page margins. If only one of `width` and `height` are `auto`, the image aspect ratio is respected; if both `width` and `height` are specified, the image is resized accordingly. The value of `fullbleed` means to resize the image to full width or height of the page, ignoring margins. It is legal for either one or both of `width` and `height` can be `fullbleed`. The integer values between 1 and 100 are percentage widths of the content area of the page.

These are some local and web image resources:

```
![map of Delaware](delaware.svg)

{caption: "Washington Crossing the Delaware", width: 80, position: top}
![Denzel Washington riding a jet ski in a river](delaware.jpg)

Many startups are ![happy](http://markua.com/happy.png) to incorporate in Delaware.
```

SVG images can also be inserted using Markua's inline resource syntax, which is normally used for code samples or math.

Doing the following will insert an SVG image of a blue circle:

~~~
This is a paragraph.

{alt: "A Blue Circle"}
```svg
<svg width="50" height="50">
  <circle cx="25" cy="25" r="20" fill="blue"/>
</svg>
```

This is also a paragraph.
~~~

Images can be inserted as a span image in the flow of text in a paragraph. When an image is inserted as a span image, it must be positioned where it is inserted -- it cannot be floated and repositioned by Markua processors.

A span image cannot have a caption. If a caption is present, a Markua processor will ignore it. (A Markua processor may add a warning to the list of warnings which are reported in book generation, but no warning is added to the text itself.)


### Video

Markua supports two types of `video` resourcess: MP4 and WebM. The video type is determined by file extension: `.mp4` for MP4, and `.webm` for WebM.

The supported attributes for `video` resources are: `poster`, `align`, `float`, `position`, `width` and `height`.

The `poster` is the URL or path to an image which should be shown instead of the video before the video is played. If a Markua Processor is outputting a print book or some format where it is known that video resources are not supported (including if the video is a web resource and web resources are not supported for video), it must choose the poster to use as a replacement for the video.

The `align`, `float`, `position`, `width` and `height` attributes work exactly how they do for images. They apply to the image specified by the `poster` attribute.

Examples:

```
Here's a video:

{type: video, poster: http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg, caption: "Introducing Markua"}
!["Peter Armstrong's first talk about Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0)

Ironically, I'm writing this sentence almost a year after that was recorded, and I still haven't figured everything out about Markua.
```

### Audio

Markua supports four types of `audio` resources: MP3, AAC, WAV and Ogg Vorbis. The audio type is determined by file extension: `.mp3` for MP3, `.m4a` and `.aac` for AAC, `.wav` and `.wave` for WAV, and `.ogg` and `.oga` for Ogg Vorbis.

There are no supported attributes for `audio` resources.

Examples:

```
The talk highlights are here:

{type: audio}
![](audio.mp3)

A longer version is on the web here:

{type: audio}
![](http://markua.com/fulltalk.m4a)
```

### Code

Code resources can be inserted either from external files (as local or web resources) or in the text of the document inline resources.

~~~
{type: code, language: ruby}
![](hello.rb)

{language: ruby}
```
puts "hello"
```
~~~

~~~
{type: code, language: guess}
![](hello.rb)

{language: ruby}
```
puts "hello"
```

```guess
puts "hello"
```

```text
puts "hello"
```

```
puts "hello"
```
~~~

In the settings, have a default format? choices: guess, plain, ruby, etc. Maybe default language too?

~~~
{type: code}
```svg
<svg width="50" height="50">
  <circle cx="25" cy="25" r="20" fill="blue"/>
</svg>
```
~~~

~~~
{type: image}
```svg
<svg width="50" height="50">
  <circle cx="25" cy="25" r="20" fill="blue"/>
</svg>
```
~~~


```ruby
puts "hello"
```

```text
puts "hello"
```

{type: image}
```svg
```

### Math


Blah blah `puts "hello"`ruby blah blah.

Blah blah `puts "hello"`text blah blah.

Blah blah `x = 2`math blah.

LaTeX math is `math`, MathML is `mathml`.

```math
```

```mathml
```

{language: math}
```
```

{language: mathml}
```
```

TODO

### Text

Poetry, either plain text poetry or monospaced "typewriter poetry" is just a text resource.

If you want to write poetry where the whitespace matters, you need to surround the poem in three tildes or three backticks. As you'll see in the Resources section, three tildes and backticks have different defaults: three tildes defaults to `{type: text, format: plain}` and three backticks defaults to `{type: text, format: monospaced}`.


If you want to write poetry where the whitespace matters, you need to surround the poem in three tildes (`~`) or three backticks (`\``). As you'll see in the Resources section, three tildes and backticks have different defaults: three tildes defaults to {type: text, format: plain} and three backticks defaults to {type: text, format: monospaced}.

The three tildes syntax can be useful to indent sonnets where the indentation matters, but otherwise looks like normal text:

```
~~~
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
~~~
```

The three backticks syntax can be useful to write monospaced poetry like e e cummings:

~~~
```
i am a cat
                        a        l a z y          cat
         me   ow
```
~~~

### Format Types

code: language, plain, guess
text: plain, monospace
math: mathml, latex