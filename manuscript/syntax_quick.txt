# Markua Syntax Quick Reference

Markua syntax is heavily based on Markdown syntax, and is adapted for the needs of books and documents. This is a quick reference to all of Markua's syntax, focusing on the happy path of how you are supposed to write Markua, and ignoring the complex edge cases. In some cases, the HTML that is generated is mentioned.

To learn why Markua is the way it is, and for the proper specification of Markua and of the HTML produced, read the rest of the spec. If you just want to know how to type proper Markua and assume that everything else just works, read this.

## Text Formatting

* To produce *italic text*, surround it with either `_one underscore_` (producing `<i>`) or `*one asterisk*` (producing `<em>`).
* To produce **bold text**, surround it with either `__two underscores__` (producing `<b>`) or `**two asterisks**` (producing `<strong>`).
* To produce ***bold + italic text***, surround it with either `__three underscores__` (producing `<b><i>`), `**three asterisks**` (producing `<strong><em>`).
* To produce ____underlined text____, surround it with `____four underscores____` (producing `<u>`). (Usually italic text is preferred to underlined text, but not always. The syntax for underlined text is gross, but this is a tradeoff.)
* To produce ~~strikethrough text~~, surround it with `~~two tildes~~`.
* To produce superscript like the 3 in 5^3^ = 125, surround it with carets like `5^3^ = 125`.
* To produce subscript like the 2 in H~2~O, surround it with single tildes like `H~2~O`.

## Paragraphs, Poetry and Whitespace

A paragraph is text with a blank line both above and below it. This produces a `<p>` tag in HTML.

The distinguishing thing about a paragraph is that there is nothing else distinguishing about it. All block elements that are not some specialized type (like a heading) are paragraphs. Note that since two newlines are added between all Markua files during the concatenation of multiple-file Markua documents, there is an assumed blank line at the top and bottom of each Markua file. So, you cannot make a paragraph (or any block element) span multiple Markua source files.

A single line break produces a forced line break, and a `<br/>` tag in HTML.

Whitespace (either spaces or tabs) is preserved at the beginning of a line.

You can write most poetry without any special formatting characters, such as the following:

```
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
```

If you want to write poetry like e e cummings, you need to use a code block:

~~~
{code: poetry}
```
i am a cat
                        a        l a z y          cat
         me   ow
```
~~~

Whitespace is stripped from the ends of lines and files. (Markdown's "two space trick" to force a line break is not needed in Markua, since a single line break produces that already.)

## File Structure

A Markua document can be written in one file or multiple manuscript files.

If the multiple file approach is used, the listed files are first concatenated together by a Markua Processor to produce one temporary Markua manuscript file, and that one file is used as the input. The Markua Processor generates PDF, EPUB, MOBI and/or HTML output.

Importantly, in order to avoid a number of bugs, the files are not just concatenated together simply--they must be concatenated together with two newlines added between the end of each file and the beginning of the next file, in order to separate the content of the two files with one blank line between them.

Because of this, a paragraph (or any other block element) cannot span multiple manuscript files.

## Resources

Markua books can include various types of resources. Resources vary in three different ways:

1. Insertion: Inline and Figure
2. Location: Local and Web
3. Type: Image, Code, Math, Text, Audio and Video

The syntax to define and insert a resource is as follows:

```
![Optional Alt Text](resource_path_or_url "Optional Figure Caption")
```

### Resource Insertion: Inline and Figure

This syntax is similar to Markdown's inline image insertion syntax. Markdown's reference style image syntax is not supported in Markua.

If a resource is inserted as part of the flow of text of a paragraph (even if there are single line breaks above or below it), the resource is considered to be an inline resource and the optional figure caption is ignored.

If a resource is inserted with at least one blank above and below it, it's a figure. A figure can also have four optional attributes, `align`, `float`, `width` and `type`. Attributes are expressed in an attribute list above the resource. Not all resource types support all atributes: most of them only make sense for images. Attributes which do not make sense for a given resource type are ignored.

An attribute list is specified like this:

```
{align: center, float: none, width: auto, type: image}
![Optional Alt Text](resource_path_or_url "Optional Figure Caption")
```

The `align` can be `centor` (the default), `left` or `right`. This affects how the resource is aligned on the page, regardless of the value of `float`.

The `float` can be `none` (the default), `left`, `conter` or `right`. If `float` is anything except `none`, the value of `align` is ignored and the resource is positioned according to the value of the `float`, with the text flowing freely around it. If `float` is `none`, the resource takes the entire page width and is aligned according to the value of `align`.

The `width` can be `auto`, `fullbleed` or an integer between `1` and `100` inclusive. The default is `auto`, which means to respect the actual size of the image without overflowing into page margins. The value of `fullbleed` means to resize the image to full width of the page, ignoring margins. The integer values between 1 and 100 are percentage widths of the content area of the page.

The `type` attribute can be either `image` (the default), `code`, `math`, `text`, `audio` and `video`.

You will notice that since all of the attributes in the above attribute list were the defaults, this attribute list is identical to their being no attribute list specified.

### Resource Location: Local and Web

The location of the resource can either be local or a URL.

All local resources are stored inside a `resources` directory, whose name is not part of the path. A file called `foo.jpg` in the `resources` directory is referenced as `![](foo.jpg)` -- not as `![](/foo.jpg)`, `![](resources/foo.jpg)` or  `![](/resources/foo.jpg)`. A file called `bar.png` in a subdirectory `foo` of the resources directory is referenced as `![](foo/bar.png)` -- not as `![](/foo/bar.png)`, `![](resources/foo/bar.png)` or  `![](/resources/foo/bar.png)`.

Web resources are identified by URL. Both `http:` and `https:` resources must be supported.

### Resource Type: Image, Code, Math, Text, Audio and Video