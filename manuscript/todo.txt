# TODO

- specify that 1) and 1. both work.

makes a numbered list starting at 41.

is just three sentences with br tags is a paragraph

1. foo
3. bar
    a) a
    b) b
        i. i
        ii. ii
  c) c
3. baz
4. moo

1. foo
2. bar
    1. one
    2. two
3. baz

1. foo
2. bar
   a) baz
   b) aoeu


philosophical debate: everything as lists, nothing as lists, only canonical case as lists

1) foo
2) bar
3) baz

break tags since ) not html

TODO - differentiate between (strict and not strict) output modes (don't name it strict mode?), and explain (in Leanpub we just have strict mode)

non-strict mode would not strip out non-understood by Markua stuff. strict mode would only output attrs Markua understood.

reconsider align attribute on images!?

sleep on this.

nested lists

significant whitespace =>
 strip at the beginning of a paragraph
 strip at end of line
 collapse into one space in middle
 at the beginning of a non-paragraph newline we preserve them


{class: warning}
B> TODO - Need to consider the following...

* Typographic symbols: Smart quotes, n-dash, m-dash, ellipses, etc?
* Images - Special attributes: width, float, etc?
* CriticMarkup support?
* It would be really nice to support linking to individual definition list items specifically, and to span elements in general.
* Support commenting out files in book.txt and sample.txt with #
* Centering text?
* Font sizes etc with CSS class?
* Should we have a book.css?
* lemma, theorem, etc -- typed figures?
- extension attributes?
- definition list linking yes
- table just table for linking?
- align on a heading?
- align {left, center, right, justified} on any heading?

"the caption" clobbers "clobbered" here
{caption: "the caption"}
![](images/foo.png "clobbered")

specify that magic {#id} syntax does not combine with other attrs

Title Pages: If a file called `title_page.png`, `title_page.jpg` or `title_page.jpeg` exists in the `images` directory, then it will be used as the title page of the book. If more than one of these files exists, then the first one found alphabetically will be used.

(#foo) vs. {#foo} vs. {id: foo}

(#foo) yes
{id: foo} yes
{#foo} no
no mixing {a: b, #c, d: e}

W>
T>
I>
Q>

is tasty sugar. keep these. maybe have fewer???

W> foo
W>
W> bar

is same as

{class: warning}
B> foo
B>
B> bar

the post-book index madness can be converting (#myid) to {id: #myid, i: blah}


### Syntax for index entries

~~~
a b c {i:C} d e

...

a b c{i:C} d e
~~~

results in:

~~~
a b <span id="__i__1__C">c</span> d e

...

a b <span id="__i__2_C">c</span> d e
~~~

spec: defining an index entry attaches it to prev word or to the next block.

The id will be `__i__<number>__<index>`. Where `index` is everything inside of the curly braces after `i:` and before the `|`, with `*` replaced with nothing and `!` replaced with `__`.

index = (The thing inside the curly braces after `i:`).split(/\|/).first.gsub(/\!/, '__').gsub(/\*/, '').lower

`number` is the number of times `index` has been indexed in the document already, counting from 1.

How handle punctuation in index entry?

```
Supposedly the great-great-great-granduncle of the musician Moby{i:Moby} was Herman Melville{i: Melville, Herman}, the author of a book about a whale{i:Moby-Dick; or, The Whale}.
```

How chain ! and | in index entry?

Let's see if the post-commit hook works...