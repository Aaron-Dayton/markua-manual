# TODO

{type: image, format: svg}
```
oauetnh sosaht
```

{type: image}
![alt text](path "Caption")

this infers type from extension

{type: code, lang: ruby}
```
aoue
aoue
aoeu
```

for custom types:
- maybe?
- display names

{type: pokemon_card}

Table of Pokemon Cards

Markua defines just custom, and adds class to figure

![]()

Do we really need the pound sign when linking to an anchor?

[specified in an appendix](#markdown_headings)
vs.
[specified in an appendix](markdown_headings)

float left and right only

- nested list => 2 spaces, 4 spaces, 1 tab, combination? (leaning: 2 spaces)

- code blocks and new paragraphs inside list items

> foo
> bar
>
> baz


* foo
* bar

* a
* b

  bar

  baz
* c

* a
* b
c
* d

* a
* b

  c

  d
e
* f

* new list


<ul>
<li>a</li>
<li>
<p>b</p>
<p>c</p>
<p>d<br/>
e</p>
</li>
<li>f</li>
</ul>


(2-4 spaces or a tab = continue)


* a
* b

  ```
aoue
  ```

* c

* a
* b

  ...
aoue
  ...

* c


  x
  ```
  yada
  yada
  ```
  y
* c

* a
* b
d
e
* c

yada

* foo
* bar
  1. one
  2. two
* baz

yada

yada

* foo
* bar
__1. one
__2. two
* baz

yada

yada

*  foo
*  bar
__1. one
__
_____still one
__2. two
*  baz

* a
* b
  1. c

  2. d
      i. yay
      ii. boo


* foo
  * a
  * b
* bar
* baz

yada

(2-4 spaces or 1 tab) more than prev level of indent




- give up on ) in lists, blame w3c. using ) in a list makes it br tags like a sonnet
- add reversed support
- add nested list support (any type any level) with indent of 4 spaces or 1 tab

- 2 / 4 / tab

- differentiate between (strict and not strict) output modes (don't name it strict mode?), and explain (in Leanpub we just have strict mode); non-strict mode would not strip out non-understood by Markua stuff, strict mode would only output attrs Markua understood
- reconsider align attribute on images

significant whitespace =>
 strip at the beginning of a paragraph
 strip at end of line
 collapse into one space in middle
 at the beginning of a non-paragraph newline we preserve them

{class: warning}
B> TODO - Need to consider the following...

* Typographic symbols: Smart quotes, n-dash, m-dash, ellipses, etc?
* Images - Special attributes: width, float, etc?
* CriticMarkup support?
* It would be really nice to support linking to individual definition list items specifically, and to span elements in general.
* Support commenting out files in book.txt and sample.txt with #

* Font sizes etc with CSS class?
* Should we have a book.css?
* lemma, theorem, etc -- typed figures?
- extension attributes?
- definition list linking yes
- table just table for linking?
- align {left, center, right, justified} on any heading? - no
- no more align on figures, just floating

- multiple 1. lines may be blah or may be blah

w, x, y, z, aa, ab


"the caption" clobbers "clobbered" here
{caption: "the caption"}
![](media/foo.png "clobbered")

specify that magic {#id} syntax does not combine with other attrs

Title Pages: If a file called `title_page.png`, `title_page.jpg` or `title_page.jpeg` exists in the `media` directory, then it will be used as the title page of the book. If more than one of these files exists, then the first one found alphabetically will be used.

(#foo) vs. {#foo} vs. {id: foo}

[blah]{lang:en} to override fonts

[blah]{lang:zh} to override to Chinese and activate LTR
[blah]{lang:ja} to override to Japanese and activate LTR
[blah]{lang:ko} to override to Korean and activate LTR
[blah]{lang:th} to override to Thai and activate LTR
[blah]{lang:he} to override to Hebrew and activate RTL
[blah]{lang:ar} to override to Arabic and activate RTL

need blank line before list

if you don't tack anything on to the [] then they are output

<span dir="ltr" lang="ko">
<span dir="rtl" lang="ar">

TODO - get list of RTL languages

no need for dir attr

lang:en

{id: foo} yes
{#foo} yes
no mixing {a: b, #c, d: e}
no (#foo) -- too much collision

{#foo}


[human readable stuff](http://foo.com)
[human readable stuff](image.png "alt text")
[human readable stuff]{#id}
[human readable stuff]{id: foo, lang:he}


oaue
![alt](foo.png "The Foo")
aoue



aoeunsanoet usnatoh snthae nstaoeh sn
> aonste asnote
> satnoe
natoeh nstaoe stnaoestnao

link ref syntax bad for book because volume

aaoue aoue




[some text]{i: blah}

{i:"Armstrong, Peter"}

{i:hello}
{i:*hello*}
{i:**hello**}
{i:hello!Peter}
{i:hello!*Peter*}
{i:hello!**Peter**}
{i:Peter|see{i:hello}}
{i:Jen|seealso{i:Jenny}}

{i: Moby Dick}
{i:    Moby Dick   }
{i:Moby Dick}
{i: "Moby Dick: or, The Whale"}
commas for quotes only

yada [Peter Armstrong]{i:Peter} yada

foo bar [some hebrew]{lang:he} baz


rule for id characters
rule for index entry syntax


[some text]{i: blah}
foo bar [hebrew text]{lang:he} baz


{lang:ar}
aoetuhnsato stnaoheu tnsoahu nstaoh nstaoh


foo bar
[Peter Armstrong]{i:Armstrong, Peter}


index entry syntax is attr list syntax

W>

T>

I>


Q>

is tasty sugar. keep these. maybe have fewer???

W> foo
W>
W> bar

is same as

{class: warning}
B> foo
B>
B> bar

the post-book index madness can be converting (#myid) to {id: #myid, i: blah}

{dir: rtl} on a block element

no nesting


### Syntax for index entries

~~~
a b c {i:C} d e

...

a b c{i:C} d e
~~~

results in:

~~~
a b <span id="__i__1__C">c</span> d e

...

a b <span id="__i__2_C">c</span> d e
~~~

spec: defining an index entry attaches it to prev word or to the next block.

The id will be `__i__<number>__<index>`. Where `index` is everything inside of the curly braces after `i:` and before the `|`, with `*` replaced with nothing and `!` replaced with `__`.

index = (The thing inside the curly braces after `i:`).split(/\|/).first.gsub(/\!/, '__').gsub(/\*/, '').lower

`number` is the number of times `index` has been indexed in the document already, counting from 1.

How handle punctuation in index entry?

```
Supposedly the great-great-great-granduncle of the musician Moby{i:Moby} was Herman Melville{i: Melville, Herman}, the author of a book about a whale{i:Moby-Dick; or, The Whale}.
```

How chain ! and | in index entry?

Let's see if the post-commit hook works...

EPUB3 audio and video?

- some of the stuff in philosophy.txt is outdated