# TODO

# TODO - EVERYTHING AFTER HERE IS IN FLUX AND SHOULD NOT BE TRUSTED

## captions - generalize for resource not image

A Figure can have a caption. This caption shows up in two places:

1. Near the resource, typically above or below it, per the preference of the Markua Processor.
2. As the name of the Figure in the List of Illustrations (a.k.a. Table of Figures), if one is generated for the book. The caption name serves as the text, and it is a crosslink to the image caption associated with the figure itself.


## image attrs

There are three attributes: `float`, `width` and `type`. These are optional, and are expressed in an attribute list above the image. The `float` and `width` turn into inline style tags in the HTML, so if you find that distasteful, then don't do it. (You can always add a `class` attribute to an image, and style that class yourself if you prefer.)

`float`
: The `float` refers to where on the page the image is floated, and can have value of `left`, `right` or `none`. The default is `none`. If the value is `left` the image is floated left; if the value is `right` the image is floated right. If the value is `none`, the image is not floated. Instead, the image is centered on the page, and text does not wrap around it. The `none` value is equivalent to not specifying a value of `float`. Regardless of the value of `float`, the figure caption (if present) is positioned near the image per the preference of the Markua processor.

`width`
: The `width` specifies the width of the image. It is either `auto`, `fullbleed` or an integer between between `1` and `100` inclusive. The default is `auto`, which means to respect the actual size of the image, with a default maximum width of 100% of the page, respecting margins. The value of `fullbleed` means to advise a Markua Processor generating a PDF to resize the image to the full width of the page, ignoring margins. (In the HTML output this just adds a class of `fullbleed` and sets the width to `100%`, and CSS can be used to do whatever the author or book designer chooses to accomplish the fullbleed effect.) The integer values between 1 and 100 mean to resize the image to that percentage width of the page, respecting margins--so `100` means to be 100% of the usable page width, but not spilling into the margins.

`type`
: For an image, the `type` attribute is redundant, as the default type of a Figure is `image`. However, if you feel like it, you can add the `type` attribute with the value `image` if you choose. The reason that the `type` attribute exists on a figure is to allow the figure variant of the image syntax to also support inserting audio and video; see those chapters for details.

## image span

When inserting an resource as a span element in the flow of a paragraph, Markua Processors will want to use a very small (possibly emoji-sized) thumbnail for the resource. Otherwise, the paragraph would quickly look ridiculous, as a typical resource thumbnail is many times the height of a typical line of text.

## resource types and formats

type: code, math, text, ...
format:
  code: plain, guess, [some language]
  text: plain, monospace
  math: mathml, latex

## backtick vs tilde defaults???

This is useful for unformatted code samples and monospaced poetry.

Note that the difference between the default attribute lists with the backtick-delimited and tilde-delimited inline resources is just a difference of defaults. You can specify any attributes you wish with either delimiter, and specified attributes override default ones. The only reason there are different defaults are as syntactic sugar.

## Optional Figure Caption and Optional Alt Text

All of the resource insertion syntaxes will be shown in more detail in the descriptions of the six resource types below. First, it's important to discuss the optional figure caption and optional alt text.

In the Markua local and web resource syntax, just as with the Markdown image syntax, the optional alt text is in square brackets before the resource insertion. Markua also supports specifying the optional alt text as ... TODO

 For inline resources in Markua,

This is text which is intended to take the place of the resource if the resource itself cannot be seen. In the case of images, the obvious use case is for readers with visual disabilities who are using a screen reader, but it also includes audiobooks and ebook readers which often do not support embedded images, audio and video.

While the alt text is optional, it is important to have alt text. This is one reason why the image syntax puts it in the square brackets before the image path: you need to type the square brackets whenever inserting an image, so you might as well type some alt text. Empty square brackets look ugly--like a mistake--and it's a mistake to ignore the needs of readers with visual disabilities.

The alt text should not be the same thing as the figure caption, if the figure caption is present. (Imagine having your screen reader read identical alt text and figure captions to you.) Instead, the alt text should be descriptive of the image content, while the figure caption can be more creative. For example, a figure caption may be "Washington Crossing the Delaware" and the alt text could be "Denzel Washington riding a jet ski in a river". Having good alt text would enable readers who cannot see the image to still get the joke which the figure caption makes.

A> Alt text does not make sense for code or text resources, and it does not make much sense for math resources. (It could make sense for math resources if the mathematical equations are turned into an image or are rendered using a math library not supported by a given ebook reader, however.) Regardless of this fact, it does make sense to use the same syntax for all resources. In a case where there is no appropriate alt text, it can be omitted by using empty square brackets, like `![](resource_path_or_url)`.


Ideally, a figure should have both alt text and a caption. The alt text is intended for readers who can't see the image, and the caption is intended to complement the image.

Images can be inserted as a figure even with no alt text or caption. If this is done, the image is still styled as a figure, but the image has no caption and does **not** show up in the List of Illustrations.

The alt text and caption are both optional. This example shows a figure with alt text but no caption.

This example shows a figure which is floated `left` and which has a `width` of half the print area on the page.

This example shows a figure which has a `width` attribute of `fullbleed`. Note that this sets a `class` of `fullbleed` and an inline style `width` of `100%`.


## backticks in backticks

Just as with Markdown, to show a literal backtick, you use *two* backticks to start and end your code span. (The Markdown spec says multiple backticks; Markua says exactly two.)

Note that like Markdown, any leading or trailing spaces in a code span are removed.

Three backticks???


### Single Newlines Inside a List, Aside or Blurb

A single newline inside a list, aside or blurb creates a new paragraph within that list item, aside or blurb. This can be used to create multi-paragraph list items, asides, blurbs, etc.

A> This alse means that there is no need for the 4 space indent feature of Markdown. Code blocks and other things can just be added to list items by adding a single newline.

### Newlines and Inserting Things Inside Paragraphs

In Markdown, lists and other block elements cannot be nested inside a paragraph. Instead, they all function like top-level siblings to a paragraph. This makes sense since Markdown is a way of producing HTML, and in HTML5 the W3C has [told anyone who wants to embed a list inside a paragraph to go pound sand](http://www.w3.org/TR/html5/grouping-content.html#the-p-element):

> "The solution is to realise that a paragraph, in HTML terms, is not a logical concept, but a structural one. In the fantastic example above, there are actually five paragraphs as defined by this specification: one before the list, one for each bullet, and one after the list."

So, basically, you can't embed a `<ul>` or `<ol>` inside a `<p>` tag in HTML5. Since Markdown is a way of producing HTML, you can't do it in Markdown either.

Markua, on the other hand, is a way of authoring books and documents, not just a way of producing HTML. HTML is just one of the output formats of Markua. And in books, there is a long history of embedding lists, code samples and figures in the middle of a paragraph--not in a separate top-level element, in the actual middle of the paragraph. So, Markua supports this.

Here are some examples of figures and block quotes inserted inside of, and outside of, paragraphs in Markua:

~~~
This is paragraph one. It is followed by a figure which is a resource of Java code.

{type: code, format: java}
![Hello World in Java](hello.java)

This is paragraph two. It contains a figure which is an inline code resource.

```ruby
puts "hello world"
```

This is still in paragraph two, since it follows the figure with a single newline, not a blank line.

This is paragraph four. It contains a quote from Shakespeare's *Julius Caesar*, broken into two blockquotes.
Here's the first blockquote:

> There is a tide in the affairs of men.
> Which, taken at the flood, leads on to fortune;

The paragraph then continues, and then addes another blockquote:

> Omitted, all the voyage of their life
> Is bound in shallows and in miseries.

This is also still in the same paragraph.

This is the final paragraph.
~~~

{type: image, format: svg}
```
oauetnh sosaht
```

```
{type: image}
![alt text](path "Caption")
```

this infers type from extension

{type: code, lang: ruby}
```
aoue
aoue
aoeu
```

for custom types:
- maybe?
- display names

{type: pokemon_card}

Table of Pokemon Cards

Markua defines just custom, and adds class to figure

```
![]()
```

Do we really need the pound sign when linking to an anchor?

[specified in an appendix](#markdown_headings)
vs.
[specified in an appendix](markdown_headings)

float left and right only

- nested list => 2 spaces, 4 spaces, 1 tab, combination? (leaning: 2 spaces)

- code blocks and new paragraphs inside list items

> foo
> bar
>
> baz


* foo
* bar

* a
* b

  bar

  baz
* c

* a
* b
c
* d

* a
* b

  c

  d
e
* f

* new list


<ul>
<li>a</li>
<li>
<p>b</p>
<p>c</p>
<p>d<br/>
e</p>
</li>
<li>f</li>
</ul>


(2-4 spaces or a tab = continue)


* a
* b

  ```
aoue
  ```

* c

* a
* b

  ...
aoue
  ...

* c


  x
  ```
  yada
  yada
  ```
  y
* c

* a
* b
d
e
* c

yada

* foo
* bar
  1. one
  2. two
* baz

yada

yada

* foo
* bar
__1. one
__2. two
* baz

yada

yada

*  foo
*  bar
__1. one
__
_____still one
__2. two
*  baz

* a
* b
  1. c

  2. d
      i. yay
      ii. boo


* foo
  * a
  * b
* bar
* baz

yada

(2-4 spaces or 1 tab) more than prev level of indent




- give up on ) in lists, blame w3c. using ) in a list makes it br tags like a sonnet
- add reversed support
- add nested list support (any type any level) with indent of 4 spaces or 1 tab

- 2 / 4 / tab

- differentiate between (strict and not strict) output modes (don't name it strict mode?), and explain (in Leanpub we just have strict mode); non-strict mode would not strip out non-understood by Markua stuff, strict mode would only output attrs Markua understood
- reconsider align attribute on images

significant whitespace =>
 strip at the beginning of a paragraph
 strip at end of line
 collapse into one space in middle
 at the beginning of a non-paragraph newline we preserve them

{class: warning}
B> TODO - Need to consider the following...

* Typographic symbols: Smart quotes, n-dash, m-dash, ellipses, etc?
* Images - Special attributes: width, float, etc?
* CriticMarkup support?
* It would be really nice to support linking to individual definition list items specifically, and to span elements in general.
* Support commenting out files in book.txt and sample.txt with #

* Font sizes etc with CSS class?
* Should we have a book.css?
* lemma, theorem, etc -- typed figures?
- extension attributes?
- definition list linking yes
- table just table for linking?
- align {left, center, right, justified} on any heading? - no
- no more align on figures, just floating

- multiple 1. lines may be blah or may be blah

w, x, y, z, aa, ab

```
"the caption" clobbers "clobbered" here
{caption: "the caption"}
![](media/foo.png "clobbered")
```

specify that magic {#id} syntax does not combine with other attrs

Title Pages: If a file called `title_page.png`, `title_page.jpg` or `title_page.jpeg` exists in the `media` directory, then it will be used as the title page of the book. If more than one of these files exists, then the first one found alphabetically will be used.

(#foo) vs. {#foo} vs. {id: foo}

[blah]{lang:en} to override fonts

[blah]{lang:zh} to override to Chinese and activate LTR
[blah]{lang:ja} to override to Japanese and activate LTR
[blah]{lang:ko} to override to Korean and activate LTR
[blah]{lang:th} to override to Thai and activate LTR
[blah]{lang:he} to override to Hebrew and activate RTL
[blah]{lang:ar} to override to Arabic and activate RTL

need blank line before list

if you don't tack anything on to the [] then they are output

<span dir="ltr" lang="ko">
<span dir="rtl" lang="ar">

TODO - get list of RTL languages

no need for dir attr

lang:en

{id: foo} yes
{#foo} yes
no mixing {a: b, #c, d: e}
no (#foo) -- too much collision

{#foo}


[human readable stuff](http://foo.com)
[human readable stuff](image.png "alt text")
[human readable stuff]{#id}
[human readable stuff]{id: foo, lang:he}


```
oaue
![alt](foo.png "The Foo")
aoue
```



aoeunsanoet usnatoh snthae nstaoeh sn
> aonste asnote
> satnoe
natoeh nstaoe stnaoestnao

link ref syntax bad for book because volume

aaoue aoue




[some text]{i: blah}

{i:"Armstrong, Peter"}

{i:hello}
{i:*hello*}
{i:**hello**}
{i:hello!Peter}
{i:hello!*Peter*}
{i:hello!**Peter**}
{i:Peter|see{i:hello}}
{i:Jen|seealso{i:Jenny}}

{i: Moby Dick}
{i:    Moby Dick   }
{i:Moby Dick}
{i: "Moby Dick: or, The Whale"}
commas for quotes only

yada [Peter Armstrong]{i:Peter} yada

foo bar [some hebrew]{lang:he} baz


rule for id characters
rule for index entry syntax


[some text]{i: blah}
foo bar [hebrew text]{lang:he} baz


{lang:ar}
aoetuhnsato stnaoheu tnsoahu nstaoh nstaoh


foo bar
[Peter Armstrong]{i:Armstrong, Peter}


index entry syntax is attr list syntax


is tasty sugar. keep these. maybe have fewer???

W> foo
W>
W> bar

is same as

{class: warning}
B> foo
B>
B> bar

the post-book index madness can be converting (#myid) to {id: #myid, i: blah}

{dir: rtl} on a block element

or

{rtl}
{ltr}

which better?

no nesting


### Syntax for index entries

~~~
a b c {i:C} d e

...

a b c{i:C} d e
~~~

results in:

~~~
a b <span id="__i__1__C">c</span> d e

...

a b <span id="__i__2_C">c</span> d e
~~~

spec: defining an index entry attaches it to prev word or to the next block.

The id will be `__i__<number>__<index>`. Where `index` is everything inside of the curly braces after `i:` and before the `|`, with `*` replaced with nothing and `!` replaced with `__`.

index = (The thing inside the curly braces after `i:`).split(/\|/).first.gsub(/\!/, '__').gsub(/\*/, '').lower

`number` is the number of times `index` has been indexed in the document already, counting from 1.

How handle punctuation in index entry?

```
Supposedly the great-great-great-granduncle of the musician Moby{i:Moby} was Herman Melville{i: Melville, Herman}, the author of a book about a whale{i:Moby-Dick; or, The Whale}.
```

How chain ! and | in index entry?

Let's see if the post-commit hook works...

EPUB3 audio and video?

- some of the stuff in philosophy.txt is outdated

## Important Changes From Leanpub Flavoured Markdown

Markua is the evolution of Leanpub Flavoured Markdown. However, the goal of Markua is to remove the tailbones and appendices that aren't necessary. This appendix highlights things which are changed from Leanpub Flavoured Markdown in a way which is not adequately discussed earlier.

The following Leanpub Flavoured Markdown features are not supported in Markua:

* Centering paragraphs of text or headings using `C>` has been removed.
* Explicit font switching via `{chinesefont}`, `{latinfont}`, `{japanesefont}`, `{koreanfont}` and `{thaifont}` is replaced with attaching a `{lang}` attribute (e.g. [some text]{lang:en}) on a span or block.